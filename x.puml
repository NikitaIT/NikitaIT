@startuml
interface OriginalColumnGroupChild {
    +isVisible(): boolean
    +getColumnGroupShow(): string
    +getId(): string
    +setOriginalParent(originalParent: OriginalColumnGroup): void
}
interface ILogger {
    +log(message: string): void
}
class Color {
    +r: number
    +g: number
    +b: number
    +a: number
    +toHexString(): string
    +toRgbaString(fractionDigits?: number): string
    +toString(): string
    +toHSB(): [number, number, number]
    -derive(hueShift: number, saturationFactor: number, brightnessFactor: number, opacityFactor: number): Color
    +brighter(): Color
    +darker(): Color
    +{static} fromString(str: string): Color
    -{static} hexRe: RegExp
    -{static} shortHexRe: RegExp
    +{static} fromHexString(str: string): Color
    -{static} rgbRe: RegExp
    -{static} rgbaRe: RegExp
    +{static} fromRgbaString(str: string): Color
    +{static} fromArray(arr: [number, number, number] | [number, number, number, number]): Color
    +{static} fromHSB(h: number, s: number, b: number, alpha?: number): Color
    -{static} padHex(str: string): string
    +{static} RGBtoHSB(r: number, g: number, b: number): [number, number, number]
    +{static} HSBtoRGB(H: number, S: number, B: number): [number, number, number]
    -{static} nameToHex: { [key: string]: string; }
}
interface IAfterGuiAttachedParams {
    +container: ContainerType
    +hidePopup?: () => void
    +suppressFocus?: boolean
}
interface IComponent<T> {
    +getGui(): HTMLElement
    +destroy(): void
    +afterGuiAttached(params?: IAfterGuiAttachedParams): void
    +init(params: T): void | AgPromise<void>
}
interface ICellRendererParams {
    +value: any
    +valueFormatted: any
    +getValue: () => any
    +setValue: (value: any) => void
    +formatValue: (value: any) => any
    +data: any
    +node: RowNode
    +colDef: ColDef
    +column: Column
    +$scope: any
    +rowIndex: number
    +api: GridApi
    +columnApi: ColumnApi
    +context: any
    +refreshCell: () => void
    +eGridCell: HTMLElement
    +eParentOfValue: HTMLElement
    +registerRowDragger: (rowDraggerElement: HTMLElement) => void
    +addRenderedRowListener: (eventType: string, listener: Function) => void
}
interface ISetFilterCellRendererParams {
    +value: any
    +valueFormatted: any
    +api?: GridApi
    +context: any
}
interface ICellRenderer {
    +refresh(params: ICellRendererParams): boolean
}
interface ICellRendererComp extends ICellRenderer
interface ICellRendererFunc
enum AgPromiseStatus {
    IN_PROGRESS
    RESOLVED
}
class AgPromise<T> {
    -status: AgPromiseStatus
    -resolution: T
    -waiters: ((value: T | null) => void)[]
    +then(func: (result: T | null) => V): AgPromise<V>
    +resolveNow(ifNotResolvedValue: Z, ifResolved: (current: T | null) => Z): Z
    -onDone(value: T): void
    -onReject(params: any): void
    +{static} all(promises: AgPromise<T>[]): AgPromise<T[]>
    +{static} resolve(value?: T): AgPromise<T>
}
class Constants {
    +{static} ROW_BUFFER_SIZE: number
    +{static} LAYOUT_INTERVAL: number
    +{static} BATCH_WAIT_MILLIS: number
    +{static} EXPORT_TYPE_DRAG_COPY: string
    +{static} EXPORT_TYPE_CLIPBOARD: string
    +{static} EXPORT_TYPE_EXCEL: string
    +{static} EXPORT_TYPE_CSV: string
    +{static} ROW_MODEL_TYPE_INFINITE: string
    +{static} ROW_MODEL_TYPE_VIEWPORT: string
    +{static} ROW_MODEL_TYPE_CLIENT_SIDE: string
    +{static} ROW_MODEL_TYPE_SERVER_SIDE: string
    +{static} ALWAYS: string
    +{static} ONLY_WHEN_GROUPING: string
    +{static} PINNED_TOP: string
    +{static} PINNED_BOTTOM: string
    +{static} DOM_LAYOUT_NORMAL: string
    +{static} DOM_LAYOUT_PRINT: string
    +{static} DOM_LAYOUT_AUTO_HEIGHT: string
    +{static} GROUP_AUTO_COLUMN_ID: string
    +{static} SOURCE_PASTE: string
    +{static} PINNED_RIGHT: "right"
    +{static} PINNED_LEFT: "left"
    +{static} SORT_ASC: string
    +{static} SORT_DESC: string
    +{static} INPUT_SELECTOR: string
    +{static} FOCUSABLE_SELECTOR: string
    +{static} FOCUSABLE_EXCLUDE: string
}
interface IFrameworkOverrides {
    +setTimeout(action: any, timeout?: any): void
    +addEventListener(element: HTMLElement, type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void
    +dispatchEvent(eventType: string, listener: () => {}): void
}
class NumberSequence {
    -nextValue: number
    -step: number
    +next(): number
    +peek(): number
    +skip(count: number): void
}
class Timer {
    -timestamp: number
    +print(msg: string): void
}
interface IEventEmitter {
    +addEventListener(eventType: string, listener: EventListener, async?: boolean, options?: AddEventListenerOptions): void
    +removeEventListener(eventType: string, listener: EventListener, async?: boolean, options?: AddEventListenerOptions): void
}
class BeanStub implements IEventEmitter {
    #localEventService: EventService
    -destroyFunctions: (() => void)[]
    -destroyed: boolean
    +__v_skip: boolean
    -frameworkOverrides: IFrameworkOverrides
    #context: Context
    #eventService: EventService
    #gridOptionsWrapper: GridOptionsWrapper
    #getFrameworkOverrides(): IFrameworkOverrides
    +getContext: () => Context
    #destroy(): void
    +addEventListener(eventType: string, listener: Function): void
    +removeEventListener(eventType: string, listener: Function): void
    +dispatchEventAsync(event: AgEvent): void
    +dispatchEvent(event: T): void
    +addManagedListener(object: HTMLElement | GridOptionsWrapper | Window | IEventEmitter, event: string, listener: (event?: any) => void): () => null
    +isAlive: () => boolean
    +addDestroyFunc(func: () => void): void
    +createManagedBean(bean: T, context?: Context): T
    #createBean(bean: T, context?: Context, afterPreCreateCallback?: (comp: Component) => void): T
    #destroyBean(bean: T, context?: Context): T
    #destroyBeans(beans: T[], context?: Context): T[]
    +{static} EVENT_DESTROYED: string
}
class ExpressionService extends BeanStub {
    -expressionToFunctionCache: any
    -logger: Logger
    -setBeans(loggerFactory: LoggerFactory): void
    +evaluate(expressionOrFunc: string | Function, params: any): any
    -evaluateExpression(expression: string, params: any): any
    -createExpressionFunction(expression: any): any
    -createFunctionBody(expression: any): any
}
class ValueCache extends BeanStub {
    -cacheVersion: number
    -active: boolean
    -neverExpires: boolean
    +init(): void
    +onDataChanged(): void
    +expire(): void
    +setValue(rowNode: RowNode, colId: string, value: any): any
    +getValue(rowNode: RowNode, colId: string): any
}
class ValueService extends BeanStub {
    -expressionService: ExpressionService
    -columnController: ColumnController
    -valueCache: ValueCache
    -cellExpressions: boolean
    -initialised: boolean
    +init(): void
    +getValue(column: Column, rowNode?: RowNode, forFilter?: boolean, ignoreAggData?: boolean): any
    -getOpenedGroup(rowNode: RowNode, column: Column): any
    +setValue(rowNode: RowNode, colKey: string | Column, newValue: any, eventSource?: string): void
    -setValueUsingField(data: any, field: string, newValue: any, isFieldContainsDots: boolean): boolean
    -executeFilterValueGetter(valueGetter: string | Function, data: any, column: Column, rowNode: RowNode): any
    -executeValueGetter(valueGetter: string | Function, data: any, column: Column, rowNode: RowNode): any
    -getValueCallback(node: RowNode, field: string | Column): any
    +getKeyForNode(col: Column, rowNode: RowNode): any
}
interface RowBounds {
    +rowTop: number
    +rowHeight: number
    +rowIndex?: number
}
interface IRowModel {
    +getRow(index: number): RowNode
    +getRowNode(id: string): RowNode
    +getRowCount(): number
    +getTopLevelRowCount(): number
    +getTopLevelRowDisplayedIndex(topLevelIndex: number): number
    +getRowIndexAtPixel(pixel: number): number
    +isRowPresent(rowNode: RowNode): boolean
    +getRowBounds(index: number): RowBounds
    +isEmpty(): boolean
    +isRowsToRender(): boolean
    +getNodesInRangeForSelection(first: RowNode, last: RowNode): RowNode[]
    +forEachNode(callback: (rowNode: RowNode, index: number) => void): void
    +getType(): string
    +isLastRowIndexKnown(): boolean
    +ensureRowHeightsValid(startPixel: number, endPixel: number, startLimitIndex: number, endLimitIndex: number): boolean
    +start(): void
}
interface IFloatingFilterParams {
    +column: Column
    +filterParams: IFilterParams
    +currentParentModel: () => any
    +parentFilterInstance: (callback: (filterInstance: IFilterComp) => void) => void
    +showParentFilter: () => void
    +suppressFilterButton: boolean
    +api: GridApi
    +onFloatingFilterChanged: (change: any) => boolean
}
interface IFloatingFilter {
    +onParentModelChanged(parentModel: any, filterChangedEvent?: FilterChangedEvent): void
}
interface IFloatingFilterComp extends IFloatingFilter
interface BaseFloatingFilterChange {
    +model: ProvidedFilterModel
    +apply: boolean
}
interface IFilterDef {
    +filter?: IFilterType
    +filterFramework?: any
    +filterParams?: any
    +floatingFilterComponent?: string | (new () => IFloatingFilterComp)
    +floatingFilterComponentParams?: any
    +floatingFilterComponentFramework?: any
}
interface IFilter {
    +isFilterActive(): boolean
    +doesFilterPass(params: IDoesFilterPassParams): boolean
    +getModel(): any
    +setModel(model: any): void | AgPromise<void>
    +onNewRowsLoaded(): void
    +onAnyFilterChanged(): void
    +getFrameworkComponentInstance(): any
    +getModelAsString(model: any): string
}
interface ProvidedFilterModel {
    +filterType?: string
}
interface IFilterComp extends IFilter
interface IDoesFilterPassParams {
    +node: RowNode
    +data: any
}
interface IFilterOptionDef {
    +displayKey: string
    +displayName: string
    +test: (filterValue: any, cellValue: any) => boolean
    +hideFilterInput?: boolean
}
interface IFilterParams {
    +api: GridApi
    +column: Column
    +colDef: ColDef
    +rowModel: IRowModel
    +filterChangedCallback: (additionalEventAttributes?: any) => void
    +filterModifiedCallback: () => void
    +valueGetter: (rowNode: RowNode) => any
    +doesRowPassOtherFilter: (rowNode: RowNode) => boolean
    +context: any
}
interface Filter extends IFilter
interface ComponentType {
    +propertyName: string
    +isCellRenderer(): boolean
}
interface FrameworkComponentWrapper {
    +wrap(frameworkComponent: new () => any, methodList: string[], optionalMethodList: string[], componentType: ComponentType, componentName?: string): A
}
interface WrapableInterface {
    +hasMethod(name: string): boolean
    +callMethod(name: string, args: IArguments): void
    +addMethod(name: string, callback: Function): void
}
abstract class BaseComponentWrapper<F extends WrapableInterface> implements FrameworkComponentWrapper {
    +wrap(OriginalConstructor: new () => any, mandatoryMethodList: string[], optionalMethodList?: string[], componentType: ComponentType, componentName?: string): A
    +{abstract} createWrapper(OriginalConstructor: new () => any, componentType: ComponentType, componentName?: string): F
    -createMethod(wrapper: F, methodName: string, mandatory: boolean): void
    #createMethodProxy(wrapper: F, methodName: string, mandatory: boolean): Function
}
interface IPopupComponent<T> extends IComponent {
    +isPopup(): boolean
    +focusIn(): void
    +focusOut(): void
}
class PopupComponent extends Component implements IPopupComponent {
    +isPopup(): boolean
    +setParentComponent(container: Component): void
    +destroy(): void
}
interface ICellEditor {
    +getValue(): any
    +isPopup(): boolean
    +getPopupPosition(): string
    +isCancelBeforeStart(): boolean
    +isCancelAfterEnd(): boolean
    +focusIn(): void
    +focusOut(): void
    +getFrameworkComponentInstance(): any
}
interface ICellEditorParams {
    +value: any
    +keyPress: number
    +charPress: string
    +column: Column
    +colDef: ColDef
    +node: RowNode
    +data: any
    +rowIndex: number
    +api: GridApi
    +columnApi: ColumnApi
    +cellStartedEdit: boolean
    +context: any
    +$scope: any
    +onKeyDown: (event: KeyboardEvent) => void
    +stopEditing: (suppressNavigateAfterEdit?: boolean) => void
    +eGridCell: HTMLElement
    +parseValue: (value: any) => any
    +formatValue: (value: any) => any
}
interface ICellEditorComp extends ICellEditor
interface IAgLabel {
    +label?: string | HTMLElement
    +labelWidth?: number | "flex"
    +labelSeparator?: string
    +labelAlignment?: LabelAlignment
}
abstract class AgAbstractLabel<TConfig extends IAgLabel> extends Component {
    #{abstract} eLabel: HTMLElement
    #config: TConfig
    #labelSeparator: string
    #labelAlignment: LabelAlignment
    -label: string | HTMLElement
    #postConstruct(): void
    #refreshLabel(): void
    +setLabelSeparator(labelSeparator: string): this
    +getLabelId(): string
    +getLabel(): string | HTMLElement
    +setLabel(label: string | HTMLElement): this
    +setLabelAlignment(alignment: LabelAlignment): this
    +setLabelWidth(width: number | "flex"): this
}
abstract class AgAbstractField<TValue, TConfig extends IAgLabel> extends AgAbstractLabel {
    #previousValue: TValue
    #value: TValue
    #disabled: boolean
    #className?: string
    #postConstruct(): void
    +onValueChange(callbackFn: (newValue?: TValue | null) => void): this
    +getWidth(): number
    +setWidth(width: number): this
    +getPreviousValue(): TValue
    +getValue(): TValue
    +setValue(value?: TValue, silent?: boolean): this
    +setDisabled(disabled: boolean): this
    +isDisabled(): boolean
    +{static} EVENT_CHANGED: string
}
interface IInputField extends IAgLabel {
    +value?: any
    +width?: number
}
abstract class AgAbstractInputField<TElement extends FieldElement, TValue, TConfig extends IInputField> extends AgAbstractField {
    #eLabel: HTMLElement
    #eWrapper: HTMLElement
    #eInput: TElement
    -inputType: string
    -displayFieldTag: string
    #postConstruct(): void
    #refreshLabel(): void
    #addInputListeners(): void
    -setInputType(): void
    +getInputElement(): TElement
    +setInputWidth(width: number | "flex"): this
    +setInputName(name: string): this
    +getFocusableElement(): HTMLElement
    +setMaxLength(length: number): this
    +setInputPlaceholder(placeholder: string): this
    +setInputAriaLabel(label: string): this
    +setDisabled(disabled: boolean): this
}
interface ITextInputField extends IInputField {
    +allowedCharPattern?: string
}
class AgInputTextField extends AgAbstractInputField {
    #postConstruct(): void
    +setValue(value?: string, silent?: boolean): this
    -preventDisallowedCharacters(): void
}
class KeyCode {
    +{static} BACKSPACE: number
    +{static} TAB: number
    +{static} ENTER: number
    +{static} SHIFT: number
    +{static} ESCAPE: number
    +{static} SPACE: number
    +{static} LEFT: number
    +{static} UP: number
    +{static} RIGHT: number
    +{static} DOWN: number
    +{static} DELETE: number
    +{static} A: number
    +{static} C: number
    +{static} V: number
    +{static} D: number
    +{static} Z: number
    +{static} Y: number
    +{static} F2: number
    +{static} PAGE_UP: number
    +{static} PAGE_DOWN: number
    +{static} PAGE_HOME: number
    +{static} PAGE_END: number
}
interface ITextCellEditorParams extends ICellEditorParams {
    +useFormatter: boolean
}
class TextCellEditor extends PopupComponent implements ICellEditorComp {
    -highlightAllOnFocus: boolean
    -focusAfterAttached: boolean
    #params: ICellEditorParams
    #eInput: AgInputTextField
    +init(params: ITextCellEditorParams): void
    +afterGuiAttached(): void
    +focusIn(): void
    +focusOut(): void
    +getValue(): any
    -getStartValue(params: ITextCellEditorParams): any
    +isPopup(): boolean
    -{static} TEMPLATE: string
}
interface IDate {
    +getDate(): Date
    +setDate(date: Date): void
    +setInputPlaceholder(placeholder: string): void
    +setInputAriaLabel(placeholder: string): void
}
interface IDateParams {
    +onDateChanged: () => void
    +filterParams: IDateFilterParams
}
interface IDateComp extends IComponent
class DateCompWrapper {
    -dateComp: IDateComp
    -tempValue: Date
    -alive: boolean
    -context: Context
    +destroy(): void
    +getDate(): Date
    +setDate(value: Date): void
    +setInputPlaceholder(placeholder: string): void
    +setInputAriaLabel(label: string): void
    +afterGuiAttached(params?: IAfterGuiAttachedParams): void
}
interface NullComparator {
    +equals?: boolean
    +lessThan?: boolean
    +greaterThan?: boolean
}
interface IScalarFilterParams extends ISimpleFilterParams {
    +inRangeInclusive?: boolean
    +includeBlanksInEquals?: boolean
    +includeBlanksInLessThan?: boolean
    +includeBlanksInGreaterThan?: boolean
    +includeBlanksInRange?: boolean
    +nullComparator?: NullComparator
}
interface Comparator<T>
abstract class ScalarFilter<M extends ISimpleFilterModel, T> extends SimpleFilter {
    -scalarFilterParams: IScalarFilterParams
    #{abstract} comparator(): Comparator<T>
    #{abstract} mapRangeFromModel(filterModel: ISimpleFilterModel): { from: T | null | undefined; to: T | null | undefined; }
    #setParams(params: IScalarFilterParams): void
    -checkDeprecatedParams(): void
    #individualConditionPasses(params: IDoesFilterPassParams, filterModel: ISimpleFilterModel): boolean
}
class OptionsFactory {
    #customFilterOptions: { [name: string]: IFilterOptionDef; }
    #filterOptions: (string | IFilterOptionDef)[]
    #defaultOption: string
    +init(params: IScalarFilterParams, defaultOptions: string[]): void
    +getFilterOptions(): (string | IFilterOptionDef)[]
    -mapCustomOptions(): void
    -selectDefaultItem(params: ISimpleFilterParams): void
    +getDefaultOption(): string
    +getCustomOption(name?: string): IFilterOptionDef
}
interface IClipboardService {
    +registerGridCore(gridCore: GridCore): void
    +pasteFromClipboard(): void
    +copyToClipboard(includeHeader?: boolean): void
    +copySelectedRowsToClipboard(includeHeader?: boolean, columnKeys?: (string | Column)[]): void
    +copySelectedRangeToClipboard(includeHeader?: boolean): void
    +copyRangeDown(): void
}
interface IToolPanelParams {
    +api: GridApi
    +columnApi: ColumnApi
}
interface IToolPanel {
    +refresh(): void
}
interface IToolPanelComp extends IToolPanel
interface ToolPanelColumnCompParams extends IToolPanelParams {
    +suppressRowGroups: boolean
    +suppressValues: boolean
    +suppressPivots: boolean
    +suppressPivotMode: boolean
    +suppressSideButtons: boolean
    +suppressColumnFilter: boolean
    +suppressColumnSelectAll: boolean
    +suppressColumnExpandAll: boolean
    +contractColumnSelection: boolean
    +suppressSyncLayoutWithGrid: boolean
}
interface IPrimaryColsPanel {
    +getGui(): HTMLElement
    +init(allowDragging: boolean, params: ToolPanelColumnCompParams, eventType: ColumnEventType): void
    +onExpandAll(): void
    +onCollapseAll(): void
    +expandGroups(groupIds?: string[]): void
    +collapseGroups(groupIds?: string[]): void
    +setColumnLayout(colDefs: (ColDef | ColGroupDef)[]): void
    +syncLayoutWithGrid(): void
}
interface ISideBar {
    +refresh(): void
    +setDisplayed(show: boolean): void
    +setSideBarPosition(position?: "right" | "left"): void
    +isToolPanelShowing(): boolean
    +openToolPanel(key: string): void
    +getToolPanelInstance(key: string): IToolPanel
    +close(): void
    +reset(): void
    +openedItem(): string
}
class ResizeObserverService extends BeanStub {
    +observeResize(element: HTMLElement, callback: () => void, debounceDelay?: number): () => void
}
interface ToolPanelDef {
    +id: string
    +labelDefault: string
    +labelKey: string
    +iconKey: string
    +toolPanel?: string | (new () => IToolPanelComp)
    +toolPanelFramework?: any
    +toolPanelParams?: any
}
interface SideBarDef {
    +toolPanels?: (string | ToolPanelDef)[]
    +defaultToolPanel?: string
    +hiddenByDefault?: boolean
    +position?: "right" | "left"
}
class SideBarDefParser {
    +{static} DEFAULT_COLUMN_COMP: ToolPanelDef
    +{static} DEFAULT_FILTER_COMP: ToolPanelDef
    +{static} DEFAULT_BY_KEY: { [p: string]: ToolPanelDef; }
    +{static} parse(toParse: string | boolean | string[] | SideBarDef): SideBarDef
    +{static} parseComponents(from?: (string | ToolPanelDef)[]): ToolPanelDef[]
}
enum ModuleNames {
    CommunityCoreModule
    CommunityAllModules
    InfiniteRowModelModule
    ClientSideRowModelModule
    CsvExportModule
    EnterpriseCoreModule
    EnterpriseAllModules
    RowGroupingModule
    ColumnToolPanelModule
    FiltersToolPanelModule
    MenuModule
    SetFilterModule
    MultiFilterModule
    StatusBarModule
    SideBarModule
    RangeSelectionModule
    MasterDetailModule
    RichSelectModule
    GridChartsModule
    ViewportRowModelModule
    ServerSideRowModelModule
    ExcelExportModule
    ClipboardModule
    DateTimeCellEditorModule
    AngularModule
    ReactModule
    VueModule
    PolymerModule
}
interface Module {
    +moduleName: string
    +beans?: any[]
    +agStackComponents?: ComponentMeta[]
    +userComponents?: { componentName: string; componentClass: AgGridRegisteredComponentInput<IComponent<any>>; }[]
    +rowModels?: { [name: string]: new () => IRowModel; }
    +dependantModules?: Module[]
}
class ModuleRegistry {
    -{static} modulesMap: { [name: string]: Module; }
    -{static} moduleBased: boolean
    +{static} register(module: Module, moduleBased?: boolean): void
    +{static} registerModules(modules: Module[], moduleBased?: boolean): void
    +{static} assertRegistered(moduleName: ModuleNames, reason: string): boolean
    +{static} isRegistered(moduleName: ModuleNames): boolean
    +{static} getRegisteredModules(): Module[]
    +{static} isPackageBased(): boolean
}
class PinnedRowModel extends BeanStub {
    -columnApi: ColumnApi
    -gridApi: GridApi
    -pinnedTopRows: RowNode[]
    -pinnedBottomRows: RowNode[]
    +init(): void
    +isEmpty(floating: string): boolean
    +isRowsToRender(floating: string): boolean
    +getRowAtPixel(pixel: number, floating: string): number
    +setPinnedTopRowData(rowData: any[]): void
    +setPinnedBottomRowData(rowData: any[]): void
    -createNodesFromData(allData: any[], isTop: boolean): RowNode[]
    +getPinnedTopRowData(): RowNode[]
    +getPinnedBottomRowData(): RowNode[]
    +getPinnedTopTotalHeight(): number
    +getPinnedTopRowCount(): number
    +getPinnedBottomRowCount(): number
    +getPinnedTopRow(index: number): RowNode
    +getPinnedBottomRow(index: number): RowNode
    +forEachPinnedTopRow(callback: (rowNode: RowNode, index: number) => void): void
    +forEachPinnedBottomRow(callback: (rowNode: RowNode, index: number) => void): void
    +getPinnedBottomTotalHeight(): number
    -getTotalHeight(rowNodes: RowNode[]): number
}
class PaginationProxy extends BeanStub {
    -rowModel: IRowModel
    -columnApi: ColumnApi
    -gridApi: GridApi
    -active: boolean
    -paginateChildRows: boolean
    -pageSize: number
    -totalPages: number
    -currentPage: number
    -topDisplayedRowIndex: number
    -bottomDisplayedRowIndex: number
    -pixelOffset: number
    -topRowBounds: RowBounds
    -bottomRowBounds: RowBounds
    -masterRowCount: number
    -postConstruct(): void
    +ensureRowHeightsValid(startPixel: number, endPixel: number, startLimitIndex: number, endLimitIndex: number): boolean
    -onModelUpdated(modelUpdatedEvent?: ModelUpdatedEvent): void
    -onPaginationPageSizeChanged(): void
    +goToPage(page: number): void
    +getPixelOffset(): number
    +getRow(index: number): RowNode
    +getRowNode(id: string): RowNode
    +getRowIndexAtPixel(pixel: number): number
    +getCurrentPageHeight(): number
    +getCurrentPagePixelRange(): { pageFirstPixel: number; pageLastPixel: number; }
    +isRowPresent(rowNode: RowNode): boolean
    +isEmpty(): boolean
    +isRowsToRender(): boolean
    +getNodesInRangeForSelection(firstInRange: RowNode, lastInRange: RowNode): RowNode[]
    +forEachNode(callback: (rowNode: RowNode, index: number) => void): void
    +getType(): string
    +getRowBounds(index: number): RowBounds
    +getPageFirstRow(): number
    +getPageLastRow(): number
    +getRowCount(): number
    +getPageForIndex(index: number): number
    +goToPageWithIndex(index: any): void
    +isRowInPage(row: RowPosition): boolean
    +isLastPageFound(): boolean
    +getCurrentPage(): number
    +goToNextPage(): void
    +goToPreviousPage(): void
    +goToFirstPage(): void
    +goToLastPage(): void
    +getPageSize(): number
    +getTotalPages(): number
    -setPageSize(): void
    -calculatePages(): void
    -setPixelOffset(value: number): void
    -setZeroRows(): void
    -calculatePagesMasterRowsOnly(): void
    +getMasterRowCount(): number
    -calculatePagesAllRows(): void
    -calculatedPagesNotActive(): void
}
interface RowPosition {
    +rowIndex: number
    +rowPinned?: string
}
class RowPositionUtils extends BeanStub {
    -rowModel: IRowModel
    -pinnedRowModel: PinnedRowModel
    -paginationProxy: PaginationProxy
    +getFirstRow(): RowPosition
    +getLastRow(): RowPosition
    +getRowNode(gridRow: RowPosition): RowNode
    +sameRow(rowA: RowPosition, rowB: RowPosition): boolean
    +before(rowA: RowPosition, rowB: RowPosition): boolean
}
interface CellPosition extends RowPosition {
    +column: Column
}
class CellPositionUtils extends BeanStub {
    +createId(cellPosition: CellPosition): string
    +createIdFromValues(rowIndex: number, column: Column, rowPinned: string): string
    +equals(cellA: CellPosition, cellB: CellPosition): boolean
}
interface ChangeEvent extends AgEvent {
    +selected: boolean
}
class AgCheckbox extends AgAbstractInputField {
    #labelAlignment: LabelAlignment
    -selected?: boolean
    -readOnly: boolean
    -passive: boolean
    #addInputListeners(): void
    +getNextValue(): boolean
    +setPassive(passive: boolean): void
    +isReadOnly(): boolean
    +setReadOnly(readOnly: boolean): void
    +setDisabled(disabled: boolean): this
    +toggle(): void
    +getValue(): boolean
    +setValue(value?: boolean, silent?: boolean): this
    +setName(name: string): this
    #isSelected(): boolean
    -setSelected(selected?: boolean, silent?: boolean): void
    -dispatchChange(selected: boolean, previousValue: boolean, event?: MouseEvent): void
    -onCheckboxClick(e: MouseEvent): void
    -refreshSelectedClass(value?: boolean): void
}
class DragService extends BeanStub {
    -loggerFactory: LoggerFactory
    -columnApi: ColumnApi
    -gridApi: GridApi
    -currentDragParams: DragListenerParams
    -dragging: boolean
    -mouseStartEvent: MouseEvent
    -touchLastTime: Touch
    -touchStart: Touch
    -logger: Logger
    -dragEndFunctions: Function[]
    -dragSources: DragSourceAndListener[]
    -init(): void
    -removeAllListeners(): void
    -removeListener(dragSourceAndListener: DragSourceAndListener): void
    +removeDragSource(params: DragListenerParams): void
    -setNoSelectToBody(noSelect: boolean): void
    +isDragging(): boolean
    +addDragSource(params: DragListenerParams, includeTouch?: boolean): void
    -onTouchStart(params: DragListenerParams, touchEvent: TouchEvent): void
    -onMouseDown(params: DragListenerParams, mouseEvent: MouseEvent): void
    -addTemporaryEvents(events: { target: HTMLElement | Document; type: string; listener: (e: MouseEvent | TouchEvent, el: HTMLElement) => void; options?: any; }[]): void
    -isEventNearStartEvent(currentEvent: MouseEvent | Touch, startEvent: MouseEvent | Touch): boolean
    -getFirstActiveTouch(touchList: TouchList): Touch
    -onCommonMove(currentEvent: MouseEvent | Touch, startEvent: MouseEvent | Touch, el: HTMLElement): void
    -onTouchMove(touchEvent: TouchEvent, el: HTMLElement): void
    -onMouseMove(mouseEvent: MouseEvent, el: HTMLElement): void
    +onTouchUp(touchEvent: TouchEvent, el: HTMLElement): void
    +onMouseUp(mouseEvent: MouseEvent, el: HTMLElement): void
    +onUpCommon(eventOrTouch: MouseEvent | Touch, el: HTMLElement): void
}
interface DragSourceAndListener {
    +dragSource: DragListenerParams
    +mouseDownListener: (mouseEvent: MouseEvent) => void
    +touchEnabled: boolean
    +touchStartListener: (touchEvent: TouchEvent) => void
}
interface DragListenerParams {
    +dragStartPixels?: number
    +eElement: HTMLElement
    +skipMouseEvent?: (mouseEvent: MouseEvent) => boolean
    +onDragStart: (mouseEvent: MouseEvent | Touch) => void
    +onDragStop: (mouseEvent: MouseEvent | Touch) => void
    +onDragging: (mouseEvent: MouseEvent | Touch) => void
}
interface HardCodedSize
class Environment extends BeanStub {
    -eGridDiv: HTMLElement
    +getSassVariable(theme: string, key: SASS_PROPERTIES): number
    +isThemeDark(): boolean
    +chartMenuPanelWidth(): number
    +getTheme(): { theme?: string; el?: HTMLElement; themeFamily?: string; }
}
interface IRangeController {
    +isEmpty(): boolean
    +removeAllCellRanges(): void
    +getCellRangeCount(cell: CellPosition): number
    +isCellInAnyRange(cell: CellPosition): boolean
    +isCellInSpecificRange(cell: CellPosition, range: CellRange): boolean
    +isBottomRightCell(cellRange: CellRange, cell: CellPosition): boolean
    +isContiguousRange(cellRange: CellRange): boolean
    +isMoreThanOneCell(): boolean
    +onDragStart(mouseEvent: MouseEvent): void
    +onDragStop(): void
    +onDragging(mouseEvent: MouseEvent): void
    +getCellRanges(): CellRange[]
    +setRangeToCell(cell: CellPosition, appendRange?: boolean): void
    +setCellRange(params: CellRangeParams): void
    +addCellRange(params: CellRangeParams): void
    +extendLatestRangeInDirection(key: number): CellPosition
    +extendLatestRangeToCell(cell: CellPosition): void
    +updateRangeEnd(cellRange: CellRange, cellPosition: CellPosition, silent?: boolean): void
    +registerGridComp(gridPanel: GridPanel): void
    +getRangeStartRow(cellRange: CellRange): RowPosition
    +getRangeEndRow(cellRange: CellRange): RowPosition
    +createCellRangeFromCellRangeParams(params: CellRangeParams): CellRange
    +setCellRanges(cellRanges: CellRange[]): void
}
interface ISelectionHandle {
    +getGui(): HTMLElement
    +getType(): SelectionHandleType
    +refresh(cellComp: CellComp): void
}
interface ISelectionHandleFactory {
    +createSelectionHandle(type: SelectionHandleType): ISelectionHandle
}
enum SelectionHandleType {
    FILL
    RANGE
}
enum CellRangeType {
    VALUE
    DIMENSION
}
interface CellRange {
    +id?: string
    +type?: CellRangeType
    +startRow?: RowPosition
    +endRow?: RowPosition
    +columns: Column[]
    +startColumn: Column
}
interface CellRangeParams {
    +rowStartIndex: number
    +rowStartPinned?: string
    +rowEndIndex: number
    +rowEndPinned?: string
    +columnStart?: string | Column
    +columnEnd?: string | Column
    +columns?: (string | Column)[]
}
interface RangeSelection {
    +start: CellPosition
    +end: CellPosition
    +columns: Column[]
}
interface AddRangeSelectionParams {
    +rowStart: number
    +floatingStart: string
    +rowEnd: number
    +floatingEnd: string
    +columnStart: string | Column
    +columnEnd: string | Column
}
class Events {
    +{static} EVENT_COLUMN_EVERYTHING_CHANGED: string
    +{static} EVENT_NEW_COLUMNS_LOADED: string
    +{static} EVENT_COLUMN_PIVOT_MODE_CHANGED: string
    +{static} EVENT_COLUMN_ROW_GROUP_CHANGED: string
    +{static} EVENT_EXPAND_COLLAPSE_ALL: string
    +{static} EVENT_COLUMN_PIVOT_CHANGED: string
    +{static} EVENT_GRID_COLUMNS_CHANGED: string
    +{static} EVENT_COLUMN_VALUE_CHANGED: string
    +{static} EVENT_COLUMN_MOVED: string
    +{static} EVENT_COLUMN_VISIBLE: string
    +{static} EVENT_COLUMN_PINNED: string
    +{static} EVENT_COLUMN_GROUP_OPENED: string
    +{static} EVENT_COLUMN_RESIZED: string
    +{static} EVENT_DISPLAYED_COLUMNS_CHANGED: string
    +{static} EVENT_VIRTUAL_COLUMNS_CHANGED: string
    +{static} EVENT_ASYNC_TRANSACTIONS_FLUSHED: string
    +{static} EVENT_ROW_GROUP_OPENED: string
    +{static} EVENT_ROW_DATA_CHANGED: string
    +{static} EVENT_ROW_DATA_UPDATED: string
    +{static} EVENT_PINNED_ROW_DATA_CHANGED: string
    +{static} EVENT_RANGE_SELECTION_CHANGED: string
    +{static} EVENT_CHART_CREATED: string
    +{static} EVENT_CHART_RANGE_SELECTION_CHANGED: string
    +{static} EVENT_CHART_OPTIONS_CHANGED: string
    +{static} EVENT_CHART_DESTROYED: string
    +{static} EVENT_TOOL_PANEL_VISIBLE_CHANGED: string
    +{static} EVENT_MODEL_UPDATED: string
    +{static} EVENT_PASTE_START: string
    +{static} EVENT_PASTE_END: string
    +{static} EVENT_FILL_START: string
    +{static} EVENT_FILL_END: string
    +{static} EVENT_CELL_CLICKED: string
    +{static} EVENT_CELL_DOUBLE_CLICKED: string
    +{static} EVENT_CELL_MOUSE_DOWN: string
    +{static} EVENT_CELL_CONTEXT_MENU: string
    +{static} EVENT_CELL_VALUE_CHANGED: string
    +{static} EVENT_ROW_VALUE_CHANGED: string
    +{static} EVENT_CELL_FOCUSED: string
    +{static} EVENT_ROW_SELECTED: string
    +{static} EVENT_SELECTION_CHANGED: string
    +{static} EVENT_CELL_KEY_DOWN: string
    +{static} EVENT_CELL_KEY_PRESS: string
    +{static} EVENT_CELL_MOUSE_OVER: string
    +{static} EVENT_CELL_MOUSE_OUT: string
    +{static} EVENT_FILTER_CHANGED: string
    +{static} EVENT_FILTER_MODIFIED: string
    +{static} EVENT_FILTER_OPENED: string
    +{static} EVENT_SORT_CHANGED: string
    +{static} EVENT_VIRTUAL_ROW_REMOVED: string
    +{static} EVENT_ROW_CLICKED: string
    +{static} EVENT_ROW_DOUBLE_CLICKED: string
    +{static} EVENT_GRID_READY: string
    +{static} EVENT_GRID_SIZE_CHANGED: string
    +{static} EVENT_VIEWPORT_CHANGED: string
    +{static} EVENT_SCROLLBAR_WIDTH_CHANGED: string
    +{static} EVENT_FIRST_DATA_RENDERED: string
    +{static} EVENT_DRAG_STARTED: string
    +{static} EVENT_DRAG_STOPPED: string
    +{static} EVENT_CHECKBOX_CHANGED: string
    +{static} EVENT_ROW_EDITING_STARTED: string
    +{static} EVENT_ROW_EDITING_STOPPED: string
    +{static} EVENT_CELL_EDITING_STARTED: string
    +{static} EVENT_CELL_EDITING_STOPPED: string
    +{static} EVENT_BODY_SCROLL: string
    +{static} EVENT_ANIMATION_QUEUE_EMPTY: string
    +{static} EVENT_HEIGHT_SCALE_CHANGED: string
    +{static} EVENT_PAGINATION_CHANGED: string
    +{static} EVENT_COMPONENT_STATE_CHANGED: string
    +{static} EVENT_BODY_HEIGHT_CHANGED: string
    +{static} EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED: string
    +{static} EVENT_SCROLL_VISIBILITY_CHANGED: string
    +{static} EVENT_COLUMN_HOVER_CHANGED: string
    +{static} EVENT_FLASH_CELLS: string
    +{static} EVENT_PAGINATION_PIXEL_OFFSET_CHANGED: string
    +{static} EVENT_ROW_DRAG_ENTER: string
    +{static} EVENT_ROW_DRAG_MOVE: string
    +{static} EVENT_ROW_DRAG_LEAVE: string
    +{static} EVENT_ROW_DRAG_END: string
    +{static} EVENT_POPUP_TO_FRONT: string
    +{static} EVENT_COLUMN_ROW_GROUP_CHANGE_REQUEST: string
    +{static} EVENT_COLUMN_PIVOT_CHANGE_REQUEST: string
    +{static} EVENT_COLUMN_VALUE_CHANGE_REQUEST: string
    +{static} EVENT_COLUMN_AGG_FUNC_CHANGE_REQUEST: string
    +{static} EVENT_KEYBOARD_FOCUS: string
    +{static} EVENT_MOUSE_FOCUS: string
    +{static} EVENT_STORE_UPDATED: string
}
interface RowNodeTransaction {
    +add: RowNode[]
    +remove: RowNode[]
    +update: RowNode[]
}
interface RowDataTransaction {
    +addIndex?: number
    +add?: any[]
    +remove?: any[]
    +update?: any[]
}
interface PathItem {
    +rowNode: RowNode
    +children: PathItem[]
}
class ChangedPath {
    -keepingColumns: boolean
    -pathRoot: PathItem
    -active: boolean
    -nodeIdsToColumns: { [nodeId: string]: { [colId: string]: boolean; }; }
    -mapToItems: { [id: string]: PathItem; }
    +setInactive(): void
    +isActive(): boolean
    -depthFirstSearchChangedPath(pathItem: PathItem, callback: (rowNode: RowNode) => void): void
    -depthFirstSearchEverything(rowNode: RowNode, callback: (rowNode: RowNode) => void, traverseEverything: boolean): void
    +forEachChangedNodeDepthFirst(callback: (rowNode: RowNode) => void, traverseLeafNodes?: boolean): void
    +executeFromRootNode(callback: (rowNode: RowNode) => void): void
    -createPathItems(rowNode: RowNode): number
    -populateColumnsMap(rowNode: RowNode, columns: Column[]): void
    -linkPathItems(rowNode: RowNode, newEntryCount: number): void
    +addParentNode(rowNode: RowNode, columns?: Column[]): void
    +canSkip(rowNode: RowNode): boolean
    +getValueColumnsForNode(rowNode: RowNode, valueColumns: Column[]): Column[]
    +getNotValueColumnsForNode(rowNode: RowNode, valueColumns: Column[]): Column[]
}
enum ClientSideRowModelSteps {
    EVERYTHING
    FILTER
    SORT
    MAP
    AGGREGATE
    PIVOT
    NOTHING
}
interface IClientSideRowModel extends IRowModel {
    +updateRowData(rowDataTran: RowDataTransaction, rowNodeOrder?: { [id: string]: number; }): RowNodeTransaction
    +setRowData(rowData: any[]): void
    +refreshModel(params: RefreshModelParams): void
    +expandOrCollapseAll(expand: boolean): void
    +forEachLeafNode(callback: (node: RowNode, index: number) => void): void
    +forEachNode(callback: (node: RowNode, index: number) => void): void
    +forEachNodeAfterFilter(callback: (node: RowNode, index: number) => void): void
    +forEachNodeAfterFilterAndSort(callback: (node: RowNode, index: number) => void): void
    +resetRowHeights(): void
    +onRowHeightChanged(): void
    +batchUpdateRowData(rowDataTransaction: RowDataTransaction, callback?: (res: RowNodeTransaction) => void): void
    +flushAsyncTransactions(): void
    +getRootNode(): RowNode
    +doAggregate(changedPath?: ChangedPath): void
    +getTopLevelNodes(): RowNode[]
    +forEachPivotNode(callback: (node: RowNode, index: number) => void): void
    +ensureRowsAtPixel(rowNode: RowNode[], pixel: number, increment: number): boolean
    +highlightRowAtPixel(rowNode: RowNode, pixel?: number): void
    +getHighlightPosition(pixel: number, rowNode?: RowNode): "above" | "below"
    +getLastHighlightedRowNode(): RowNode
}
interface RefreshModelParams {
    +step: ClientSideRowModelSteps
    +groupState?: any
    +keepRenderedRows?: boolean
    +animate?: boolean
    +keepEditingRows?: boolean
    +rowNodeTransactions?: RowNodeTransaction[]
    +rowNodeOrder?: { [id: string]: number; }
    +newData?: boolean
    +afterColumnsChanged?: boolean
}
class SelectionController extends BeanStub {
    -rowModel: IRowModel
    -columnApi: ColumnApi
    -gridApi: GridApi
    -selectedNodes: { [key: string]: RowNode; }
    -logger: Logger
    -lastSelectedNode: RowNode
    -groupSelectsChildren: boolean
    -setBeans(loggerFactory: LoggerFactory): void
    -init(): void
    +setLastSelectedNode(rowNode: RowNode): void
    +getLastSelectedNode(): RowNode
    +getSelectedNodes(): RowNode[]
    +getSelectedRows(): any[]
    +removeGroupsFromSelection(): void
    +updateGroupsFromChildrenSelections(changedPath?: ChangedPath): void
    +getNodeForIdIfSelected(id: number): RowNode
    +clearOtherNodes(rowNodeToKeepSelected: RowNode): number
    -onRowSelected(event: any): void
    +syncInRowNode(rowNode: RowNode, oldNode: RowNode): void
    -syncInOldRowNode(rowNode: RowNode, oldNode: RowNode): void
    -syncInNewRowNode(rowNode: RowNode): void
    +reset(): void
    +getBestCostNodeSelection(): any
    +setRowModel(rowModel: any): void
    +isEmpty(): boolean
    +deselectAllRowNodes(justFiltered?: boolean): void
    +selectAllRowNodes(justFiltered?: boolean): void
    +selectNode(rowNode: RowNode, tryMulti: boolean): void
    +deselectIndex(rowIndex: number): void
    +deselectNode(rowNode: RowNode): void
    +selectIndex(index: any, tryMulti: boolean): void
}
class MouseEventService extends BeanStub {
    -eGridDiv: HTMLElement
    -gridPanel: GridPanel
    -gridInstanceId: number
    -init(): void
    +registerGridComp(gridPanel: GridPanel): void
    -stampDomElementWithGridInstance(): void
    +getRenderedCellForEvent(event: Event): CellComp
    +isEventFromThisGrid(event: KeyboardEvent | MouseEvent): boolean
    +getCellPositionForEvent(event: KeyboardEvent | MouseEvent): CellPosition
    +getNormalisedPosition(event: MouseEvent | DraggingEvent): { x: number; y: number; }
    -{static} gridInstanceSequence: NumberSequence
    -{static} GRID_DOM_KEY: string
}
interface SortOption {
    +sort: string
    +column: Column
}
interface SortedRowNode {
    +currentPos: number
    +rowNode: RowNode
}
class RowNodeSorter {
    -gridOptionsWrapper: GridOptionsWrapper
    -valueService: ValueService
    +doFullSort(rowNodes: RowNode[], sortOptions: SortOption[]): RowNode[]
    +compareRowNodes(sortOptions: SortOption[], sortedNodeA: SortedRowNode, sortedNodeB: SortedRowNode): number
    -getValue(nodeA: RowNode, column: Column): string
}
interface SortModelItem {
    +colId: string
    +sort: string
}
class SortController extends BeanStub {
    -columnController: ColumnController
    -columnApi: ColumnApi
    -gridApi: GridApi
    +progressSort(column: Column, multiSort: boolean, source?: ColumnEventType): void
    +setSortForColumn(column: Column, sort: string, multiSort: boolean, source?: ColumnEventType): void
    -updateSortIndex(lastColToChange: Column): void
    +onSortChanged(): void
    +isSortActive(): boolean
    +dispatchSortChangedEvents(): void
    -clearSortBarThisColumn(columnToSkip: Column, source: ColumnEventType): void
    -getNextSortDirection(column: Column): string
    +getColumnsWithSortingOrdered(): Column[]
    +getSortModel(): any[]
    +getSortOptions(): SortOption[]
    -{static} DEFAULT_SORTING_ORDER: string[]
}
interface RowDropZoneEvents {
    +onDragEnter?: (params: RowDragEnterEvent) => void
    +onDragLeave?: (params: RowDragLeaveEvent) => void
    +onDragging?: (params: RowDragMoveEvent) => void
    +onDragStop?: (params: RowDragEndEvent) => void
}
interface RowDropZoneParams extends RowDropZoneEvents {
    +getContainer: () => HTMLElement
}
class RowDragFeature extends BeanStub implements DropTarget {
    -dragAndDropService: DragAndDropService
    -rowModel: IRowModel
    -paginationProxy: PaginationProxy
    -columnController: ColumnController
    -focusController: FocusController
    -sortController: SortController
    -filterManager: FilterManager
    -selectionController: SelectionController
    -rangeController: IRangeController
    -mouseEventService: MouseEventService
    -gridPanel: GridPanel
    -clientSideRowModel: IClientSideRowModel
    -eContainer: HTMLElement
    -needToMoveUp: boolean
    -needToMoveDown: boolean
    -movingIntervalId: number
    -intervalCount: number
    -lastDraggingEvent: DraggingEvent
    -isMultiRowDrag: boolean
    -isGridSorted: boolean
    -isGridFiltered: boolean
    -isRowGroupActive: boolean
    -postConstruct(): void
    -onSortChanged(): void
    -onFilterChanged(): void
    -onRowGroupChanged(): void
    +getContainer(): HTMLElement
    +isInterestedIn(type: DragSourceType): boolean
    +getIconName(): string
    +shouldPreventRowMove(): boolean
    -getRowNodes(draggingEvent: DraggingEvent): RowNode[]
    +onDragEnter(draggingEvent: DraggingEvent): void
    +onDragging(draggingEvent: DraggingEvent): void
    -isFromThisGrid(draggingEvent: DraggingEvent): boolean
    -isDropZoneWithinThisGrid(draggingEvent: DraggingEvent): boolean
    -onEnterOrDragging(draggingEvent: DraggingEvent): void
    -doManagedDrag(draggingEvent: DraggingEvent, pixel: number): void
    -getRowIndexNumber(rowNode: RowNode): number
    -moveRowAndClearHighlight(draggingEvent: DraggingEvent): void
    -clearRowHighlight(): void
    -moveRows(rowNodes: RowNode[], pixel: number, increment?: number): void
    -checkCenterForScrolling(pixel: number): void
    -ensureIntervalStarted(): void
    -ensureIntervalCleared(): void
    -moveInterval(): void
    +addRowDropZone(params: RowDropZoneParams): void
    +getRowDropZone(events: RowDropZoneEvents): RowDropZoneParams
    -draggingToRowDragEvent(type: string, draggingEvent: DraggingEvent): RowDragEvent
    -dispatchGridEvent(type: string, draggingEvent: DraggingEvent): void
    +onDragLeave(draggingEvent: DraggingEvent): void
    +onDragStop(draggingEvent: DraggingEvent): void
    -stopDragging(draggingEvent: DraggingEvent): void
}
interface DragItem {
    +rowNode?: RowNode
    +rowNodes?: RowNode[]
    +columns?: Column[]
    +visibleState?: { [key: string]: boolean; }
}
enum DragSourceType {
    ToolPanel
    HeaderCell
    RowDrag
    ChartPanel
}
interface DragSource {
    +type: DragSourceType
    +eElement: HTMLElement
    +getDragItem: () => DragItem
    +dragItemName: string | (() => string)
    +defaultIconName?: string
    +dragSourceDropTarget?: DropTarget
    +dragSourceDomDataKey?: string
    +dragStartPixels?: number
    +onDragStarted?: () => void
    +onDragStopped?: () => void
}
interface DropTarget {
    +getContainer(): HTMLElement
    +getSecondaryContainers(): HTMLElement[]
    +getIconName(): string
    +isInterestedIn(type: DragSourceType): boolean
    +onDragEnter(params: DraggingEvent): void
    +onDragLeave(params: DraggingEvent): void
    +onDragging(params: DraggingEvent): void
    +onDragStop(params: DraggingEvent): void
    +external?: boolean
}
enum VerticalDirection {
    Up
    Down
}
enum HorizontalDirection {
    Left
    Right
}
interface DraggingEvent {
    +event: MouseEvent
    +x: number
    +y: number
    +vDirection: VerticalDirection
    +hDirection: HorizontalDirection
    +dragSource: DragSource
    +dragItem: DragItem
    +fromNudge: boolean
    +api: GridApi
    +columnApi: ColumnApi
    +dropZoneTarget: HTMLElement
}
class DragAndDropService extends BeanStub {
    -dragService: DragService
    -environment: Environment
    -columnApi: ColumnApi
    -gridApi: GridApi
    -dragSourceAndParamsList: { params: DragListenerParams; dragSource: DragSource; }[]
    -dragItem: DragItem
    -eventLastTime: MouseEvent
    -dragSource: DragSource
    -dragging: boolean
    -eGhost: HTMLElement
    -eGhostParent: HTMLElement
    -eGhostIcon: HTMLElement
    -dropTargets: DropTarget[]
    -lastDropTarget: DropTarget
    -ePinnedIcon: HTMLElement
    -eHideIcon: HTMLElement
    -eMoveIcon: HTMLElement
    -eLeftIcon: HTMLElement
    -eRightIcon: HTMLElement
    -eGroupIcon: HTMLElement
    -eAggregateIcon: HTMLElement
    -ePivotIcon: HTMLElement
    -eDropNotAllowedIcon: HTMLElement
    -init(): void
    +addDragSource(dragSource: DragSource, allowTouch?: boolean): void
    +removeDragSource(dragSource: DragSource): void
    -clearDragSourceParamsList(): void
    +nudge(): void
    -onDragStart(dragSource: DragSource, mouseEvent: MouseEvent): void
    -onDragStop(mouseEvent: MouseEvent): void
    -onDragging(mouseEvent: MouseEvent, fromNudge: boolean): void
    -enterDragTargetIfExists(dropTarget: DropTarget, mouseEvent: MouseEvent, hDirection: HorizontalDirection, vDirection: VerticalDirection, fromNudge: boolean): void
    -leaveLastTargetIfExists(mouseEvent: MouseEvent, hDirection: HorizontalDirection, vDirection: VerticalDirection, fromNudge: boolean): void
    -getAllContainersFromDropTarget(dropTarget: DropTarget): HTMLElement[]
    -isMouseOnDropTarget(mouseEvent: MouseEvent, dropTarget: DropTarget): boolean
    +addDropTarget(dropTarget: DropTarget): void
    +removeDropTarget(dropTarget: DropTarget): void
    +hasExternalDropZones(): boolean
    +findExternalZone(params: RowDropZoneParams): DropTarget
    +getHorizontalDirection(event: MouseEvent): HorizontalDirection
    +getVerticalDirection(event: MouseEvent): VerticalDirection
    +createDropTargetEvent(dropTarget: DropTarget, event: MouseEvent, hDirection: HorizontalDirection, vDirection: VerticalDirection, fromNudge: boolean): DraggingEvent
    -positionGhost(event: MouseEvent): void
    -removeGhost(): void
    -createGhost(): void
    +setGhostIcon(iconName: string, shake?: boolean): void
    +{static} ICON_PINNED: string
    +{static} ICON_MOVE: string
    +{static} ICON_LEFT: string
    +{static} ICON_RIGHT: string
    +{static} ICON_GROUP: string
    +{static} ICON_AGGREGATE: string
    +{static} ICON_PIVOT: string
    +{static} ICON_NOT_ALLOWED: string
    +{static} ICON_HIDE: string
    +{static} GHOST_TEMPLATE: string
}
class ColumnHoverService extends BeanStub {
    -columnApi: ColumnApi
    -gridApi: GridApi
    -selectedColumns: Column[]
    +setMouseOver(columns: Column[]): void
    +clearMouseOver(): void
    +isHovered(column: Column): boolean
}
class CssClassApplier {
    +{static} addHeaderClassesFromColDef(abstractColDef: AbstractColDef, eHeaderCell: HTMLElement, gridOptionsWrapper: GridOptionsWrapper, column: Column, columnGroup: ColumnGroup): void
    +{static} addToolPanelClassesFromColDef(abstractColDef: AbstractColDef, eHeaderCell: HTMLElement, gridOptionsWrapper: GridOptionsWrapper, column: Column, columnGroup: OriginalColumnGroup): void
    +{static} addColumnClassesFromCollDef(classesOrFunc: string | string[] | ((params: any) => string | string[]), abstractColDef: AbstractColDef, eHeaderCell: HTMLElement, gridOptionsWrapper: GridOptionsWrapper, column: Column, columnGroup: OriginalColumnGroup | ColumnGroup): void
}
interface IMenuFactory {
    +showMenuAfterButtonClick(column: Column, eventSource: HTMLElement, defaultTab?: string, restrictToTabs?: string[]): void
    +showMenuAfterMouseEvent(column: Column, mouseEvent: MouseEvent | Touch, defaultTab?: string, restrictToTabs?: string[]): void
    +isMenuEnabled(column: Column): boolean
    +hideActiveMenu(): void
    +registerGridComp(gridPanel: GridPanel): void
}
interface TapEvent extends AgEvent {
    +touchStart: Touch
}
interface LongTapEvent extends AgEvent {
    +touchStart: Touch
    +touchEvent: TouchEvent
}
class TouchListener implements IEventEmitter {
    -eElement: HTMLElement
    -destroyFuncs: Function[]
    -moved: boolean
    -touching: boolean
    -touchStart: Touch
    -lastTapTime: number
    -eventService: EventService
    -preventMouseClick: boolean
    -getActiveTouch(touchList: TouchList): Touch
    +addEventListener(eventType: string, listener: Function): void
    +removeEventListener(eventType: string, listener: Function): void
    -onTouchStart(touchEvent: TouchEvent): void
    -onTouchMove(touchEvent: TouchEvent): void
    -onTouchEnd(touchEvent: TouchEvent): void
    -checkForDoubleTap(): void
    +destroy(): void
    +{static} EVENT_TAP: string
    +{static} EVENT_DOUBLE_TAP: string
    +{static} EVENT_LONG_TAP: string
    -{static} DOUBLE_TAP_MILLIS: number
}
interface IHeaderParams {
    +column: Column
    +displayName: string
    +enableSorting: boolean
    +enableMenu: boolean
    +showColumnMenu: (source: HTMLElement) => void
    +progressSort: (multiSort?: boolean) => void
    +setSort: (sort: string, multiSort?: boolean) => void
    +columnApi: ColumnApi
    +eGridHeader: HTMLElement
    +api: GridApi
    +context: any
    +template: string
}
interface IHeader {
    +refresh(params: IHeaderParams): boolean
}
interface IHeaderComp extends IHeader
class HeaderComp extends Component implements IHeaderComp {
    -sortController: SortController
    -menuFactory: IMenuFactory
    -eFilter: HTMLElement
    -eSortAsc: HTMLElement
    -eSortDesc: HTMLElement
    -eSortNone: HTMLElement
    -eSortOrder: HTMLElement
    -eMenu: HTMLElement
    -eLabel: HTMLElement
    -eText: HTMLElement
    -params: IHeaderParams
    -lastMovingChanged: number
    -currentDisplayName: string
    -currentTemplate: string
    -currentShowMenu: boolean
    -currentSort: boolean
    +destroy(): void
    +refresh(params: IHeaderParams): boolean
    -workOutTemplate(): string
    +init(params: IHeaderParams): void
    -setDisplayName(params: IHeaderParams): void
    -setupIcons(column: Column): void
    -addInIcon(iconName: string, eParent: HTMLElement, column: Column): void
    -setupTap(): void
    -workOutShowMenu(): boolean
    -setMenu(): void
    +showMenu(eventSource?: HTMLElement): void
    -removeSortIcons(): void
    -workOutSort(): boolean
    +setupSort(): void
    -onSortChanged(): void
    -setMultiSortOrder(): void
    -setupFilterIcon(): void
    -onFilterChanged(): void
    -{static} TEMPLATE: string
}
interface HorizontalResizeParams {
    +eResizeBar: HTMLElement
    +dragStartPixels?: number
    +onResizeStart: (shiftKey: boolean) => void
    +onResizing: (delta: number) => void
    +onResizeEnd: (delta: number) => void
}
class HorizontalResizeService extends BeanStub {
    -dragService: DragService
    -eGridDiv: HTMLElement
    -dragStartX: number
    -resizeAmount: number
    -oldBodyCursor: string
    -oldUserSelect: string
    -oldWebkitUserSelect: string
    +addResizeBar(params: HorizontalResizeParams): () => void
    -onDragStart(params: HorizontalResizeParams, mouseEvent: MouseEvent | Touch): void
    -setResizeIcons(): void
    -onDragStop(params: HorizontalResizeParams, mouseEvent: MouseEvent | Touch): void
    -resetIcons(): void
    -onDragging(params: HorizontalResizeParams, mouseEvent: MouseEvent | Touch): void
}
class HoverFeature extends BeanStub {
    -columnHoverService: ColumnHoverService
    -columns: Column[]
    -element: HTMLElement
    -postConstruct(): void
    -addMouseHoverListeners(): void
    -onMouseOut(): void
    -onMouseOver(): void
}
class SetLeftFeature extends BeanStub {
    -columnOrGroup: ColumnGroupChild
    -eCell: HTMLElement
    -ariaEl: HTMLElement
    -actualLeft: number
    -colsSpanning: Column[]
    -beans: Beans
    -printLayout: boolean
    +setColsSpanning(colsSpanning: Column[]): void
    +getColumnOrGroup(): ColumnGroupChild
    -postConstruct(): void
    -setLeftFirstTime(): void
    -animateInLeft(): void
    -onLeftChanged(): void
    -modifyLeftForPrintLayout(colOrGroup: ColumnGroupChild, leftPosition: number): number
    -setLeft(value: number): void
}
class SelectAllFeature extends BeanStub {
    -gridApi: GridApi
    -columnApi: ColumnApi
    -rowModel: IRowModel
    -selectionController: SelectionController
    -cbSelectAllVisible: boolean
    -processingEventFromCheckbox: boolean
    -column: Column
    -filteredOnly: boolean
    -cbSelectAll: AgCheckbox
    -postConstruct(): void
    -showOrHideSelectAll(): void
    -refreshHeaderAriaDescribedBy(isSelectAllVisible: boolean): void
    -onModelChanged(): void
    -onSelectionChanged(): void
    -getNextCheckboxState(selectionCount: SelectionCount): boolean
    -updateStateOfCheckbox(): void
    -refreshSelectAllLabel(): void
    -getSelectionCount(): SelectionCount
    -checkRightRowModelType(): void
    -onCbSelectAll(): void
    -isCheckboxSelection(): boolean
}
interface SelectionCount {
    +selected: number
    +notSelected: number
}
abstract class AbstractHeaderWrapper extends ManagedFocusComponent {
    #{abstract} column: Column | ColumnGroup
    #{abstract} pinned: string
    #{abstract} onFocusIn(e: FocusEvent): void
    #shouldStopEventPropagation(e: KeyboardEvent): boolean
    +getColumn(): Column | ColumnGroup
    +getPinned(): string
}
interface ITooltipParams {
    +location: string
    +api?: any
    +columnApi?: any
    +context?: any
    +colDef?: any
    +column?: any
    +value?: any
    +valueFormatted?: any
    +rowIndex?: number
    +node?: any
    +data?: any
}
interface ITooltipComp extends IComponent
class TooltipComponent extends PopupComponent implements ITooltipComp {
    +init(params: ITooltipParams): void
}
class HeaderWrapperComp extends AbstractHeaderWrapper {
    -dragAndDropService: DragAndDropService
    -columnController: ColumnController
    -horizontalResizeService: HorizontalResizeService
    -menuFactory: IMenuFactory
    -gridApi: GridApi
    -columnApi: ColumnApi
    -sortController: SortController
    -userComponentFactory: UserComponentFactory
    -columnHoverService: ColumnHoverService
    #beans: Beans
    -eResize: HTMLElement
    -cbSelectAll: AgCheckbox
    #column: Column
    #pinned: string
    -headerComp: IHeaderComp
    -headerCompGui: HTMLElement
    -headerCompVersion: number
    -resizeStartWidth: number
    -resizeWithShiftKey: boolean
    -sortable: boolean
    -menuEnabled: boolean
    -colDefVersion: number
    -refreshFunctions: (() => void)[]
    -moveDragSource: DragSource
    -displayName: string
    -draggable: boolean
    -colDefHeaderComponent?: string | (new () => any)
    -colDefHeaderComponentFramework?: any
    #postConstruct(): void
    -onColumnRowGroupChanged(): void
    -onColumnPivotChanged(): void
    -onColumnValueChanged(): void
    -checkDisplayName(): void
    -updateState(): void
    -calculateDisplayName(): string
    -onNewColumnsLoaded(): void
    -refresh(): void
    -destroyHeaderComp(): void
    -removeMoveDragSource(): void
    +attemptHeaderCompRefresh(): boolean
    -addActiveHeaderMouseListeners(): void
    -setActiveHeader(active: boolean): void
    #onFocusIn(e: FocusEvent): void
    #onFocusOut(e: FocusEvent): void
    #handleKeyDown(e: KeyboardEvent): void
    #onTabKeyDown(): void
    +getComponentHolder(): ColDef
    -addColumnHoverListener(): void
    -onColumnHover(): void
    -setupSortableClass(): void
    -onFilterChanged(): void
    -appendHeaderComp(): void
    -createParams(): IHeaderParams
    -afterHeaderCompCreated(version: number, headerComp: IHeaderComp): void
    -onColumnMovingChanged(): void
    -workOutDraggable(): boolean
    -attachDraggingToHeaderComp(): void
    -createDragItem(): DragItem
    -setupResize(): void
    +onResizing(finished: boolean, resizeAmount: number): void
    +onResizeStart(shiftKey: boolean): void
    +getTooltipParams(): ITooltipParams
    -setupTooltip(): void
    -setupMovingCss(): void
    -addAttributes(): void
    -setupWidth(): void
    -setupMenuClass(): void
    -onMenuVisible(): void
    -onColumnWidthChanged(): void
    -normaliseResizeAmount(dragChange: number): number
    -{static} TEMPLATE: string
}
interface IHeaderGroupParams {
    +columnGroup: ColumnGroup
    +displayName: string
    +setExpanded: (expanded: boolean) => void
    +api: GridApi
    +columnApi: ColumnApi
    +context: any
}
interface IHeaderGroup
interface IHeaderGroupComp extends IHeaderGroup
class HeaderGroupComp extends Component implements IHeaderGroupComp {
    -columnController: ColumnController
    -params: IHeaderGroupParams
    -eOpenIcon: HTMLElement
    -eCloseIcon: HTMLElement
    +destroy(): void
    +init(params: IHeaderGroupParams): void
    -setupExpandIcons(): void
    -addTouchAndClickListeners(eElement: HTMLElement, action: (event: MouseEvent) => void): void
    -updateIconVisibility(): void
    -addInIcon(iconName: string, refName: string): void
    -addGroupExpandIcon(): void
    -setupLabel(): void
    +{static} TEMPLATE: string
}
class HeaderGroupWrapperComp extends AbstractHeaderWrapper {
    -columnController: ColumnController
    -horizontalResizeService: HorizontalResizeService
    -dragAndDropService: DragAndDropService
    -userComponentFactory: UserComponentFactory
    #beans: Beans
    -gridApi: GridApi
    -columnApi: ColumnApi
    #column: ColumnGroup
    #pinned: string
    -eHeaderCellResize: HTMLElement
    -resizeCols: Column[]
    -resizeStartWidth: number
    -resizeRatios: number[]
    -resizeTakeFromCols: Column[]
    -resizeTakeFromStartWidth: number
    -resizeTakeFromRatios: number[]
    -expandable: boolean
    -removeChildListenersFuncs: Function[]
    #postConstruct(): void
    #onFocusIn(e: FocusEvent): void
    #handleKeyDown(e: KeyboardEvent): void
    #onTabKeyDown(): void
    -setupExpandable(): void
    -refreshExpanded(): void
    -setupMovingCss(): void
    +getComponentHolder(): ColGroupDef
    +getTooltipParams(): ITooltipParams
    -setupTooltip(): void
    -onColumnMovingChanged(): void
    -addAttributes(): void
    -appendHeaderGroupComp(displayName: string): void
    -afterHeaderCompCreated(displayName: string, headerGroupComp: IHeaderGroupComp): void
    -addClasses(): void
    -setupMove(eHeaderGroup: HTMLElement, displayName: string): void
    +getDragItemForGroup(): DragItem
    -isSuppressMoving(): boolean
    -setupWidth(): void
    -onDisplayedChildrenChanged(): void
    -addListenersToChildrenColumns(): void
    -removeListenersOnChildrenColumns(): void
    -onWidthChanged(): void
    -setupResize(): void
    +onResizeStart(shiftKey: boolean): void
    +onResizing(finished: boolean, resizeAmount: any): void
    -normaliseDragChange(dragChange: number): number
    -{static} TEMPLATE: string
}
class ReadOnlyFloatingFilter extends Component implements IFloatingFilterComp {
    -eFloatingFilterText: AgInputTextField
    -columnController: ColumnController
    -params: IFloatingFilterParams
    +destroy(): void
    +init(params: IFloatingFilterParams): void
    +onParentModelChanged(parentModel: any): void
}
class FloatingFilterMapper {
    -{static} filterToFloatingFilterMapping: { [p: string]: string; }
    +{static} getFloatingFilterType(filterType: string): string
}
class FloatingFilterWrapper extends AbstractHeaderWrapper {
    -columnHoverService: ColumnHoverService
    -userComponentFactory: UserComponentFactory
    -gridApi: GridApi
    -columnApi: ColumnApi
    -filterManager: FilterManager
    -menuFactory: IMenuFactory
    #beans: Beans
    -eFloatingFilterBody: HTMLElement
    -eButtonWrapper: HTMLElement
    -eButtonShowMainFilter: HTMLElement
    #column: Column
    #pinned: string
    -suppressFilterButton: boolean
    -floatingFilterCompPromise: AgPromise<IFloatingFilterComp>
    #postConstruct(): void
    #onTabKeyDown(e: KeyboardEvent): void
    #handleKeyDown(e: KeyboardEvent): void
    #onFocusIn(e: FocusEvent): void
    -setupFloatingFilter(): void
    -setupLeftPositioning(): void
    -setupSyncWithFilter(): void
    -showParentFilter(): void
    -setupColumnHover(): void
    -onColumnHover(): void
    -setupWidth(): void
    -onColumnWidthChanged(): void
    -setupWithFloatingFilter(floatingFilterComp: IFloatingFilterComp): void
    -parentFilterInstance(callback: (filterInstance: IFilterComp) => void): void
    -getFilterComponent(createIfDoesNotExist?: boolean): AgPromise<IFilterComp>
    -getFloatingFilterInstance(): AgPromise<IFloatingFilterComp>
    -createDynamicParams(): any
    -getFilterComponentPrototype(colDef: ColDef): new () => any
    -currentParentModel(): any
    -onParentModelChanged(model: any, filterChangedEvent: FilterChangedEvent): void
    -onFloatingFilterChanged(): void
    -{static} TEMPLATE: string
    +{static} getDefaultFloatingFilterType(def: IFilterDef): string
}
enum HeaderRowType {
    COLUMN_GROUP
    COLUMN
    FLOATING_FILTER
}
class HeaderRowComp extends Component {
    -columnController: ColumnController
    -focusController: FocusController
    -pinned: string
    -type: HeaderRowType
    -dept: number
    -headerComps: { [key: string]: AbstractHeaderWrapper; }
    +forEachHeaderElement(callback: (comp: Component) => void): void
    -setRowIndex(rowIndex: number): void
    +getRowIndex(): number
    +getType(): HeaderRowType
    -destroyAllChildComponents(): void
    -destroyChildComponents(idsToDestroy: string[]): void
    -onRowHeightChanged(): void
    -init(): void
    -onColumnResized(): void
    -setWidth(): void
    -getWidthForRow(): number
    -onDisplayedColumnsChanged(): void
    -getColumnsInViewport(): ColumnGroupChild[]
    -getColumnsInViewportPrintLayout(): ColumnGroupChild[]
    -getActualDepth(): number
    -getColumnsInViewportNormalLayout(): ColumnGroupChild[]
    -onVirtualColumnsChanged(): void
    -createHeaderComp(columnGroupChild: ColumnGroupChild): AbstractHeaderWrapper
    +getHeaderComps(): { [key: string]: AbstractHeaderWrapper; }
}
class MoveColumnController implements DropListener {
    -loggerFactory: LoggerFactory
    -columnController: ColumnController
    -dragAndDropService: DragAndDropService
    -gridOptionsWrapper: GridOptionsWrapper
    -gridPanel: GridPanel
    -needToMoveLeft: boolean
    -needToMoveRight: boolean
    -movingIntervalId: number
    -intervalCount: number
    -logger: Logger
    -pinned: string
    -centerContainer: boolean
    -lastDraggingEvent: DraggingEvent
    -failedMoveAttempts: number
    -eContainer: HTMLElement
    +registerGridComp(gridPanel: GridPanel): void
    +init(): void
    +getIconName(): string
    +onDragEnter(draggingEvent: DraggingEvent): void
    +onDragLeave(draggingEvent: DraggingEvent): void
    +setColumnsVisible(columns: Column[], visible: boolean, source?: ColumnEventType): void
    +setColumnsPinned(columns: Column[], pinned: string, source?: ColumnEventType): void
    +onDragStop(): void
    -normaliseX(x: number): number
    -checkCenterForScrolling(xAdjustedForScroll: number): void
    +onDragging(draggingEvent: DraggingEvent, fromEnter?: boolean): void
    -normaliseDirection(hDirection: HorizontalDirection): HorizontalDirection
    -calculateOldIndex(movingCols: Column[]): number
    -attemptMoveColumns(dragSourceType: DragSourceType, allMovingColumns: Column[], hDirection: HorizontalDirection, mouseX: number, fromEnter: boolean): void
    -calculateValidMoves(movingCols: Column[], draggingRight: boolean, mouseX: number): number[]
    -isColumnHidden(displayedColumns: Column[], col: Column): boolean
    -ensureIntervalStarted(): void
    -ensureIntervalCleared(): void
    -moveInterval(): void
}
class BodyDropPivotTarget implements DropListener {
    -columnController: ColumnController
    -gridOptionsWrapper: GridOptionsWrapper
    -columnsToAggregate: Column[]
    -columnsToGroup: Column[]
    -columnsToPivot: Column[]
    -pinned: string
    +onDragEnter(draggingEvent: DraggingEvent): void
    +getIconName(): string
    +onDragLeave(draggingEvent: DraggingEvent): void
    -clearColumnsList(): void
    +onDragging(draggingEvent: DraggingEvent): void
    +onDragStop(draggingEvent: DraggingEvent): void
}
interface DropListener {
    +getIconName(): string
    +onDragEnter(params: DraggingEvent): void
    +onDragLeave(params: DraggingEvent): void
    +onDragging(params: DraggingEvent): void
    +onDragStop(params: DraggingEvent): void
}
enum DropType {
    ColumnMove
    Pivot
}
class BodyDropTarget extends BeanStub implements DropTarget {
    -dragAndDropService: DragAndDropService
    -columnController: ColumnController
    -gridPanel: GridPanel
    -pinned: string
    -eContainer: HTMLElement
    -eSecondaryContainers: HTMLElement[]
    -dropListeners: { [type: number]: DropListener; }
    -currentDropListener: DropListener
    -moveColumnController: MoveColumnController
    +registerGridComp(gridPanel: GridPanel): void
    +isInterestedIn(type: DragSourceType): boolean
    +getSecondaryContainers(): HTMLElement[]
    +getContainer(): HTMLElement
    -init(): void
    +getIconName(): string
    -getDropType(draggingEvent: DraggingEvent): DropType
    +onDragEnter(draggingEvent: DraggingEvent): void
    +onDragLeave(params: DraggingEvent): void
    +onDragging(params: DraggingEvent): void
    +onDragStop(params: DraggingEvent): void
}
interface SetScrollsVisibleParams {
    +horizontalScrollShowing: boolean
    +verticalScrollShowing: boolean
}
class ScrollVisibleService extends BeanStub {
    -columnApi: ColumnApi
    -gridApi: GridApi
    -horizontalScrollShowing: boolean
    -verticalScrollShowing: boolean
    +setScrollsVisible(params: SetScrollsVisibleParams): void
    +isHorizontalScrollShowing(): boolean
    +isVerticalScrollShowing(): boolean
}
class HeaderContainer extends BeanStub {
    -columnController: ColumnController
    -scrollVisibleService: ScrollVisibleService
    -eContainer: HTMLElement
    -eViewport: HTMLElement
    -pinned: string
    -filtersRowComp: HeaderRowComp
    -columnsRowComp: HeaderRowComp
    -groupsRowComps: HeaderRowComp[]
    +forEachHeaderElement(callback: (renderedHeaderElement: Component) => void): void
    -init(): void
    -onColumnResized(): void
    -onDisplayedColumnsChanged(): void
    -onScrollVisibilityChanged(): void
    -onScrollbarWidthChanged(): void
    -setWidthOfPinnedContainer(): void
    +getRowComps(): HeaderRowComp[]
    -onGridColumnsChanged(): void
    +refresh(keepColumns?: boolean): void
    +setupDragAndDrop(gridComp: GridPanel): void
    -destroyRowComps(keepColumns?: boolean): void
    -destroyRowComp(rowComp?: HeaderRowComp): void
    -refreshRowComps(keepColumns?: boolean): void
}
interface HeaderPosition {
    +headerRowIndex: number
    +column: Column | ColumnGroup
}
class HeaderPositionUtils extends BeanStub {
    -columnController: ColumnController
    -headerNavigationService: HeaderNavigationService
    +findHeader(focusedHeader: HeaderPosition, direction: "Before" | "After"): HeaderPosition
    +findColAtEdgeForHeaderRow(level: number, position: "start" | "end"): HeaderPosition
}
interface TaskItem {
    +task: () => void
    +index: number
    +createOrder: number
}
interface TaskList {
    +list: TaskItem[]
    +sorted: boolean
}
class AnimationFrameService extends BeanStub {
    -createTasksP1: TaskList
    -createTasksP2: TaskList
    -destroyTasks: (() => void)[]
    -ticking: boolean
    -useAnimationFrame: boolean
    -scrollGoingDown: boolean
    -lastScrollTop: number
    -taskCount: number
    -cancelledTasks: any
    -gridPanel: GridPanel
    +setScrollTop(scrollTop: number): void
    -init(): void
    +registerGridComp(gridPanel: GridPanel): void
    -verifyAnimationFrameOn(methodName: string): void
    +createTask(task: () => void, index: number, list: "createTasksP1" | "createTasksP2"): void
    +cancelTask(task: () => void): void
    -addTaskToList(taskList: TaskList, task: TaskItem): void
    -sortTaskList(taskList: TaskList): void
    +addDestroyTask(task: () => void): void
    -executeFrame(millis: number): void
    -stopTicking(): void
    +flushAllFrames(): void
    +schedule(): void
    -requestFrame(): void
    +isQueueEmpty(): boolean
}
class AutoWidthCalculator extends BeanStub {
    -rowRenderer: RowRenderer
    -gridPanel: GridPanel
    -headerRootComp: HeaderRootComp
    +registerGridComp(gridPanel: GridPanel): void
    +registerHeaderRootComp(headerRootComp: HeaderRootComp): void
    +getPreferredWidthForColumn(column: Column, skipHeader?: boolean): number
    -getHeaderCellForColumn(column: Column): HTMLElement
    -putRowCellsIntoDummyContainer(column: Column, eDummyContainer: HTMLElement): void
    -cloneItemIntoDummy(eCell: HTMLElement, eDummyContainer: HTMLElement): void
}
class KeyName {
    +{static} BACKSPACE: string
    +{static} TAB: string
    +{static} ENTER: string
    +{static} SHIFT: string
    +{static} ESCAPE: string
    +{static} SPACE: string
    +{static} LEFT: string
    +{static} UP: string
    +{static} RIGHT: string
    +{static} DOWN: string
    +{static} DELETE: string
    +{static} NUM_PAD_DELETE: string
    +{static} A: string
    +{static} C: string
    +{static} V: string
    +{static} D: string
    +{static} Z: string
    +{static} Y: string
    +{static} F2: string
    +{static} PAGE_UP: string
    +{static} PAGE_DOWN: string
    +{static} PAGE_HOME: string
    +{static} PAGE_END: string
}
class HeaderRootComp extends ManagedFocusComponent {
    -ePinnedLeftHeader: HTMLElement
    -ePinnedRightHeader: HTMLElement
    -eHeaderContainer: HTMLElement
    -eHeaderViewport: HTMLElement
    -columnController: ColumnController
    -gridApi: GridApi
    -autoWidthCalculator: AutoWidthCalculator
    -headerNavigationService: HeaderNavigationService
    -gridPanel: GridPanel
    -printLayout: boolean
    -headerContainers: any
    #postConstruct(): void
    +registerGridComp(gridPanel: GridPanel): void
    -registerHeaderContainer(headerContainer: HeaderContainer, type: HeaderContainerPosition): void
    #onTabKeyDown(e: KeyboardEvent): void
    #handleKeyDown(e: KeyboardEvent): void
    #onFocusOut(e: FocusEvent): void
    -onDomLayoutChanged(): void
    +setHorizontalScroll(offset: number): void
    +forEachHeaderElement(callback: (renderedHeaderElement: Component) => void): void
    +refreshHeader(): void
    -onPivotModeChanged(): void
    +setHeight(height: number): void
    -addPreventHeaderScroll(): void
    +getHeaderContainers(): any
    +setHeaderContainerWidth(width: number): void
    +setLeftVisible(visible: boolean): void
    +setRightVisible(visible: boolean): void
    -{static} TEMPLATE: string
}
enum HeaderNavigationDirection {
    UP
    DOWN
    LEFT
    RIGHT
}
class HeaderNavigationService extends BeanStub {
    -focusController: FocusController
    -headerPositionUtils: HeaderPositionUtils
    -animationFrameService: AnimationFrameService
    -gridPanel: GridPanel
    -headerRoot: HeaderRootComp
    +registerGridComp(gridPanel: GridPanel): void
    +registerHeaderRoot(headerRoot: HeaderRootComp): void
    +getHeaderRowCount(): number
    +getHeaderRowType(idx: number): HeaderRowType
    +getHeaderContainer(position?: HeaderContainerPosition): HeaderContainer
    +navigateVertically(direction: HeaderNavigationDirection, fromHeader: HeaderPosition, event: KeyboardEvent): boolean
    +navigateHorizontally(direction: HeaderNavigationDirection, fromTab?: boolean, event: KeyboardEvent): boolean
    -focusNextHeaderRow(focusedHeader: HeaderPosition, direction: "Before" | "After", event: KeyboardEvent): boolean
    +scrollToColumn(column: Column | ColumnGroup, direction?: "Before" | "After"): void
}
class TemplateService extends BeanStub {
    -$scope: any
    -templateCache: any
    -waitingCallbacks: any
    +getTemplate(url: any, callback: any): any
    +handleHttpResult(httpResult: any, url: any): void
}
class ColumnAnimationService extends BeanStub {
    -gridPanel: GridPanel
    -executeNextFuncs: Function[]
    -executeLaterFuncs: Function[]
    -active: boolean
    -animationThreadCount: number
    +registerGridComp(gridPanel: GridPanel): void
    +isActive(): boolean
    +start(): void
    +finish(): void
    +executeNextVMTurn(func: Function): void
    +executeLaterVMTurn(func: Function): void
    -ensureAnimationCssClassPresent(): void
    +flush(): void
}
interface IContextMenuFactory {
    +showMenu(node: RowNode, column: Column, value: any, mouseEvent: MouseEvent | Touch, anchorToElement: HTMLElement): boolean
    +hideActiveMenu(): void
    +registerGridComp(gridPanel: GridPanel): void
}
class ValueFormatterService extends BeanStub {
    -expressionService: ExpressionService
    +formatValue(column: Column, node: RowNode, $scope: any, value: any, suppliedFormatter?: (value: any) => string, useFormatterFromColumn?: boolean): string
}
class StylingService extends BeanStub {
    -expressionService: ExpressionService
    +processAllCellClasses(colDef: ColDef, params: CellClassParams, onApplicableClass: (className: string) => void, onNotApplicableClass?: (className: string) => void): void
    +processClassRules(classRules: { [cssClassName: string]: string | Function; }, params: CellClassParams | RowClassParams, onApplicableClass: (className: string) => void, onNotApplicableClass?: (className: string) => void): void
    +processStaticCellClasses(colDef: ColDef, params: CellClassParams, onApplicableClass: (className: string) => void): void
}
class MaxDivHeightScaler extends BeanStub {
    -gridPanel: GridPanel
    -maxDivHeight: number
    -scaling: boolean
    -modelHeight: number
    -uiContainerHeight: number
    -pixelsToShave: number
    -offset: number
    -scrollY: number
    -uiBodyHeight: number
    -maxScrollY: number
    -postConstruct(): void
    +registerGridComp(gridPanel: GridPanel): void
    +isScaling(): boolean
    +getOffset(): number
    +updateOffset(): void
    -calculateOffset(): void
    -clearOffset(): void
    -setOffset(newOffset: number): void
    +setModelHeight(modelHeight: number): void
    +getUiContainerHeight(): number
    +getRealPixelPosition(modelPixel: number): number
    -getUiBodyHeight(): number
    +getScrollPositionForPixel(rowTop: number): number
}
class DetailRowCompCache extends BeanStub {
    -cacheItems: CacheItem[]
    -maxCacheSize: number
    -active: boolean
    -postConstruct(): void
    +addOrDestroy(rowNode: RowNode, pinned: string, comp: ICellRendererComp): void
    -getCacheItem(rowNode: RowNode, autoCreate?: boolean): CacheItem
    -stampCacheItem(item: CacheItem): void
    -destroyFullWidthRow(comp: ICellRendererComp): void
    -purgeCache(startIndex: number): void
    +get(rowNode: RowNode, pinned: string): ICellRendererComp
    #destroy(): void
}
interface CacheItem {
    +rowNode: RowNode
    +lastAccessedTime: number
    +center?: ICellRendererComp
    +left?: ICellRendererComp
    +right?: ICellRendererComp
}
interface RowCssClassCalculatorParams {
    +rowNode: RowNode
    +rowIsEven: boolean
    +rowLevel: number
    +fullWidthRow?: boolean
    +firstRowOnPage: boolean
    +lastRowOnPage: boolean
    +printLayout: boolean
    +expandable: boolean
    +extraCssClass?: string
    +rowFocused?: boolean
    +fadeRowIn?: boolean
    +scope?: any
}
class RowCssClassCalculator {
    +stylingService: StylingService
    +gridOptionsWrapper: GridOptionsWrapper
    +getInitialRowClasses(params: RowCssClassCalculatorParams): string[]
    +processClassesFromGridOptions(rowNode: RowNode, scope: any): string[]
    -preProcessRowClassRules(rowNode: RowNode, scope: any): string[]
    +processRowClassRules(rowNode: RowNode, scope: any, onApplicableClass: (className: string) => void, onNotApplicableClass?: (className: string) => void): void
    +calculateRowLevel(rowNode: RowNode): number
}
interface ServerSideTransaction {
    +route?: string[]
    +addIndex?: number
    +add?: any[]
    +remove?: any[]
    +update?: any[]
}
interface ServerSideTransactionResult {
    +status: ServerSideTransactionResultStatus
    +add?: RowNode[]
    +remove?: RowNode[]
    +update?: RowNode[]
}
enum ServerSideTransactionResultStatus {
    StoreNotFound
    StoreLoading
    StoreWaitingToLoad
    StoreLoadingFailed
    StoreWrongType
    Applied
    Cancelled
}
interface IServerSideStore {
    +clearDisplayIndexes(): void
    +getDisplayIndexEnd(): number
    +isDisplayIndexInStore(displayIndex: number): boolean
    +setDisplayIndexes(displayIndexSeq: NumberSequence, nextRowTop: { value: number; }): void
    +forEachNodeDeep(callback: (rowNode: RowNode, index: number) => void, sequence?: NumberSequence): void
    +retryLoads(): void
    +getRowUsingDisplayIndex(displayRowIndex: number, dontCreateBlock?: boolean): RowNode
    +getRowBounds(index: number): RowBounds
    +isPixelInRange(pixel: number): boolean
    +getRowIndexAtPixel(pixel: number): number
    +getChildStore(keys: string[]): IServerSideStore
    +refreshAfterSort(params: StoreRefreshAfterParams): void
    +refreshAfterFilter(params: StoreRefreshAfterParams): void
    +applyTransaction(transaction: ServerSideTransaction): ServerSideTransactionResult
    +refreshStore(purge: boolean): void
    +getRowCount(): number
    +getTopLevelRowDisplayedIndex(topLevelIndex: number): number
    +isLastRowIndexKnown(): boolean
    +getRowNodesInRange(firstInRange: RowNode, lastInRange: RowNode): RowNode[]
    +addStoreStates(result: ServerSideStoreState[]): void
}
interface StoreRefreshAfterParams {
    +valueColChanged: boolean
    +secondaryColChanged: boolean
    +alwaysReset: boolean
    +changedColumns: string[]
}
interface ServerSideStoreState {
    +type: ServerSideStoreType
    +route: string[]
    +rowCount: number
    +lastRowIndexKnown?: boolean
    +info?: any
    +maxBlocksInCache?: number
    +cacheBlockSize?: number
}
interface ColumnVO {
    +id: string
    +displayName: string
    +field?: string
    +aggFunc?: string
}
interface LoadCompleteEvent extends AgEvent {
    +success: boolean
    +block: RowNodeBlock
}
interface LoadSuccessParams {
    +rowData: any[]
    +rowCount?: number
    +storeInfo?: any
}
abstract class RowNodeBlock extends BeanStub {
    -id: number
    -state: string
    -version: number
    +{abstract} getBlockStateJson(): { id: string; state: any; }
    #{abstract} loadFromDatasource(): void
    #{abstract} processServerResult(params: LoadSuccessParams): void
    #{abstract} processServerFail(): void
    +getId(): number
    +load(): void
    +getVersion(): number
    +setStateWaitingToLoad(): void
    +getState(): string
    #pageLoadFailed(version: number): void
    #success(version: number, params: LoadSuccessParams): void
    #pageLoaded(version: number, rows: any[], lastRow: number): void
    -isRequestMostRecentAndLive(version: number): boolean
    #successCommon(version: number, params: LoadSuccessParams): void
    -dispatchLoadCompleted(success?: boolean): void
    +{static} EVENT_LOAD_COMPLETE: string
    +{static} STATE_WAITING_TO_LOAD: string
    +{static} STATE_LOADING: string
    +{static} STATE_LOADED: string
    +{static} STATE_FAILED: string
}
interface IServerSideGetRowsRequest {
    +startRow: number
    +endRow: number
    +rowGroupCols: ColumnVO[]
    +valueCols: ColumnVO[]
    +pivotCols: ColumnVO[]
    +pivotMode: boolean
    +groupKeys: string[]
    +filterModel: any
    +sortModel: any
}
interface IServerSideGetRowsParams {
    +request: IServerSideGetRowsRequest
    +parentNode: RowNode
    +successCallback(rowsThisPage: any[], lastRow: number): void
    +success(params: LoadSuccessParams): void
    +failCallback(): void
    +fail(): void
    +api: GridApi
    +columnApi: ColumnApi
}
interface IServerSideDatasource {
    +getRows(params: IServerSideGetRowsParams): void
    +destroy(): void
}
interface IServerSideRowModel extends IRowModel {
    +refreshStore(params: RefreshStoreParams): void
    +onRowHeightChanged(): void
    +getStoreState(): ServerSideStoreState[]
    +retryLoads(): void
    +expandAll(value: boolean): void
    +setDatasource(datasource: IServerSideDatasource): void
}
interface IServerSideTransactionManager {
    +applyTransaction(transaction: ServerSideTransaction): ServerSideTransactionResult
    +applyTransactionAsync(transaction: ServerSideTransaction, callback?: (res: ServerSideTransactionResult) => void): void
    +flushAsyncTransactions(): void
}
interface RefreshStoreParams {
    +route?: string[]
    +purge?: boolean
}
class Beans {
    +resizeObserverService: ResizeObserverService
    +paginationProxy: PaginationProxy
    +context: Context
    +columnApi: ColumnApi
    +gridApi: GridApi
    +gridOptionsWrapper: GridOptionsWrapper
    +expressionService: ExpressionService
    +rowRenderer: RowRenderer
    +$compile: any
    +templateService: TemplateService
    +valueService: ValueService
    +eventService: EventService
    +columnController: ColumnController
    +headerNavigationService: HeaderNavigationService
    +columnAnimationService: ColumnAnimationService
    +rangeController: IRangeController
    +focusController: FocusController
    +contextMenuFactory: IContextMenuFactory
    +popupService: PopupService
    +valueFormatterService: ValueFormatterService
    +stylingService: StylingService
    +columnHoverService: ColumnHoverService
    +userComponentFactory: UserComponentFactory
    +taskQueue: AnimationFrameService
    +dragAndDropService: DragAndDropService
    +sortController: SortController
    +filterManager: FilterManager
    +maxDivHeightScaler: MaxDivHeightScaler
    +frameworkOverrides: IFrameworkOverrides
    +detailRowCompCache: DetailRowCompCache
    +cellPositionUtils: CellPositionUtils
    +rowPositionUtils: RowPositionUtils
    +selectionController: SelectionController
    +selectionHandleFactory: ISelectionHandleFactory
    +rowCssClassCalculator: RowCssClassCalculator
    +rowModel: IRowModel
    +doingMasterDetail: boolean
    +gridPanel: GridPanel
    +clientSideRowModel: IClientSideRowModel
    +serverSideRowModel: IServerSideRowModel
    +registerGridComp(gridPanel: GridPanel): void
    -postConstruct(): void
}
class CheckboxSelectionComponent extends Component {
    -eCheckbox: AgCheckbox
    -rowNode: RowNode
    -column: Column
    -isRowSelectableFunc: IsRowSelectable
    -postConstruct(): void
    +getCheckboxId(): string
    -onDataChanged(): void
    -onSelectableChanged(): void
    -onSelectionChanged(): void
    -onCheckedClicked(event: MouseEvent): number
    -onUncheckedClicked(event: MouseEvent): number
    +init(params: any): void
    -showOrHideSelect(): void
    -checkboxCallbackExists(): boolean
}
interface RowContainerComponentParams {
    +eContainer: HTMLElement
    +eViewport?: HTMLElement
    +eWrapper?: HTMLElement
    +hideWhenNoChildren?: boolean
}
class RowContainerComponent {
    +gridOptionsWrapper: GridOptionsWrapper
    -eContainer: HTMLElement
    -eViewport: HTMLElement
    -eWrapper: HTMLElement
    -hideWhenNoChildren: boolean
    -childCount: number
    -visible: boolean
    -rowTemplatesToAdd: string[]
    -afterGuiAttachedCallbacks: Function[]
    -scrollTop: number
    -lastMadeVisibleTime: number
    -domOrder: boolean
    -lastPlacedElement: HTMLElement
    +setVerticalScrollPosition(verticalScrollPosition: number): void
    -postConstruct(): void
    -checkDomOrder(): void
    +getRowElement(compId: number): HTMLElement
    +setHeight(height: number): void
    +flushRowTemplates(): void
    +appendRowTemplate(rowTemplate: string, callback: () => void): void
    +ensureDomOrder(eRow: HTMLElement): void
    +removeRowElement(eRow: HTMLElement): void
    -checkVisibility(): void
    +isMadeVisibleRecently(): boolean
}
class AngularRowUtils {
    +{static} createChildScopeOrNull(rowNode: RowNode, parentScope: any, gridOptionsWrapper: GridOptionsWrapper): { scope: any; scopeDestroyFunc: () => void; }
}
interface CellTemplate {
    +template: string
    +cellComps: CellComp[]
}
class RowComp extends Component {
    -rowNode: RowNode
    -beans: Beans
    -ePinnedLeftRow: HTMLElement
    -ePinnedRightRow: HTMLElement
    -eBodyRow: HTMLElement
    -eAllRowContainers: HTMLElement[]
    -eFullWidthRow: HTMLElement
    -eFullWidthRowBody: HTMLElement
    -eFullWidthRowLeft: HTMLElement
    -eFullWidthRowRight: HTMLElement
    -bodyContainerComp: RowContainerComponent
    -fullWidthContainerComp: RowContainerComponent
    -pinnedLeftContainerComp: RowContainerComponent
    -pinnedRightContainerComp: RowContainerComponent
    -fullWidthRowComponent: ICellRendererComp
    -fullWidthRowComponentBody: ICellRendererComp
    -fullWidthRowComponentLeft: ICellRendererComp
    -fullWidthRowComponentRight: ICellRendererComp
    -fullWidthRowDestroyFuncs: (() => void)[]
    -firstRowOnPage: boolean
    -lastRowOnPage: boolean
    -active: boolean
    -fullWidthRow: boolean
    -editingRow: boolean
    -rowFocused: boolean
    -rowContainerReadyCount: number
    -refreshNeeded: boolean
    -columnRefreshPending: boolean
    -cellComps: { [key: string]: CellComp; }
    -createSecondPassFuncs: Function[]
    -removeFirstPassFuncs: Function[]
    -removeSecondPassFuncs: Function[]
    -fadeRowIn: boolean
    -slideRowIn: boolean
    -useAnimationFrameForCreate: boolean
    -rowIsEven: boolean
    -paginationPage: number
    -parentScope: any
    -scope: any
    -initialised: boolean
    -elementOrderChanged: boolean
    -lastMouseDownOnDragger: boolean
    -rowLevel: number
    -printLayout: boolean
    -embedFullWidth: boolean
    +init(): void
    -setupAngular1Scope(): void
    -createTemplate(contents: string, extraCssClass?: string): string
    +getCellForCol(column: Column): HTMLElement
    +afterFlush(): void
    -executeProcessRowPostCreateFunc(): void
    -getInitialRowTopStyle(): string
    -getRowBusinessKey(): string
    -areAllContainersReady(): boolean
    -lazyCreateCells(cols: Column[], eRow: HTMLElement): void
    -createRowContainer(rowContainerComp: RowContainerComponent, cols: Column[], callback: (eRow: HTMLElement) => void): void
    -setupRowContainers(): void
    -setupNormalRowContainers(): void
    -createFullWidthRows(type: string, name: string, detailRow: boolean): void
    -setAnimateFlags(animateIn: boolean): void
    +isEditing(): boolean
    +stopRowEditing(cancel: boolean): void
    +isFullWidth(): boolean
    +refreshFullWidth(): boolean
    -addListeners(): void
    -addListenersForCellComps(): void
    -onRowNodeDataChanged(event: DataChangedEvent): void
    -onRowNodeCellChanged(): void
    -postProcessCss(): void
    -onRowNodeHighlightChanged(): void
    -onRowNodeDraggingChanged(): void
    -postProcessRowDragging(): void
    -updateExpandedCss(): void
    -onDisplayedColumnsChanged(): void
    -destroyFullWidthComponents(): void
    -getContainerForCell(pinnedType: string): HTMLElement
    -onVirtualColumnsChanged(): void
    -onColumnResized(): void
    +getRowPosition(): RowPosition
    +onKeyboardNavigate(keyboardEvent: KeyboardEvent): void
    +onTabKeyDown(keyboardEvent: KeyboardEvent): void
    +onFullWidthRowFocused(event: CellFocusedEvent): void
    +refreshCell(cellComp: CellComp): void
    -refreshCells(): void
    -refreshCellsInAnimationFrame(): void
    -onColumnMoved(): void
    -destroyCells(colIds: string[]): void
    -isCellEligibleToBeRemoved(indexStr: string): boolean
    -ensureCellInCorrectContainer(cellComp: CellComp): void
    -isCellInWrongRow(cellComp: CellComp): boolean
    -insertCellsIntoContainer(eRow: HTMLElement, cols: Column[]): void
    -addDomData(eRowContainer: Element): void
    -createNewCell(col: Column, eContainer: HTMLElement, cellTemplates: string[], newCellComps: CellComp[]): void
    +onMouseEvent(eventName: string, mouseEvent: MouseEvent): void
    -createRowEvent(type: string, domEvent?: Event): RowEvent
    -createRowEventWithSource(type: string, domEvent: Event): RowEvent
    -onRowDblClick(mouseEvent: MouseEvent): void
    -onRowMouseDown(mouseEvent: MouseEvent): void
    +onRowClick(mouseEvent: MouseEvent): void
    -createFullWidthRowContainer(rowContainerComp: RowContainerComponent, pinned: string, extraCssClass: string, cellRendererType: string, cellRendererName: string, eRowCallback: (eRow: HTMLElement) => void, cellRendererCallback: (comp: ICellRendererComp) => void, detailRow: boolean): void
    -setupDetailRowAutoHeight(eDetailGui: HTMLElement): void
    -angular1Compile(element: Element): void
    -createFullWidthParams(eRow: HTMLElement, pinned: string): any
    -getInitialRowClasses(extraCssClass: string): string[]
    -onUiLevelChanged(): void
    -isFirstRowOnPage(): boolean
    -isLastRowOnPage(): boolean
    -onModelUpdated(): void
    +stopEditing(cancel?: boolean): void
    -setEditingRow(value: boolean): void
    +startRowEditing(keyPress?: number, charPress?: string, sourceRenderedCell?: CellComp): void
    +forEachCellComp(callback: (renderedCell: CellComp) => void): void
    -postProcessClassesFromGridOptions(): void
    -postProcessRowClassRules(): void
    -preProcessStylesFromGridOptions(): string
    -postProcessStylesFromGridOptions(): void
    -processStylesFromGridOptions(): any
    -createCells(cols: Column[]): { template: string; cellComps: CellComp[]; }
    -onRowSelected(): void
    -refreshAriaLabel(node: HTMLElement, selected: boolean): void
    -callAfterRowAttachedOnCells(newCellComps: CellComp[], eRow: HTMLElement): void
    -afterRowAttached(rowContainerComp: RowContainerComponent, eRow: HTMLElement): void
    -addHoverFunctionality(eRow: HTMLElement): void
    -roundRowTopToBounds(rowTop: number): number
    #getFrameworkOverrides(): IFrameworkOverrides
    -onRowHeightChanged(): void
    +addEventListener(eventType: string, listener: Function): void
    +removeEventListener(eventType: string, listener: Function): void
    +destroy(animate?: boolean): void
    -destroyContainingCells(): void
    +getAndClearDelayedDestroyFunctions(): Function[]
    -onCellFocusChanged(): void
    -onPaginationChanged(): void
    -onTopChanged(): void
    -onPaginationPixelOffsetChanged(): void
    -applyPaginationOffset(topPx: number, reverse?: boolean): number
    -setRowTop(pixels: number): void
    +getAndClearNextVMTurnFunctions(): Function[]
    +getRowNode(): RowNode
    +getRenderedCellForColumn(column: Column): CellComp
    -onRowIndexChanged(): void
    -updateRowIndexes(): void
    +ensureDomOrder(): void
    +getPinnedLeftRowElement(): HTMLElement
    +getPinnedRightRowElement(): HTMLElement
    +getBodyRowElement(): HTMLElement
    +getFullWidthRowElement(): HTMLElement
    +{static} DOM_DATA_KEY_RENDERED_ROW: string
    -{static} FULL_WIDTH_CELL_RENDERER: string
    -{static} GROUP_ROW_RENDERER: string
    -{static} GROUP_ROW_RENDERER_COMP_NAME: string
    -{static} LOADING_CELL_RENDERER: string
    -{static} LOADING_CELL_RENDERER_COMP_NAME: string
    -{static} DETAIL_CELL_RENDERER: string
    -{static} DETAIL_CELL_RENDERER_COMP_NAME: string
}
interface IRowDragItem extends DragItem {
    +defaultTextValue: string
}
class RowDragComp extends Component {
    +isCustomGui: boolean
    -dragSource: DragSource
    -rowNode: RowNode
    -column: Column
    -cellValueFn: () => string
    -beans: Beans
    -customGui?: HTMLElement
    -postConstruct(): void
    +setDragElement(dragElement: HTMLElement): void
    -getSelectedCount(): number
    -checkCompatibility(): void
    -addDragSource(): void
    -removeDragSource(): void
}
class VisibilityStrategy extends BeanStub {
    -parent: RowDragComp
    -column: Column
    #rowNode: RowNode
    #setDisplayedOrVisible(neverDisplayed: boolean): void
}
class NonManagedVisibilityStrategy extends VisibilityStrategy {
    -beans: Beans
    -postConstruct(): void
    -onSuppressRowDrag(): void
    -workOutVisibility(): void
}
class ManagedVisibilityStrategy extends VisibilityStrategy {
    -beans: Beans
    -postConstruct(): void
    -onSuppressRowDrag(): void
    -workOutVisibility(): void
}
class PopupEditorWrapper extends PopupComponent implements ICellEditorComp {
    -cellEditor: ICellEditorComp
    -params: any
    -getGuiCalledOnChild: boolean
    -onKeyDown(event: KeyboardEvent): void
    +getGui(): HTMLElement
    +init(params: ICellEditorParams): void
    +afterGuiAttached(): void
    +getValue(): any
    +isCancelBeforeStart(): boolean
    +isCancelAfterEnd(): boolean
    +getPopupPosition(): string
    +focusIn(): void
    +focusOut(): void
    +{static} DOM_KEY_POPUP_EDITOR_WRAPPER: string
}
class DndSourceComp extends Component {
    -beans: Beans
    -rowNode: RowNode
    -column: Column
    -cellValue: string
    -eCell: HTMLElement
    -postConstruct(): void
    -addDragSource(): void
    -onDragStart(dragEvent: DragEvent): void
    -checkVisibility(): void
}
interface TooltipParentComp extends Component {
    +getTooltipParams(): ITooltipParams
}
enum TooltipStates {
    NOTHING
    WAITING_TO_SHOW
    SHOWING
}
class TooltipFeature extends BeanStub {
    -DEFAULT_HIDE_TOOLTIP_TIMEOUT: 10000
    -SHOW_QUICK_TOOLTIP_DIFF: 1000
    -FADE_OUT_TOOLTIP_TIMEOUT: 1000
    -popupService: PopupService
    -userComponentFactory: UserComponentFactory
    -columnApi: ColumnApi
    -gridApi: GridApi
    -tooltipShowDelay: number
    -parentComp: TooltipParentComp
    -showTooltipTimeoutId: number
    -hideTooltipTimeoutId: number
    -state: TooltipStates
    -lastMouseEvent: MouseEvent
    -tooltipComp: ITooltipComp
    -tooltipPopupDestroyFunc: () => void
    -tooltipInstanceCount: number
    -tooltipMouseTrack: boolean
    -postConstruct(): void
    #destroy(): void
    +onMouseEnter(e: MouseEvent): void
    +onMouseLeave(): void
    -onKeyDown(): void
    -setToDoNothing(): void
    +onMouseMove(e: MouseEvent): void
    +onMouseDown(): void
    -hideTooltip(): void
    -destroyTooltipComp(): void
    -isLastTooltipHiddenRecently(): boolean
    -showTooltip(): void
    -newTooltipComponentCallback(tooltipInstanceCopy: number, tooltipComp: ITooltipComp): void
    -positionTooltipUnderLastMouseEvent(): void
    -clearTimeouts(): void
    -{static} lastTooltipHideTime: number
}
class CellComp extends Component implements TooltipParentComp {
    -eCellWrapper: HTMLElement
    -eCellValue: HTMLElement
    -beans: Beans
    -column: Column
    -rowNode: RowNode
    -eParentRow: HTMLElement
    -cellPosition: CellPosition
    -rangeCount: number
    -hasChartRange: boolean
    -usingWrapper: boolean
    -wrapText: boolean
    -includeSelectionComponent: boolean
    -includeRowDraggingComponent: boolean
    -includeDndSourceComponent: boolean
    -rowDraggingComp: RowDragComp
    -cellFocused: boolean
    -editingCell: boolean
    -cellEditorInPopup: boolean
    -hideEditorPopup: Function
    -createCellRendererFunc: () => void
    -lastIPadMouseClickEvent: number
    -usingCellRenderer: boolean
    -cellRendererType: string
    -cellRenderer: ICellRendererComp
    -cellRendererGui: HTMLElement
    -cellEditor: ICellEditorComp
    -selectionHandle: ISelectionHandle
    -autoHeightCell: boolean
    -firstRightPinned: boolean
    -lastLeftPinned: boolean
    -rowComp: RowComp
    -rangeSelectionEnabled: boolean
    -value: any
    -valueFormatted: any
    -colsSpanning: Column[]
    -rowSpan: number
    -suppressRefreshCell: boolean
    -tooltipFeatureEnabled: boolean
    -tooltip: any
    -scope: any
    -printLayout: boolean
    -cellEditorVersion: number
    -cellRendererVersion: number
    +getCreateTemplate(): string
    -getCellWrapperString(value?: string): string
    -getStylesForRowSpanning(): string
    +afterAttached(): void
    -createTooltipFeatureIfNeeded(): void
    +onColumnHover(): void
    +onCellChanged(event: CellChangedEvent): void
    -getCellLeft(): number
    -getCellWidth(): number
    +onFlashCells(event: FlashCellsEvent): void
    -setupColSpan(): void
    +getColSpanningList(): Column[]
    -onDisplayColumnsChanged(): void
    -refreshAriaIndex(): void
    -getInitialCssClasses(): string[]
    +getInitialValueToRender(): string
    +getRenderedRow(): RowComp
    +isSuppressNavigable(): boolean
    +getCellRenderer(): ICellRendererComp
    +getCellEditor(): ICellEditorComp
    +onNewColumnsLoaded(): void
    -postProcessWrapText(): void
    +refreshCell(params?: { suppressFlash?: boolean; newData?: boolean; forceRefresh?: boolean; }): void
    +flashCell(delays?: { flashDelay?: number | null; fadeDelay?: number | null; }): void
    -animateCell(cssName: string, flashDelay?: number, fadeDelay?: number): void
    -replaceContentsAfterRefresh(): void
    -updateAngular1ScopeAndCompile(): void
    -angular1Compile(): void
    -postProcessStylesFromColDef(): void
    -preProcessStylesFromColDef(): string
    -processStylesFromColDef(): any
    -postProcessClassesFromColDef(): void
    -preProcessClassesFromColDef(): string[]
    -processClassesFromColDef(onApplicableClass: (className: string) => void): void
    -putDataIntoCellAfterRefresh(): void
    +attemptCellRendererRefresh(): boolean
    -refreshToolTip(): void
    -valuesAreEqual(val1: any, val2: any): boolean
    -getToolTip(): string
    +getTooltipParams(): ITooltipParams
    -getTooltipText(escape?: boolean): any
    -processCellClassRules(onApplicableClass: (className: string) => void, onNotApplicableClass?: (className: string) => void): void
    -postProcessCellClassRules(): void
    -preProcessCellClassRules(): string[]
    +setUsingWrapper(): void
    -chooseCellRenderer(): void
    -createCellRendererInstance(useTaskService?: boolean): void
    -afterCellRendererCreated(cellRendererVersion: number, cellRenderer: ICellRendererComp): void
    -createCellRendererParams(): ICellRendererParams
    -formatValue(value: any): any
    -getValueToUse(): any
    -getValueAndFormat(): void
    -getValue(): any
    +onMouseEvent(eventName: string, mouseEvent: MouseEvent): void
    +dispatchCellContextMenuEvent(event: Event): void
    +createEvent(domEvent: Event, eventType: string): CellEvent
    -onMouseOut(mouseEvent: MouseEvent): void
    -onMouseOver(mouseEvent: MouseEvent): void
    -onCellDoubleClicked(mouseEvent: MouseEvent): void
    +startRowOrCellEdit(keyPress?: number, charPress?: string): void
    +isCellEditable(): boolean
    +startEditingIfEnabled(keyPress?: number, charPress?: string, cellStartedEdit?: boolean): void
    -createCellEditor(params: ICellEditorParams): AgPromise<ICellEditorComp>
    -afterCellEditorCreated(cellEditorVersion: number, cellEditor: ICellEditorComp): void
    -addInCellEditor(): void
    -addPopupCellEditor(): void
    -onPopupEditorClosed(): void
    -setInlineEditingClass(): void
    -createCellEditorParams(keyPress: number, charPress: string, cellStartedEdit: boolean): ICellEditorParams
    -stopEditingAndFocus(suppressNavigateAfterEdit?: boolean): void
    -parseValue(newValue: any): any
    +focusCell(forceBrowserFocus?: boolean): void
    +setFocusInOnEditor(): void
    +isEditing(): boolean
    +onKeyDown(event: KeyboardEvent): void
    +setFocusOutOnEditor(): void
    -onNavigationKeyPressed(event: KeyboardEvent, key: number): void
    -onShiftRangeSelect(key: number): void
    -onTabKeyDown(event: KeyboardEvent): void
    -onBackspaceOrDeleteKeyPressed(key: number): void
    -onEnterKeyDown(e: KeyboardEvent): void
    -navigateAfterEdit(): void
    -onF2KeyDown(): void
    -onEscapeKeyDown(): void
    +onKeyPress(event: KeyboardEvent): void
    -onSpaceKeyPressed(event: KeyboardEvent): void
    -onMouseDown(mouseEvent: MouseEvent): void
    -isRightClickInExistingRange(mouseEvent: MouseEvent): boolean
    -containsWidget(target: HTMLElement): boolean
    -isDoubleClickOnIPad(): boolean
    -onCellClicked(mouseEvent: MouseEvent): void
    -createGridCellVo(): void
    +getRowPosition(): RowPosition
    +getCellPosition(): CellPosition
    +getParentRow(): HTMLElement
    +setParentRow(eParentRow: HTMLElement): void
    +getColumn(): Column
    +getComponentHolder(): ColDef
    +detach(): void
    +destroy(): void
    +onLeftChanged(): void
    -modifyLeftForPrintLayout(leftPosition: number): number
    +onWidthChanged(): void
    -getRangeBorders(): { top: boolean; right: boolean; bottom: boolean; left: boolean; }
    -getInitialRangeClasses(): string[]
    +onRowIndexChanged(): void
    +onRangeSelectionChanged(): void
    -getHasChartRange(): boolean
    -shouldHaveSelectionHandle(): boolean
    -addSelectionHandle(): void
    +updateRangeBordersIfRangeCount(): void
    -refreshHandle(): void
    -updateRangeBorders(): void
    +onFirstRightPinnedChanged(): void
    +onLastLeftPinnedChanged(): void
    +refreshShouldDestroy(): boolean
    -populateTemplate(): void
    #getFrameworkOverrides(): IFrameworkOverrides
    -addRowDragging(customElement?: HTMLElement): void
    -addDndSource(): void
    -addSelectionCheckbox(): CheckboxSelectionComponent
    -addDomData(): void
    -isSingleCell(): boolean
    +onCellFocused(event?: any): void
    +stopRowOrCellEdit(cancel?: boolean): void
    +stopEditing(cancel?: boolean): void
    -clearCellElement(): void
    +{static} DOM_DATA_KEY_CELL_COMP: string
    -{static} CELL_RENDERER_TYPE_NORMAL: string
    -{static} CELL_RENDERER_TYPE_PINNED: string
}
class FocusController extends BeanStub {
    -columnController: ColumnController
    -headerNavigationService: HeaderNavigationService
    -columnApi: ColumnApi
    -gridApi: GridApi
    -rowRenderer: RowRenderer
    -rowPositionUtils: RowPositionUtils
    -rangeController: IRangeController
    -gridCore: GridCore
    -focusedCellPosition: CellPosition
    -focusedHeaderPosition: HeaderPosition
    -init(): void
    +registerGridCore(gridCore: GridCore): void
    +unregisterGridCore(gridCore: GridCore): void
    +onColumnEverythingChanged(): void
    +isKeyboardMode(): boolean
    +getFocusCellToUseAfterRefresh(): CellPosition
    -getGridCellForDomElement(eBrowserCell: Node): CellPosition
    +clearFocusedCell(): void
    +getFocusedCell(): CellPosition
    +setFocusedCell(rowIndex: number, colKey: string | Column, floating: string, forceBrowserFocus?: boolean): void
    +isCellFocused(cellPosition: CellPosition): boolean
    +isRowNodeFocused(rowNode: RowNode): boolean
    +isHeaderWrapperFocused(headerWrapper: AbstractHeaderWrapper): boolean
    +clearFocusedHeader(): void
    +getFocusedHeader(): HeaderPosition
    +setFocusedHeader(headerRowIndex: number, column: Column | ColumnGroup): void
    +focusHeaderPosition(headerPosition: HeaderPosition, direction?: "Before" | "After", fromTab?: boolean, allowUserOverride?: boolean, event?: KeyboardEvent): boolean
    +isAnyCellFocused(): boolean
    +isRowFocused(rowIndex: number, floating?: string): boolean
    +findFocusableElements(rootNode: HTMLElement, exclude?: string, onlyUnmanaged?: boolean): HTMLElement[]
    +focusInto(rootNode: HTMLElement, up?: boolean, onlyUnmanaged?: boolean): boolean
    +findNextFocusableElement(rootNode: HTMLElement, onlyManaged?: boolean, backwards?: boolean): HTMLElement
    +isFocusUnderManagedComponent(rootNode: HTMLElement): boolean
    +findTabbableParent(node: HTMLElement, limit?: number): HTMLElement
    -onCellFocused(forceBrowserFocus: boolean): void
    +focusGridView(column?: Column, backwards?: boolean): boolean
    +focusNextGridCoreContainer(backwards: boolean): boolean
    +{static} AG_KEYBOARD_FOCUS: string
    -{static} keyboardModeActive: boolean
    -{static} instancesMonitored: any
    -{static} addKeyboardModeEvents(doc: Document, gridCore: GridCore): void
    -{static} removeKeyboardModeEvents(doc: Document, gridCore: GridCore): void
    -{static} toggleKeyboardMode(event: KeyboardEvent | MouseEvent | TouchEvent): void
}
class ManagedFocusComponent extends Component {
    #handleKeyDown(e: KeyboardEvent): void
    -topTabGuard: HTMLElement
    -bottomTabGuard: HTMLElement
    -skipTabGuardFocus: boolean
    #focusController: FocusController
    -isFocusableContainer: boolean
    #postConstruct(): void
    #focusInnerElement(fromBottom?: boolean): void
    #onTabKeyDown(e: KeyboardEvent): void
    #onFocusIn(e: FocusEvent): void
    #onFocusOut(e: FocusEvent): void
    +forceFocusOutOfContainer(up?: boolean): void
    +appendChild(newChild: HTMLElement | Component, container?: HTMLElement): void
    -createTabGuard(side: "top" | "bottom"): HTMLElement
    -addTabGuards(): void
    -forEachTabGuard(callback: (tabGuard: HTMLElement) => void): void
    -addKeyDownListeners(eGui: HTMLElement): void
    #shouldStopEventPropagation(e: KeyboardEvent): boolean
    -onFocus(e: FocusEvent): void
    -activateTabGuards(): void
    -deactivateTabGuards(): void
    -tabGuardsAreActive(): boolean
    #clearGui(): void
    +{static} FOCUS_MANAGED_CLASS: string
}
class GridCore extends ManagedFocusComponent {
    -gridOptions: GridOptions
    -rowModel: IRowModel
    -resizeObserverService: ResizeObserverService
    -rowRenderer: RowRenderer
    -filterManager: FilterManager
    -eGridDiv: HTMLElement
    -$scope: any
    -quickFilterOnScope: string
    -popupService: PopupService
    -columnController: ColumnController
    +loggerFactory: LoggerFactory
    -columnApi: ColumnApi
    -gridApi: GridApi
    -clipboardService: IClipboardService
    -gridPanel: GridPanel
    -sideBarComp: ISideBar & Component
    -eRootWrapperBody: HTMLElement
    -doingVirtualPaging: boolean
    -logger: Logger
    #postConstruct(): void
    +getFocusableElement(): HTMLElement
    -createTemplate(): string
    #getFocusableContainers(): HTMLElement[]
    +focusNextInnerContainer(backwards: boolean): boolean
    +focusInnerElement(fromBottom?: boolean): boolean
    -focusGridHeader(): boolean
    -onGridSizeChanged(): void
    -addRtlSupport(): void
    +getRootGui(): HTMLElement
    +isSideBarVisible(): boolean
    +setSideBarVisible(show: boolean): void
    +setSideBarPosition(position: "right" | "left"): void
    +closeToolPanel(): void
    +getSideBar(): SideBarDef
    +getToolPanelInstance(key: string): IToolPanel
    +refreshSideBar(): void
    +setSideBar(def: string | boolean | SideBarDef): void
    +getOpenedToolPanel(): string
    +openToolPanel(key: string): void
    +isToolPanelShowing(): boolean
    #destroy(): void
    +ensureNodeVisible(comparator: any, position?: string): void
    #onTabKeyDown(): void
}
interface PopupEventParams {
    +originalMouseEvent?: MouseEvent | Touch
    +mouseEvent?: MouseEvent
    +touchEvent?: TouchEvent
    +keyboardEvent?: KeyboardEvent
}
interface AgPopup {
    +element: HTMLElement
    +hideFunc: () => void
    +stopAnchoringFunc?: () => void
}
interface Rect {
    +top: number
    +left: number
    +right: number
    +bottom: number
}
interface AfterGuiAttachedParams {
    +hidePopup: () => void
}
interface AddPopupParams {
    +modal?: boolean
    +eChild: any
    +closeOnEsc?: boolean
    +closedCallback?: (e?: MouseEvent | TouchEvent | KeyboardEvent) => void
    +click?: MouseEvent | Touch
    +alwaysOnTop?: boolean
    +afterGuiAttached?: (params: AfterGuiAttachedParams) => void
    +positionCallback?: () => void
    +anchorToElement?: HTMLElement
}
interface AddPopupResult {
    +hideFunc: () => void
    +stopAnchoringFunc?: () => void
}
class PopupService extends BeanStub {
    -environment: Environment
    -focusController: FocusController
    -gridCore: GridCore
    -popupList: AgPopup[]
    +registerGridCore(gridCore: GridCore): void
    +getPopupParent(): HTMLElement
    +positionPopupForMenu(params: { eventSource: HTMLElement; ePopup: HTMLElement; }): void
    +positionPopupUnderMouseEvent(params: { rowNode?: RowNode; column?: Column; type: string; mouseEvent: MouseEvent | Touch; nudgeX?: number; nudgeY?: number; ePopup: HTMLElement; }): void
    -calculatePointerAlign(e: MouseEvent | Touch): { x: number; y: number; }
    +positionPopupUnderComponent(params: { type: string; eventSource: HTMLElement; ePopup: HTMLElement; column?: Column; rowNode?: RowNode; minWidth?: number; minHeight?: number; nudgeX?: number; nudgeY?: number; alignSide?: 'left' | 'right'; keepWithinBounds?: boolean; }): void
    +positionPopupOverComponent(params: { type: string; eventSource: HTMLElement; ePopup: HTMLElement; column: Column; rowNode: RowNode; minWidth?: number; nudgeX?: number; nudgeY?: number; keepWithinBounds?: boolean; }): void
    -callPostProcessPopup(type: string, ePopup: HTMLElement, eventSource?: HTMLElement, mouseEvent?: MouseEvent | Touch, column?: Column, rowNode?: RowNode): void
    +positionPopup(params: { ePopup: HTMLElement; minWidth?: number; minHeight?: number; nudgeX?: number; nudgeY?: number; x: number; y: number; keepWithinBounds?: boolean; }): void
    +getActivePopups(): HTMLElement[]
    -getParentRect(): Rect
    -keepYWithinBounds(params: { ePopup: HTMLElement; minHeight?: number; }, y: number): number
    -keepXWithinBounds(params: { minWidth?: number; ePopup: HTMLElement; }, x: number): number
    -keepPopupPositionedRelativeTo(params: { ePopup: HTMLElement; element: HTMLElement; hidePopup: () => void; }): () => void
    +addPopup(params: AddPopupParams): AddPopupResult
    -isEventFromCurrentPopup(params: PopupEventParams, target: HTMLElement): boolean
    +isElementWithinCustomPopup(el: HTMLElement): boolean
    -isEventSameChainAsOriginalEvent(params: PopupEventParams): boolean
    -getWrapper(ePopup: HTMLElement): HTMLElement
    +setAlwaysOnTop(ePopup: HTMLElement, alwaysOnTop?: boolean): void
    +bringPopupToFront(ePopup: HTMLElement): void
}
interface IFilterLocaleText {
    +applyFilter: string
    +clearFilter: string
    +resetFilter: string
    +cancelFilter: string
    +filterOoo: string
    +empty: string
    +equals: string
    +notEqual: string
    +lessThan: string
    +greaterThan: string
    +inRange: string
    +inRangeStart: string
    +inRangeEnd: string
    +lessThanOrEqual: string
    +greaterThanOrEqual: string
    +contains: string
    +notContains: string
    +startsWith: string
    +endsWith: string
    +andCondition: string
    +orCondition: string
    +dateFormatOoo: string
}
interface IFilterTitleLocaleText {
    +textFilter: string
    +numberFilter: string
    +dateFilter: string
    +setFilter: string
}
interface IProvidedFilterParams extends IFilterParams {
    +clearButton?: boolean
    +resetButton?: boolean
    +applyButton?: boolean
    +buttons?: FilterButtonType[]
    +closeOnApply?: boolean
    +newRowsAction?: string
    +debounceMs?: number
}
abstract class ProvidedFilter<T> extends ManagedFocusComponent implements IFilterComp {
    -newRowsActionKeep: boolean
    -providedFilterParams: IProvidedFilterParams
    -applyActive: boolean
    -hidePopup: (params: PopupEventParams) => void
    -onBtApplyDebounce: () => void
    -appliedModel: T
    #rowModel: IRowModel
    -filterNameKey: keyof IFilterTitleLocaleText
    +{abstract} doesFilterPass(params: IDoesFilterPassParams): boolean
    #{abstract} updateUiVisibility(): void
    #{abstract} createBodyTemplate(): string
    #{abstract} getCssIdentifier(): string
    #{abstract} resetUiToDefaults(silent?: boolean): AgPromise<void>
    #{abstract} setModelIntoUi(model: T): AgPromise<void>
    #{abstract} areModelsEqual(a: T, b: T): boolean
    #{abstract} getFilterType(): string
    +{abstract} getModelFromUi(): T
    +getFilterTitle(): string
    +onFilterChanged(): void
    +isFilterActive(): boolean
    #postConstruct(): void
    #resetTemplate(paramsMap?: any): void
    +init(params: IProvidedFilterParams): void
    #setParams(params: IProvidedFilterParams): void
    -createButtonPanel(): void
    #getDefaultDebounceMs(): number
    -setupOnBtApplyDebounce(): void
    +getModel(): T
    +setModel(model: T): AgPromise<void>
    -onBtCancel(e: Event): void
    -onBtClear(): void
    -onBtReset(): void
    +applyModel(): boolean
    #isModelValid(model: T): boolean
    #onBtApply(afterFloatingFilter?: boolean, afterDataChange?: boolean, e?: Event): void
    +onNewRowsLoaded(): void
    +close(e?: Event): void
    #isNewRowsActionKeep(): boolean
    #onUiChanged(fromFloatingFilter?: boolean, apply?: "immediately" | "debounce" | "prevent"): void
    +afterGuiAttached(params?: IAfterGuiAttachedParams): void
    +destroy(): void
    #translate(key: keyof IFilterTitleLocaleText | keyof IFilterLocaleText): string
    -{static} checkForDeprecatedParams(params: IProvidedFilterParams): void
    +{static} getDebounceMs(params: IProvidedFilterParams, debounceDefault: number): number
    +{static} isUseApplyButton(params: IProvidedFilterParams): boolean
}
abstract class AgPickerField<TElement extends HTMLElement, TValue> extends AgAbstractField {
    +{abstract} showPicker(): Component
    #value: TValue
    #isPickerDisplayed: boolean
    #isDestroyingPicker: boolean
    -skipClick: boolean
    -pickerComponent: Component
    #eLabel: HTMLElement
    #eWrapper: HTMLElement
    #eDisplayField: TElement
    -eIcon: HTMLButtonElement
    -pickerIcon?: string
    #postConstruct(): void
    #refreshLabel(): void
    +setAriaLabel(label: string): this
    +setInputWidth(width: number | "flex"): this
    +getFocusableElement(): HTMLElement
}
interface ListOption {
    +value: string
    +text?: string
}
class AgList extends Component {
    -options: ListOption[]
    -itemEls: HTMLElement[]
    -highlightedEl: HTMLElement
    -value: string
    -displayValue: string
    -cssIdentifier: string
    -init(): void
    -handleKeyDown(e: KeyboardEvent): void
    +addOptions(listOptions: ListOption[]): this
    +addOption(listOption: ListOption): this
    -renderOption(value: string, text: string): void
    +setValue(value?: string, silent?: boolean): this
    +setValueByIndex(idx: number): this
    +getValue(): string
    +getDisplayValue(): string
    +refreshHighlighted(): void
    -reset(): void
    -highlightItem(el: HTMLElement): void
    -clearHighlighted(): void
    -fireChangeEvent(): void
    -fireItemSelected(): void
    +{static} EVENT_ITEM_SELECTED: string
    -{static} ACTIVE_CLASS: string
}
class AgSelect extends AgPickerField {
    #listComponent: AgList
    -hideList: (event?: any) => void
    -popupService: PopupService
    +init(): void
    +showPicker(): AgList
    +addOptions(options: ListOption[]): this
    +addOption(option: ListOption): this
    +setValue(value?: string, silent?: boolean, fromPicker?: boolean): this
    #destroy(): void
}
class AgRadioButton extends AgCheckbox {
    #isSelected(): boolean
    +toggle(): void
    #addInputListeners(): void
    -onChange(event: CheckboxChangedEvent): void
}
interface ISimpleFilterParams extends IProvidedFilterParams {
    +filterOptions?: (string | IFilterOptionDef)[]
    +defaultOption?: string
    +defaultJoinOperator?: JoinOperator
    +suppressAndOrCondition?: boolean
    +alwaysShowBothConditions?: boolean
}
interface ISimpleFilterModel extends ProvidedFilterModel {
    +type?: string
}
interface ICombinedSimpleModel<M extends ISimpleFilterModel> extends ProvidedFilterModel {
    +operator: JoinOperator
    +condition1: M
    +condition2: M
}
enum ConditionPosition {
    One
    Two
}
abstract class SimpleFilter<M extends ISimpleFilterModel> extends ProvidedFilter {
    #eType1: AgSelect
    #eType2: AgSelect
    #eJoinOperatorPanel: HTMLElement
    #eJoinOperatorAnd: AgRadioButton
    #eJoinOperatorOr: AgRadioButton
    #eCondition1Body: HTMLElement
    #eCondition2Body: HTMLElement
    -allowTwoConditions: boolean
    -alwaysShowBothConditions: boolean
    -defaultJoinOperator: JoinOperator
    #optionsFactory: OptionsFactory
    #{abstract} getDefaultFilterOptions(): string[]
    #{abstract} createValueTemplate(position: ConditionPosition): string
    #{abstract} individualConditionPasses(params: IDoesFilterPassParams, type: ISimpleFilterModel): boolean
    #{abstract} isConditionUiComplete(position: ConditionPosition): boolean
    #{abstract} areSimpleModelsEqual(a: ISimpleFilterModel, b: ISimpleFilterModel): boolean
    #{abstract} setValueFromFloatingFilter(value: string): void
    #{abstract} createCondition(position: ConditionPosition): M
    #{abstract} setConditionIntoUi(model: ISimpleFilterModel, position: ConditionPosition): void
    #showValueFrom(type?: string): boolean
    #showValueTo(type?: string): boolean
    +onFloatingFilterChanged(type: string, value: any): void
    #setTypeFromFloatingFilter(type?: string): void
    +getModelFromUi(): M | ICombinedSimpleModel<M>
    #getCondition1Type(): string
    #getCondition2Type(): string
    #getJoinOperator(): JoinOperator
    #areModelsEqual(a: M | ICombinedSimpleModel<M>, b: M | ICombinedSimpleModel<M>): boolean
    #setModelIntoUi(model: ISimpleFilterModel | ICombinedSimpleModel<M>): AgPromise<void>
    +doesFilterPass(params: IDoesFilterPassParams): boolean
    #setParams(params: ISimpleFilterParams): void
    -getDefaultJoinOperator(defaultJoinOperator?: JoinOperator): JoinOperator
    -putOptionsIntoDropdown(): void
    +isAllowTwoConditions(): boolean
    #createBodyTemplate(): string
    #getCssIdentifier(): string
    #updateUiVisibility(): void
    #isCondition2Enabled(): boolean
    #resetUiToDefaults(silent?: boolean): AgPromise<void>
    -isDefaultOperator(operator: JoinOperator): boolean
    -addChangedListeners(): void
    #doesFilterHaveHiddenInput(filterType?: string): boolean
    +{static} EMPTY: string
    +{static} EQUALS: string
    +{static} NOT_EQUAL: string
    +{static} LESS_THAN: string
    +{static} LESS_THAN_OR_EQUAL: string
    +{static} GREATER_THAN: string
    +{static} GREATER_THAN_OR_EQUAL: string
    +{static} IN_RANGE: string
    +{static} CONTAINS: string
    +{static} NOT_CONTAINS: string
    +{static} STARTS_WITH: string
    +{static} ENDS_WITH: string
}
interface DateFilterModel extends ISimpleFilterModel {
    +dateFrom: string
    +dateTo: string
}
interface IDateFilterParams extends IScalarFilterParams {
    +comparator?: IDateComparatorFunc
    +browserDatePicker?: boolean
    +minValidYear?: number
}
interface IDateComparatorFunc
class DateFilter extends ScalarFilter {
    -eCondition1PanelFrom: HTMLElement
    -eCondition1PanelTo: HTMLElement
    -eCondition2PanelFrom: HTMLElement
    -eCondition2PanelTo: HTMLElement
    -dateCondition1FromComp: DateCompWrapper
    -dateCondition1ToComp: DateCompWrapper
    -dateCondition2FromComp: DateCompWrapper
    -dateCondition2ToComp: DateCompWrapper
    -userComponentFactory: UserComponentFactory
    -dateFilterParams: IDateFilterParams
    +afterGuiAttached(params?: IAfterGuiAttachedParams): void
    #mapRangeFromModel(filterModel: DateFilterModel): { from: Date | null; to: Date | null; }
    #setValueFromFloatingFilter(value: string): void
    #setConditionIntoUi(model: DateFilterModel, position: ConditionPosition): void
    #resetUiToDefaults(silent?: boolean): AgPromise<void>
    #comparator(): Comparator<Date>
    -defaultComparator(filterDate: Date, cellValue: any): number
    #setParams(params: IDateFilterParams): void
    -createDateComponents(): void
    #getDefaultFilterOptions(): string[]
    #createValueTemplate(position: ConditionPosition): string
    #isConditionUiComplete(position: ConditionPosition): boolean
    #areSimpleModelsEqual(aSimple: DateFilterModel, bSimple: DateFilterModel): boolean
    #getFilterType(): string
    #createCondition(position: ConditionPosition): DateFilterModel
    -resetPlaceholder(): void
    #updateUiVisibility(): void
    -getFromToComponents(position: ConditionPosition): [DateCompWrapper, DateCompWrapper]
    +{static} DEFAULT_FILTER_OPTIONS: string[]
}
interface GroupCellRendererParams extends ICellRendererParams {
    +pinned: string
    +fullWidth: boolean
    +suppressPadding: boolean
    +suppressDoubleClickExpand: boolean
    +suppressEnterExpand: boolean
    +footerValueGetter: any
    +suppressCount: boolean
    +checkbox: any
    +innerRenderer?: string | (new () => ICellRendererComp) | ICellRendererFunc
    +innerRendererFramework?: any
    +innerRendererParams?: any
    +scope: any
    +padding: number
}
class GroupCellRenderer extends Component implements ICellRendererComp {
    -expressionService: ExpressionService
    -valueFormatterService: ValueFormatterService
    -columnController: ColumnController
    -userComponentFactory: UserComponentFactory
    -eExpanded: HTMLElement
    -eContracted: HTMLElement
    -eCheckbox: HTMLElement
    -eValue: HTMLElement
    -eChildCount: HTMLElement
    -params: GroupCellRendererParams
    -draggedFromHideOpenParents: boolean
    -displayedGroup: RowNode
    -cellIsBlank: boolean
    -indentClass: string
    -innerCellRenderer: ICellRendererComp
    +init(params: GroupCellRendererParams): void
    -assignBlankValueToGroupFooterCell(params: GroupCellRendererParams): void
    -isEmbeddedRowMismatch(): boolean
    -setIndent(): void
    -setPaddingDeprecatedWay(paddingCount: number, padding: number): void
    -setupIndent(): void
    -addValueElement(): void
    -addFooterValue(): void
    -addGroupValue(): void
    -useInnerRenderer(groupCellRendererParams: GroupCellRendererParams, groupedColumnDef: ColDef, params: ICellRendererParams): AgPromise<ICellRendererComp>
    -useFullWidth(params: ICellRendererParams): AgPromise<ICellRendererComp>
    -addChildCount(): void
    -updateChildCount(): void
    -isUserWantsSelected(): boolean
    -addCheckboxIfNeeded(): void
    -addExpandAndContract(): void
    -onRowNodeIsExpandableChanged(): void
    -onKeyDown(event: KeyboardEvent): void
    -setupDragOpenParents(): void
    +onExpandClicked(mouseEvent: MouseEvent): void
    +onCellDblClicked(mouseEvent: MouseEvent): void
    +onExpandOrContract(): void
    -isShowRowGroupForThisRow(): boolean
    -isExpandable(): boolean
    -showExpandAndContractIcons(): void
    +destroy(): void
    +refresh(): boolean
    -{static} TEMPLATE: string
}
class AnimateShowChangeCellRenderer extends Component implements ICellRenderer {
    -lastValue: number
    -eValue: HTMLElement
    -eDelta: HTMLElement
    -refreshCount: number
    -filterManager: FilterManager
    +init(params: any): void
    -showDelta(params: any, delta: number): void
    -setTimerToRemoveDelta(): void
    -hideDeltaValue(): void
    +refresh(params: any): boolean
    -{static} TEMPLATE: string
}
class AnimateSlideCellRenderer extends Component implements ICellRenderer {
    -params: any
    -eCurrent: HTMLElement
    -ePrevious: HTMLElement
    -lastValue: any
    -refreshCount: number
    -filterManager: FilterManager
    +init(params: any): void
    +addSlideAnimation(): void
    +refresh(params: any): boolean
    -{static} TEMPLATE: string
}
interface ILoadingCellRendererParams extends ICellRendererParams
interface ILoadingCellRenderer extends ICellRenderer
class LoadingCellRenderer extends Component implements ILoadingCellRenderer {
    -eLoadingIcon: HTMLElement
    -eLoadingText: HTMLElement
    +init(params: ILoadingCellRendererParams): void
    -setupFailed(): void
    -setupLoading(): void
    +refresh(params: any): boolean
    -{static} TEMPLATE: string
}
interface ISelectCellEditorParams extends ICellEditorParams {
    +values: any[]
}
class SelectCellEditor extends PopupComponent implements ICellEditorComp {
    -focusAfterAttached: boolean
    -valueFormatterService: ValueFormatterService
    -eSelect: AgSelect
    -startedByEnter: boolean
    +init(params: ISelectCellEditorParams): void
    +afterGuiAttached(): void
    +focusIn(): void
    +getValue(): any
    +isPopup(): boolean
}
class PopupTextCellEditor extends TextCellEditor {
    +isPopup(): boolean
}
class PopupSelectCellEditor extends SelectCellEditor {
    +isPopup(): boolean
}
class AgInputTextArea extends AgAbstractInputField {
    +setValue(value: string, silent?: boolean): this
    +setCols(cols: number): this
    +setRows(rows: number): this
}
interface ILargeTextEditorParams extends ICellEditorParams {
    +maxLength: number
    +rows: number
    +cols: number
}
class LargeTextCellEditor extends PopupComponent implements ICellEditorComp {
    -params: ILargeTextEditorParams
    -eTextArea: AgInputTextArea
    -focusAfterAttached: boolean
    +init(params: ILargeTextEditorParams): void
    -onKeyDown(event: KeyboardEvent): void
    +afterGuiAttached(): void
    +getValue(): any
    -{static} TEMPLATE: string
}
interface NumberFilterModel extends ISimpleFilterModel {
    +filter?: number
    +filterTo?: number
}
interface INumberFilterParams extends IScalarFilterParams {
    +allowedCharPattern?: string
    +numberParser?: (text: string | null) => number
}
class NumberFilter extends ScalarFilter {
    -eValueFrom1: AgInputTextField
    -eValueTo1: AgInputTextField
    -eValueFrom2: AgInputTextField
    -eValueTo2: AgInputTextField
    -numberFilterParams: INumberFilterParams
    #mapRangeFromModel(filterModel: NumberFilterModel): { from: number | null | undefined; to: number | null | undefined; }
    #getDefaultDebounceMs(): number
    #resetUiToDefaults(silent?: boolean): AgPromise<void>
    #setConditionIntoUi(model: NumberFilterModel, position: ConditionPosition): void
    #setValueFromFloatingFilter(value: string): void
    #comparator(): Comparator<number>
    #setParams(params: INumberFilterParams): void
    -addValueChangedListeners(): void
    -resetPlaceholder(): void
    +afterGuiAttached(params?: IAfterGuiAttachedParams): void
    #getDefaultFilterOptions(): string[]
    #createValueTemplate(position: ConditionPosition): string
    #isConditionUiComplete(position: ConditionPosition): boolean
    #areSimpleModelsEqual(aSimple: NumberFilterModel, bSimple: NumberFilterModel): boolean
    #getFilterType(): string
    -stringToFloat(value?: string | number): number
    #createCondition(position: ConditionPosition): NumberFilterModel
    #updateUiVisibility(): void
    -getAllowedCharPattern(): string
    +{static} DEFAULT_FILTER_OPTIONS: string[]
}
interface ILoadingOverlayParams
interface ILoadingOverlayComp extends IComponent
class LoadingOverlayComponent extends Component implements ILoadingOverlayComp {
    +destroy(): void
    +init(params: ILoadingOverlayParams): void
    -{static} DEFAULT_LOADING_OVERLAY_TEMPLATE: string
}
interface INoRowsOverlayParams
interface INoRowsOverlayComp extends IComponent
class NoRowsOverlayComponent extends Component implements INoRowsOverlayComp {
    +destroy(): void
    +init(params: INoRowsOverlayParams): void
    -{static} DEFAULT_NO_ROWS_TEMPLATE: string
}
class DefaultDateComponent extends Component implements IDateComp {
    -eDateInput: AgInputTextField
    +destroy(): void
    +init(params: IDateParams): void
    +getDate(): Date
    +setDate(date: Date): void
    +setInputPlaceholder(placeholder: string): void
    +afterGuiAttached(params?: IAfterGuiAttachedParams): void
    -shouldUseBrowserDatePicker(params: IDateParams): boolean
}
abstract class SimpleFloatingFilter extends Component implements IFloatingFilterComp {
    +{abstract} onParentModelChanged(model: ProvidedFilterModel, event: FilterChangedEvent): void
    #{abstract} conditionToString(condition: ProvidedFilterModel): string
    #{abstract} getDefaultFilterOptions(): string[]
    #{abstract} setEditable(editable: boolean): void
    -lastType: string
    -optionsFactory: OptionsFactory
    #getDefaultDebounceMs(): number
    +destroy(): void
    #getTextFromModel(model: ProvidedFilterModel): string
    #isEventFromFloatingFilter(event: FilterChangedEvent): boolean
    #getLastType(): string
    #setLastTypeFromModel(model: ProvidedFilterModel): void
    #canWeEditAfterModelFromParentFilter(model: ProvidedFilterModel): boolean
    +init(params: IFloatingFilterParams): void
    -doesFilterHaveHiddenInput(filterType: string): boolean
    -isTypeEditable(type?: string): boolean
}
class DateFloatingFilter extends SimpleFloatingFilter {
    -userComponentFactory: UserComponentFactory
    -eReadOnlyText: AgInputTextField
    -eDateWrapper: HTMLInputElement
    -dateComp: DateCompWrapper
    -params: IFloatingFilterParams
    #getDefaultFilterOptions(): string[]
    #conditionToString(condition: DateFilterModel): string
    +init(params: IFloatingFilterParams): void
    #setEditable(editable: boolean): void
    +onParentModelChanged(model: ISimpleFilterModel, event: FilterChangedEvent): void
    -onDateChanged(): void
    -createDateComponent(): void
}
interface TextFilterModel extends ISimpleFilterModel {
    +filter?: string
}
interface TextComparator
interface TextFormatter
interface ITextFilterParams extends ISimpleFilterParams {
    +textCustomComparator?: TextComparator
    +caseSensitive?: boolean
    +textFormatter?: (from: string) => string
    +trimInput?: boolean
}
class TextFilter extends SimpleFilter {
    -eValue1: AgInputTextField
    -eValue2: AgInputTextField
    -comparator: TextComparator
    -formatter: TextFormatter
    -textFilterParams: ITextFilterParams
    #getDefaultDebounceMs(): number
    -getCleanValue(inputField: AgInputTextField): string
    -addValueChangedListeners(): void
    #setParams(params: ITextFilterParams): void
    #setConditionIntoUi(model: TextFilterModel, position: ConditionPosition): void
    #createCondition(position: ConditionPosition): TextFilterModel
    #getFilterType(): string
    #areSimpleModelsEqual(aSimple: TextFilterModel, bSimple: TextFilterModel): boolean
    #resetUiToDefaults(silent?: boolean): AgPromise<void>
    -resetPlaceholder(): void
    -forEachInput(action: (field: AgInputTextField) => void): void
    #setValueFromFloatingFilter(value: string): void
    #getDefaultFilterOptions(): string[]
    #createValueTemplate(position: ConditionPosition): string
    #updateUiVisibility(): void
    +afterGuiAttached(params?: IAfterGuiAttachedParams): void
    #isConditionUiComplete(position: ConditionPosition): boolean
    #individualConditionPasses(params: IDoesFilterPassParams, filterModel: TextFilterModel): boolean
    +{static} DEFAULT_FILTER_OPTIONS: string[]
    +{static} DEFAULT_FORMATTER: TextFormatter
    +{static} DEFAULT_LOWERCASE_FORMATTER: TextFormatter
    +{static} DEFAULT_COMPARATOR: TextComparator
    +{static} trimInput(value?: string): string
}
abstract class TextInputFloatingFilter extends SimpleFloatingFilter {
    -columnController: ColumnController
    -eFloatingFilterInput: AgInputTextField
    #params: IFloatingFilterParams
    -applyActive: boolean
    -postConstruct(): void
    #getDefaultDebounceMs(): number
    +onParentModelChanged(model: ProvidedFilterModel, event: FilterChangedEvent): void
    +init(params: IFloatingFilterParams): void
    -syncUpWithParentFilter(e: KeyboardEvent): void
    #setEditable(editable: boolean): void
}
class NumberFloatingFilter extends TextInputFloatingFilter {
    #getDefaultFilterOptions(): string[]
    #conditionToString(condition: NumberFilterModel): string
}
class TextFloatingFilter extends TextInputFloatingFilter {
    #conditionToString(condition: TextFilterModel): string
    #getDefaultFilterOptions(): string[]
}
enum RegisteredComponentSource {
    DEFAULT
    REGISTERED
}
interface RegisteredComponent<A extends IComponent<any> & B, B> {
    +component: RegisteredComponentInput<A, B>
    +componentFromFramework: boolean
    +source: RegisteredComponentSource
}
interface DeprecatedComponentName {
    +propertyHolder: string
    +newComponentName: string
}
class UserComponentRegistry extends BeanStub {
    -gridOptions: GridOptions
    -agGridDefaults: { [key: string]: AgGridRegisteredComponentInput<any>; }
    -agDeprecatedNames: { [key: string]: DeprecatedComponentName; }
    -jsComponents: { [key: string]: AgGridRegisteredComponentInput<any>; }
    -frameworkComponents: { [key: string]: new () => any; }
    -init(): void
    +registerDefaultComponent(rawName: string, component: AgGridRegisteredComponentInput<A>): void
    +registerComponent(rawName: string, component: AgGridRegisteredComponentInput<A>): void
    +registerFwComponent(rawName: string, component: new () => IComponent<B>): void
    +retrieve(rawName: string): RegisteredComponent<A, B>
    -translateIfDeprecated(raw: string): string
}
interface ComponentMetadata {
    +mandatoryMethodList: string[]
    +optionalMethodList: string[]
    +functionAdapter?: (callback: AgGridComponentFunctionInput) => {    new (): IComponent<any>;}
}
class ComponentMetadataProvider extends BeanStub {
    -componentMetaData: { [key: string]: ComponentMetadata; }
    -agComponentUtils: AgComponentUtils
    +postConstruct(): void
    +retrieve(name: string): ComponentMetadata
}
class AgComponentUtils extends BeanStub {
    -componentMetadataProvider: ComponentMetadataProvider
    +adaptFunction(propertyName: string, hardcodedJsFunction: AgGridComponentFunctionInput, componentFromFramework: boolean, source: ComponentSource): ComponentClassDef<A, B, TParams>
    +adaptCellRendererFunction(callback: AgGridComponentFunctionInput): new () => IComponent<ICellRendererParams>
    +doesImplementIComponent(candidate: AgGridRegisteredComponentInput<IComponent<any>>): boolean
}
interface SetFilterValuesFuncParams {
    +success: (values: string[]) => void
    +colDef: ColDef
}
interface ISetFilterParams extends IProvidedFilterParams {
    +suppressRemoveEntries?: boolean
    +values?: SetFilterValues
    +refreshValuesOnOpen?: boolean
    +cellHeight?: number
    +suppressSorting?: boolean
    +cellRenderer?: string | ICellRendererFunc | (new () => ICellRendererComp)
    +suppressMiniFilter?: boolean
    +applyMiniFilterWhileTyping?: boolean
    +suppressSelectAll?: boolean
    +defaultToNothingSelected?: boolean
    +suppressSyncValuesAfterDataChange?: boolean
    +comparator?: (a: any, b: any) => number
    +textFormatter?: (from: string) => string
    +valueFormatter?: (params: ValueFormatterParams) => string
    +selectAllOnMiniFilter?: boolean
    +syncValuesLikeExcel?: boolean
    +showTooltips?: boolean
    +excelMode?: "mac" | "windows"
}
interface IRichCellEditorParams extends ICellEditorParams {
    +values: CellValue[]
    +cellHeight: number
    +cellRenderer: string | ICellRendererFunc | (new () => ICellRendererComp)
    +searchDebounceDelay?: number
}
interface StatusPanelDef {
    +statusPanel?: string | (new () => IStatusPanelComp)
    +statusPanelFramework?: any
    +align?: string
    +key?: string
    +statusPanelParams?: any
}
interface IStatusPanelParams {
    +api: GridApi
    +columnApi: ColumnApi
    +context: any
}
interface IStatusPanel
interface IStatusPanelComp extends IStatusPanel
enum ComponentSource {
    DEFAULT
    REGISTERED_BY_NAME
    HARDCODED
}
interface ComponentSelectorResult {
    +component?: string
    +params?: any
}
interface ComponentClassDef<A extends IComponent<TParams> & B, B, TParams> {
    +component: (new () => A) | (new () => B)
    +componentFromFramework: boolean
    +source: ComponentSource
    +paramsFromSelector: TParams
}
class UserComponentFactory extends BeanStub {
    -gridOptions: GridOptions
    -agComponentUtils: AgComponentUtils
    -componentMetadataProvider: ComponentMetadataProvider
    -userComponentRegistry: UserComponentRegistry
    -frameworkComponentWrapper: FrameworkComponentWrapper
    +newDateComponent(params: IDateParams): AgPromise<IDateComp>
    +newHeaderComponent(params: IHeaderParams): AgPromise<IHeaderComp>
    +newHeaderGroupComponent(params: IHeaderGroupParams): AgPromise<IHeaderGroupComp>
    +newFullWidthGroupRowInnerCellRenderer(params: ICellRendererParams): AgPromise<ICellRendererComp>
    +newFullWidthCellRenderer(params: ICellRendererParams, cellRendererType: string, cellRendererName: string): AgPromise<ICellRendererComp>
    +newCellRenderer(target: ColDef | IRichCellEditorParams, params: ICellRendererParams, isPinned?: boolean): AgPromise<ICellRendererComp>
    +newCellEditor(colDef: ColDef, params: ICellEditorParams): AgPromise<ICellEditorComp>
    +newInnerCellRenderer(target: GroupCellRendererParams, params: ICellRendererParams): AgPromise<ICellRendererComp>
    +newLoadingOverlayComponent(params: ILoadingOverlayParams): AgPromise<ILoadingOverlayComp>
    +newNoRowsOverlayComponent(params: INoRowsOverlayParams): AgPromise<INoRowsOverlayComp>
    +newTooltipComponent(params: ITooltipParams): AgPromise<ITooltipComp>
    +newFilterComponent(def: IFilterDef, params: IFilterParams, defaultFilter: string): AgPromise<IFilterComp>
    +newSetFilterCellRenderer(target: ISetFilterParams, params: ISetFilterCellRendererParams): AgPromise<ICellRendererComp>
    +newFloatingFilterComponent(def: IFilterDef, params: IFloatingFilterParams, defaultFloatingFilter: string): AgPromise<IFloatingFilterComp>
    +newToolPanelComponent(toolPanelDef: ToolPanelDef, params: IToolPanelParams): AgPromise<IToolPanelComp>
    +newStatusPanelComponent(def: StatusPanelDef, params: IStatusPanelParams): AgPromise<IStatusPanelComp>
    +createAndInitUserComponent(definitionObject: DefinitionObject, paramsFromGrid: TParams, componentType: ComponentType, defaultComponentName?: string, optional?: boolean): AgPromise<A>
    -addReactHacks(params: any): void
    +createUserComponentFromConcreteClass(clazz: new () => A, agGridParams: TParams): A
    +lookupComponentClassDef(definitionObject: DefinitionObject, propertyName: string, params?: TParams, defaultComponentName?: string): ComponentClassDef<A, B, TParams>
    -lookupFromRegisteredComponents(propertyName: string, componentNameOpt?: string): ComponentClassDef<A, B, TParams>
    +createFinalParams(definitionObject: DefinitionObject, propertyName: string, paramsFromGrid: TParams, paramsFromSelector?: any): TParams
    -createComponentInstance(holder: DefinitionObject, componentType: ComponentType, paramsForSelector: TParams, defaultComponentName: string, optional: boolean): { componentInstance: A; paramsFromSelector: any; }
    -initComponent(component: A, params: TParams): void | AgPromise<void>
}
class FilterManager extends BeanStub {
    -$compile: any
    -$scope: any
    -valueService: ValueService
    -columnController: ColumnController
    -rowModel: IRowModel
    -columnApi: ColumnApi
    -gridApi: GridApi
    -userComponentFactory: UserComponentFactory
    -allAdvancedFilters: any
    -activeAdvancedFilters: IFilterComp[]
    -quickFilter: string
    -quickFilterParts: string[]
    -externalFilterPresent: boolean
    -processingFilterChange: boolean
    -allowShowChangeAfterFilter: boolean
    +init(): void
    -setQuickFilterParts(): void
    +setFilterModel(model: { [key: string]: any; }): void
    -setModelOnFilterWrapper(filterPromise: AgPromise<IFilterComp>, newModel: any): AgPromise<void>
    +getFilterModel(): { [key: string]: any; }
    +isAdvancedFilterPresent(): boolean
    -updateActiveFilters(): void
    -updateFilterFlagInColumns(source: ColumnEventType, additionalEventAttributes?: any): void
    +isAnyFilterPresent(): boolean
    -doAdvancedFiltersPass(node: RowNode, filterToSkip?: IFilterComp): boolean
    -parseQuickFilter(newFilter?: string): string
    +setQuickFilter(newFilter: any): void
    -checkExternalFilter(): void
    +onFilterChanged(filterInstance?: IFilterComp, additionalEventAttributes?: any): void
    +isSuppressFlashingCellsBecauseFiltering(): boolean
    +isQuickFilterPresent(): boolean
    +doesRowPassOtherFilters(filterToSkip: IFilterComp, node: any): boolean
    -doesRowPassQuickFilterNoCache(node: RowNode, filterPart: string): boolean
    -doesRowPassQuickFilterCache(node: RowNode, filterPart: string): boolean
    -doesRowPassQuickFilter(node: RowNode): boolean
    +doesRowPassFilter(params: { rowNode: RowNode; filterInstanceToSkip?: IFilterComp; }): boolean
    -getQuickFilterTextForColumn(column: Column, node: RowNode): string
    -aggregateRowForQuickFilter(node: RowNode): void
    -onNewRowsLoaded(source: ColumnEventType): void
    -createValueGetter(column: Column): (node: RowNode) => any
    +getFilterComponent(column: Column, source: FilterRequestSource, createIfDoesNotExist?: boolean): AgPromise<IFilterComp>
    +isFilterActive(column: Column): boolean
    +getOrCreateFilterWrapper(column: Column, source: FilterRequestSource): FilterWrapper
    +cachedFilter(column: Column): FilterWrapper
    -createFilterInstance(column: Column, $scope: any): AgPromise<IFilterComp>
    +createFilterParams(column: Column, colDef: ColDef, $scope?: any): IFilterParams
    -createFilterWrapper(column: Column, source: FilterRequestSource): FilterWrapper
    -putIntoGui(filterWrapper: FilterWrapper, source: FilterRequestSource): void
    -onNewColumnsLoaded(): void
    +destroyFilter(column: Column, source?: ColumnEventType): void
    -disposeFilterWrapper(filterWrapper: FilterWrapper, source: ColumnEventType): void
    #destroy(): void
    +{static} QUICK_FILTER_SEPARATOR: string
}
interface FilterWrapper {
    +compiledElement: any
    +column: Column
    +filterPromise: AgPromise<IFilterComp>
    +scope: any
    +guiPromise: AgPromise<HTMLElement>
}
enum ChartType {
    Column
    GroupedColumn
    StackedColumn
    NormalizedColumn
    Bar
    GroupedBar
    StackedBar
    NormalizedBar
    Line
    Scatter
    Bubble
    Pie
    Doughnut
    Area
    StackedArea
    NormalizedArea
    Histogram
}
interface SeriesOptions {
    +fill: FillOptions
    +stroke: StrokeOptions
    +highlightStyle: HighlightOptions
    +listeners?: { [x: string]: Function; }
}
interface ChartTooltip {
    +enabled?: boolean
    +class?: string
    +tracking?: boolean
    +delay?: number
}
interface ChartOptions<T extends SeriesOptions> {
    +document?: Document
    +seriesDefaults: T
    +width?: number
    +height?: number
    +padding: PaddingOptions
    +background: BackgroundOptions
    +title: CaptionOptions
    +subtitle: CaptionOptions
    +navigator: NavigatorOptions
    +legend: LegendOptions
    +tooltipClass?: string
    +tooltipTracking?: boolean
    +tooltip?: ChartTooltip
    +listeners?: { [x: string]: Function; }
}
interface PaddingOptions {
    +top: number
    +right: number
    +bottom: number
    +left: number
}
interface BackgroundOptions {
    +fill: string
    +visible: boolean
}
interface FontOptions {
    +fontStyle: FontStyle
    +fontWeight: FontWeight
    +fontSize: number
    +fontFamily: string
    +color: string
}
interface CaptionOptions extends FontOptions {
    +enabled: boolean
    +text?: string
}
interface LegendOptions {
    +enabled: boolean
    +position: LegendPosition
    +spacing: number
    +item: LegendItemOptions
}
enum LegendPosition {
    Top
    Right
    Bottom
    Left
}
interface LegendItemOptions {
    +label: LegendLabelOptions
    +marker: LegendMarkerOptions
    +paddingX: number
    +paddingY: number
}
interface LegendLabelOptions extends FontOptions
interface NavigatorOptions {
    +enabled: boolean
    +height: number
    +min: number
    +max: number
    +mask: NavigatorMaskOptions
    +minHandle: NavigatorHandleOptions
    +maxHandle: NavigatorHandleOptions
}
interface NavigatorMaskOptions {
    +fill: string
    +stroke: string
    +strokeWidth: number
    +fillOpacity: number
}
interface NavigatorHandleOptions {
    +fill: string
    +stroke: string
    +strokeWidth: number
    +width: number
    +height: number
    +gripLineGap: number
    +gripLineLength: number
}
interface LegendMarkerOptions {
    +shape: MarkerShape
    +size: number
    +padding: number
    +strokeWidth: number
}
interface CartesianChartOptions<T extends SeriesOptions> extends ChartOptions {
    +xAxis: AxisOptions
    +yAxis: AxisOptions
    +navigator: NavigatorOptions
}
interface PolarChartOptions<T extends SeriesOptions> extends ChartOptions
interface AxisOptions {
    +type?: AxisType
    +title: CaptionOptions
    +line: AxisLineOptions
    +tick: AxisTickOptions
    +label: AxisLabelOptions
    +gridStyle: GridStyle[]
}
interface AxisLineOptions {
    +width: number
    +color: string
}
interface AxisTickOptions {
    +width: number
    +size: number
    +color: string
}
interface AxisLabelOptions extends FontOptions {
    +padding: number
    +rotation: number
    +format?: string
    +formatter?: AxisLabelFormatter
}
interface GridStyle {
    +stroke: string
    +lineDash?: number[]
}
interface HighlightOptions {
    +fill: string
    +stroke?: string
}
interface FillOptions {
    +colors: string[]
    +opacity: number
}
interface StrokeOptions {
    +colors: string[]
    +opacity: number
    +width: number
}
interface DropShadowOptions {
    +enabled: boolean
    +color: string
    +xOffset: number
    +yOffset: number
    +blur: number
}
interface SeriesLabelOptions extends FontOptions {
    +enabled: boolean
}
interface TooltipRendererResult {
    +content: string
    +title?: string
}
interface TooltipOptions<TParams> {
    +enabled: boolean
    +renderer?: (params: TParams) => string | TooltipRendererResult
}
interface TooltipRendererParams {
    +datum: any
    +title?: string
    +color: string
}
interface CartesianTooltipRendererParams extends TooltipRendererParams {
    +xKey: string
    +xValue: any
    +xName: string
    +yKey: string
    +yValue: any
    +yName: string
}
interface BarSeriesOptions extends SeriesOptions {
    +shadow: DropShadowOptions
    +label: BarSeriesLabelOptions
    +tooltip: TooltipOptions<BarTooltipRendererParams>
    +lineDash: number[]
    +lineDashOffset: number
}
interface HistogramSeriesOptions extends BarSeriesOptions {
    +binCount?: number
}
interface BarSeriesLabelOptions extends SeriesLabelOptions {
    +formatter?: (params: {    value: number;}) => string
}
interface BarTooltipRendererParams extends CartesianTooltipRendererParams
interface LineSeriesOptions extends SeriesOptions {
    +marker: MarkerOptions
    +tooltip: TooltipOptions<LineTooltipRendererParams>
    +lineDash: number[]
    +lineDashOffset: number
}
interface MarkerOptions {
    +enabled: boolean
    +shape: MarkerShape
    +size: number
    +strokeWidth: number
    +formatter?: Function
}
interface LineTooltipRendererParams extends CartesianTooltipRendererParams
interface ScatterSeriesOptions extends SeriesOptions {
    +marker: ScatterMarkerOptions
    +tooltip: TooltipOptions<ScatterTooltipRendererParams>
    +paired: boolean
}
interface ScatterMarkerOptions extends MarkerOptions {
    +maxSize?: number
}
interface ScatterTooltipRendererParams extends CartesianTooltipRendererParams {
    +sizeKey?: string
    +sizeName?: string
    +labelKey?: string
    +labelName?: string
}
interface AreaSeriesOptions extends SeriesOptions {
    +marker: MarkerOptions
    +shadow: DropShadowOptions
    +tooltip: TooltipOptions<AreaTooltipRendererParams>
    +lineDash: number[]
    +lineDashOffset: number
}
interface AreaTooltipRendererParams extends CartesianTooltipRendererParams
interface PieSeriesOptions extends SeriesOptions {
    +title: CaptionOptions
    +label: PieSeriesLabelOptions
    +callout: PieSeriesCalloutOptions
    +shadow: DropShadowOptions
    +tooltip: TooltipOptions<PieTooltipRendererParams>
    +lineDash: number[]
    +lineDashOffset: number
}
interface PieSeriesLabelOptions extends SeriesLabelOptions {
    +minAngle: number
    +offset: number
}
interface PieSeriesCalloutOptions {
    +length: number
    +strokeWidth: number
    +colors: string[]
}
interface PieTooltipRendererParams extends TooltipRendererParams {
    +angleKey: string
    +angleValue: any
    +angleName?: string
    +labelKey?: string
    +labelName?: string
}
interface GetChartImageDataUrlParams {
    +type?: string
}
interface ChartModel {
    +modelType: ChartModelType
    +chartId: string
    +chartType: ChartType
    +cellRange: CellRangeParams
    +chartThemeName?: string
    +chartOptions: ChartOptions<any>
    +suppressChartRanges?: boolean
    +aggFunc?: string | IAggFunc
    +unlinkChart?: boolean
    +chart: any
    +getChartImageDataURL: (params: GetChartImageDataUrlParams) => string
}
interface IChartService {
    +getChartModels(): ChartModel[]
    +createRangeChart(params: CreateRangeChartParams): ChartRef
    +createCrossFilterChart(params: CreateCrossFilterChartParams): ChartRef
    +createChartFromCurrentRange(chartType: ChartType): ChartRef
    +createPivotChart(params: CreatePivotChartParams): ChartRef
    +restoreChart(model: ChartModel, chartContainer?: HTMLElement): ChartRef
}
interface ModelUpdatedEvent extends AgGridEvent {
    +animate: boolean
    +keepRenderedRows: boolean
    +newData: boolean
    +newPage: boolean
}
interface AgEvent {
    +type: string
}
interface AgGridEvent extends AgEvent {
    +api: GridApi
    +columnApi: ColumnApi
}
interface ToolPanelVisibleChangedEvent extends AgGridEvent {
    +source: string
}
interface AnimationQueueEmptyEvent extends AgGridEvent
interface ColumnPivotModeChangedEvent extends AgGridEvent
interface VirtualColumnsChangedEvent extends AgGridEvent
interface ColumnEverythingChangedEvent extends AgGridEvent {
    +source: string
}
interface NewColumnsLoadedEvent extends AgGridEvent
interface GridColumnsChangedEvent extends AgGridEvent
interface DisplayedColumnsChangedEvent extends AgGridEvent
interface RowDataChangedEvent extends AgGridEvent
interface RowDataUpdatedEvent extends AgGridEvent
interface PinnedRowDataChangedEvent extends AgGridEvent
interface SelectionChangedEvent extends AgGridEvent
interface FilterChangedEvent extends AgGridEvent {
    +afterDataChange?: boolean
    +afterFloatingFilter?: boolean
}
interface FilterModifiedEvent extends AgGridEvent {
    +filterInstance: IFilterComp
    +column: Column
}
interface FilterOpenedEvent extends AgGridEvent {
    +column: OriginalColumnGroup | Column
    +source: FilterRequestSource
    +eGui: HTMLElement
}
interface SortChangedEvent extends AgGridEvent
interface GridReadyEvent extends AgGridEvent
interface DisplayedColumnsWidthChangedEvent extends AgGridEvent
interface ColumnHoverChangedEvent extends AgGridEvent
interface BodyHeightChangedEvent extends AgGridEvent
interface ComponentStateChangedEvent extends AgGridEvent
interface DragEvent extends AgGridEvent {
    +type: string
    +target: HTMLElement
}
interface DragStartedEvent extends DragEvent
interface DragStoppedEvent extends DragEvent
interface CheckboxChangedEvent extends AgEvent {
    +id: string
    +name: string
    +selected?: boolean
    +previousValue: boolean
}
interface GridSizeChangedEvent extends AgGridEvent {
    +clientWidth: number
    +clientHeight: number
}
interface RowDragEvent extends AgGridEvent {
    +node: RowNode
    +nodes: RowNode[]
    +y: number
    +vDirection: string
    +event: MouseEvent
    +overIndex: number
    +overNode: RowNode
}
interface RowDragEnterEvent extends RowDragEvent
interface RowDragEndEvent extends RowDragEvent
interface RowDragMoveEvent extends RowDragEvent
interface RowDragLeaveEvent extends RowDragEvent
interface PasteStartEvent extends AgGridEvent {
    +source: string
}
interface PasteEndEvent extends AgGridEvent {
    +source: string
}
interface FillStartEvent extends AgGridEvent
interface FillEndEvent extends AgGridEvent {
    +initialRange: CellRange
    +finalRange: CellRange
}
interface ViewportChangedEvent extends AgGridEvent {
    +firstRow: number
    +lastRow: number
}
interface FirstDataRenderedEvent extends AgGridEvent {
    +firstRow: number
    +lastRow: number
}
interface RangeSelectionChangedEvent extends AgGridEvent {
    +id?: string
    +finished: boolean
    +started: boolean
}
interface ChartCreated extends AgGridEvent {
    +chartId: string
    +chartModel: ChartModel
}
interface ChartRangeSelectionChanged extends AgGridEvent {
    +id: string
    +chartId: string
    +cellRange: CellRangeParams
}
interface ChartOptionsChanged extends AgGridEvent {
    +chartId: string
    +chartType: ChartType
    +chartThemeName: string
    +chartOptions: ChartOptions<any>
}
interface ChartDestroyed extends AgGridEvent {
    +chartId: string
}
interface ColumnGroupOpenedEvent extends AgGridEvent {
    +columnGroup: OriginalColumnGroup
}
interface ItemsAddedEvent extends AgGridEvent {
    +items: RowNode[]
}
interface BodyScrollEvent extends AgGridEvent {
    +direction: ScrollDirection
    +left: number
    +top: number
}
interface FlashCellsEvent extends AgGridEvent {
    +cells: any
}
interface PaginationChangedEvent extends AgGridEvent {
    +animate?: boolean
    +keepRenderedRows?: boolean
    +newData?: boolean
    +newPage: boolean
}
interface PaginationPixelOffsetChangedEvent extends AgGridEvent
interface CellFocusedEvent extends AgGridEvent {
    +rowIndex: number
    +column: Column
    +rowPinned?: string
    +forceBrowserFocus?: boolean
    +floating: string
}
interface ExpandCollapseAllEvent extends AgGridEvent {
    +source: string
}
interface ColumnEvent extends AgGridEvent {
    +column: Column
    +columns: Column[]
    +source: ColumnEventType
}
interface ColumnResizedEvent extends ColumnEvent {
    +finished: boolean
    +flexColumns: Column[]
}
interface ColumnPivotChangedEvent extends ColumnEvent
interface ColumnRowGroupChangedEvent extends ColumnEvent
interface ColumnValueChangedEvent extends ColumnEvent
interface ColumnMovedEvent extends ColumnEvent {
    +toIndex?: number
}
interface ColumnVisibleEvent extends ColumnEvent {
    +visible?: boolean
}
interface ColumnPinnedEvent extends ColumnEvent {
    +pinned: string
}
interface RowEvent extends AgGridEvent {
    +node: RowNode
    +data: any
    +rowIndex: number
    +rowPinned: string
    +context: any
    +event?: Event
}
interface RowGroupOpenedEvent extends RowEvent {
    +expanded: boolean
}
interface RowValueChangedEvent extends RowEvent
interface RowSelectedEvent extends RowEvent
interface VirtualRowRemovedEvent extends RowEvent
interface RowClickedEvent extends RowEvent
interface RowDoubleClickedEvent extends RowEvent
interface RowEditingStartedEvent extends RowEvent
interface RowEditingStoppedEvent extends RowEvent
interface CellEvent extends RowEvent {
    +column: Column
    +colDef: ColDef
    +value: any
}
interface CellKeyDownEvent extends CellEvent
interface CellKeyPressEvent extends CellEvent
interface CellClickedEvent extends CellEvent
interface CellMouseDownEvent extends CellEvent
interface CellDoubleClickedEvent extends CellEvent
interface CellMouseOverEvent extends CellEvent
interface CellMouseOutEvent extends CellEvent
interface CellContextMenuEvent extends CellEvent
interface CellEditingStartedEvent extends CellEvent
interface CellEditingStoppedEvent extends CellEvent {
    +oldValue: any
    +newValue: any
}
interface CellValueChangedEvent extends CellEvent {
    +oldValue: any
    +newValue: any
    +source: string
}
interface AsyncTransactionsFlushed extends AgGridEvent {
    +results: (RowNodeTransaction | ServerSideTransactionResult)[]
}
interface ColumnRequestEvent extends AgGridEvent {
    +columns: Column[]
}
interface ColumnRowGroupChangeRequestEvent extends ColumnRequestEvent
interface ColumnPivotChangeRequestEvent extends ColumnRequestEvent
interface ColumnValueChangeRequestEvent extends ColumnRequestEvent
interface ColumnAggFuncChangeRequestEvent extends ColumnRequestEvent {
    +aggFunc: any
}
interface ScrollVisibilityChangedEvent extends AgGridEvent
interface StoreUpdatedEvent extends AgEvent
class AgStackComponentsRegistry extends BeanStub {
    -componentsMappedByName: { [key: string]: any; }
    +setupComponents(components: ComponentMeta[]): void
    -addComponent(componentMeta: ComponentMeta): void
    +getComponentClass(htmlTag: string): any
}
interface VisibleChangedEvent extends AgEvent {
    +visible: boolean
}
class Component extends BeanStub {
    -eGui: HTMLElement
    -annotatedGuiListeners: any[]
    #agStackComponentsRegistry: AgStackComponentsRegistry
    -displayed: boolean
    -visible: boolean
    #parentComponent: Component
    -compId: number
    -cssClassStates: { [cssClass: string]: boolean; }
    #usingBrowserTooltips: boolean
    -tooltipText: string
    -tooltipFeature: TooltipFeature
    -preConstructOnComponent(): void
    +getCompId(): number
    +getTooltipParams(): ITooltipParams
    +setTooltip(newTooltipText: string): void
    -createChildComponentsFromTags(parentNode: Element, paramsMap?: { [key: string]: any; }): void
    +createComponentFromElement(element: HTMLElement, afterPreCreateCallback?: (comp: Component) => void, paramsMap?: { [key: string]: any; }): Component
    -copyAttributesFromNode(source: Element, dest: Element): void
    -swapComponentForNode(newComponent: Component, parentNode: Element, childNode: Node): void
    -swapInComponentForQuerySelectors(newComponent: Component, childNode: Node): void
    -iterateOverQuerySelectors(action: (querySelector: any) => void): void
    +setTemplate(template: string, paramsMap?: { [key: string]: any; }): void
    +setTemplateFromElement(element: HTMLElement, paramsMap?: { [key: string]: any; }): void
    -createChildComponentsPreConstruct(): void
    #wireQuerySelectors(): void
    -addAnnotatedGuiEventListeners(): void
    -addAnnotatedGridEventListeners(): void
    -getAgComponentMetaData(key: string): any[]
    -removeAnnotatedGuiEventListeners(): void
    +getGui(): HTMLElement
    +getFocusableElement(): HTMLElement
    +setParentComponent(component: Component): void
    +getParentComponent(): Component
    #setGui(eGui: HTMLElement): void
    #queryForHtmlElement(cssSelector: string): HTMLElement
    #queryForHtmlInputElement(cssSelector: string): HTMLInputElement
    +appendChild(newChild: HTMLElement | Component, container?: HTMLElement): void
    +isDisplayed(): boolean
    +setVisible(visible: boolean): void
    +setDisplayed(displayed: boolean): void
    #destroy(): void
    +addGuiEventListener(event: string, listener: (event: any) => void): void
    +addCssClass(className: string): void
    +removeCssClass(className: string): void
    +addOrRemoveCssClass(className: string, addOrRemove: boolean): void
    +getAttribute(key: string): string
    +getRefElement(refName: string): HTMLElement
    +{static} EVENT_DISPLAYED_CHANGED: string
}
interface ContextParams {
    +providedBeanInstances: any
    +beanClasses: any[]
    +debug: boolean
}
interface ComponentMeta {
    +componentClass: new () => Object
    +componentName: string
}
interface BeanWrapper {
    +bean: any
    +beanInstance: any
    +beanName: any
}
class Context {
    -beanWrappers: { [key: string]: BeanWrapper; }
    -contextParams: ContextParams
    -logger: ILogger
    -destroyed: boolean
    -getBeanInstances(): any[]
    +createBean(bean: T, afterPreCreateCallback?: (comp: Component) => void): T
    -wireBeans(beanInstances: any[], afterPreCreateCallback?: (comp: Component) => void): void
    -createBeans(): void
    -createBeanWrapper(BeanClass: new () => Object): void
    -autoWireBeans(beanInstances: any[]): void
    -methodWireBeans(beanInstances: any[]): void
    -forEachMetaDataInHierarchy(beanInstance: any, callback: (metaData: any, beanName: string) => void): void
    -getBeanName(constructor: any): string
    -getBeansForParameters(parameters: any, beanName: string): any[]
    -lookupBeanInstance(wiringBean: string, beanName: string, optional?: boolean): any
    -callLifeCycleMethods(beanInstances: any[], lifeCycleMethod: string): void
    -callLifeCycleMethodsOnBean(beanInstance: any, lifeCycleMethod: string, methodToIgnore?: string): void
    +getBean(name: string): any
    +destroy(): void
    +destroyBean(bean: T): undefined
    +destroyBeans(beans: T[]): T[]
}
class ColumnUtils extends BeanStub {
    +calculateColInitialWidth(colDef: any): number
    +getOriginalPathForColumn(column: Column, originalBalancedTree: OriginalColumnGroupChild[]): OriginalColumnGroup[]
    +depthFirstOriginalTreeSearch(parent: OriginalColumnGroup, tree: OriginalColumnGroupChild[], callback: (treeNode: OriginalColumnGroupChild, parent: OriginalColumnGroup | null) => void): void
    +depthFirstAllColumnTreeSearch(tree: ColumnGroupChild[], callback: (treeNode: ColumnGroupChild) => void): void
    +depthFirstDisplayedColumnTreeSearch(tree: ColumnGroupChild[], callback: (treeNode: ColumnGroupChild) => void): void
}
class Column implements ColumnGroupChild, OriginalColumnGroupChild, IEventEmitter {
    -gridOptionsWrapper: GridOptionsWrapper
    -columnUtils: ColumnUtils
    -columnApi: ColumnApi
    -gridApi: GridApi
    -context: Context
    -colId: any
    -colDef: ColDef
    -userProvidedColDef: ColDef
    -actualWidth: any
    -visible: any
    -pinned: "right" | "left"
    -left: number
    -oldLeft: number
    -aggFunc: string | IAggFunc
    -sort: string
    -sortIndex: number
    -moving: boolean
    -menuVisible: boolean
    -lastLeftPinned: boolean
    -firstRightPinned: boolean
    -minWidth: number
    -maxWidth: number
    -filterActive: boolean
    -eventService: EventService
    -fieldContainsDots: boolean
    -tooltipFieldContainsDots: boolean
    -rowGroupActive: boolean
    -pivotActive: boolean
    -aggregationActive: boolean
    -flex: number
    -primary: boolean
    -parent: ColumnGroup
    -originalParent: OriginalColumnGroup
    -setState(colDef: ColDef): void
    +setColDef(colDef: ColDef, userProvidedColDef: ColDef): void
    +getUserProvidedColDef(): ColDef
    +setParent(parent: ColumnGroup): void
    +getParent(): ColumnGroup
    +setOriginalParent(originalParent: OriginalColumnGroup): void
    +getOriginalParent(): OriginalColumnGroup
    -initialise(): void
    +resetActualWidth(source?: ColumnEventType): void
    +isEmptyGroup(): boolean
    +isRowGroupDisplayed(colId: string): boolean
    +getUniqueId(): string
    +isPrimary(): boolean
    +isFilterAllowed(): boolean
    +isFieldContainsDots(): boolean
    +isTooltipFieldContainsDots(): boolean
    -validate(): void
    +addEventListener(eventType: string, listener: Function): void
    +removeEventListener(eventType: string, listener: Function): void
    -createColumnFunctionCallbackParams(rowNode: RowNode): ColumnFunctionCallbackParams
    +isSuppressNavigable(rowNode: RowNode): boolean
    +isCellEditable(rowNode: RowNode): boolean
    +isRowDrag(rowNode: RowNode): boolean
    +isDndSource(rowNode: RowNode): boolean
    +isCellCheckboxSelection(rowNode: RowNode): boolean
    +isSuppressPaste(rowNode: RowNode): boolean
    +isResizable(): boolean
    -isColumnFunc(rowNode: RowNode, value?: boolean | ((params: ColumnFunctionCallbackParams) => boolean)): boolean
    +setMoving(moving: boolean, source?: ColumnEventType): void
    -createColumnEvent(type: string, source: ColumnEventType): ColumnEvent
    +isMoving(): boolean
    +getSort(): string
    +setSort(sort: string, source?: ColumnEventType): void
    +setMenuVisible(visible: boolean, source?: ColumnEventType): void
    +isMenuVisible(): boolean
    +isSortAscending(): boolean
    +isSortDescending(): boolean
    +isSortNone(): boolean
    +isSorting(): boolean
    +getSortIndex(): number
    +setSortIndex(sortOrder?: number): void
    +setAggFunc(aggFunc: string | IAggFunc): void
    +getAggFunc(): string | IAggFunc
    +getLeft(): number
    +getOldLeft(): number
    +getRight(): number
    +setLeft(left: number, source?: ColumnEventType): void
    +isFilterActive(): boolean
    +setFilterActive(active: boolean, source?: ColumnEventType, additionalEventAttributes?: any): void
    +setPinned(pinned: string | boolean): void
    +setFirstRightPinned(firstRightPinned: boolean, source?: ColumnEventType): void
    +setLastLeftPinned(lastLeftPinned: boolean, source?: ColumnEventType): void
    +isFirstRightPinned(): boolean
    +isLastLeftPinned(): boolean
    +isPinned(): boolean
    +isPinnedLeft(): boolean
    +isPinnedRight(): boolean
    +getPinned(): "right" | "left"
    +setVisible(visible: boolean, source?: ColumnEventType): void
    +isVisible(): boolean
    +getColDef(): ColDef
    +getColumnGroupShow(): string
    +getColId(): string
    +getId(): string
    +getDefinition(): AbstractColDef
    +getActualWidth(): number
    -createBaseColDefParams(rowNode: RowNode): BaseColDefParams
    +getColSpan(rowNode: RowNode): number
    +getRowSpan(rowNode: RowNode): number
    +setActualWidth(actualWidth: number, source?: ColumnEventType, silent?: boolean): void
    +fireColumnWidthChangedEvent(source: ColumnEventType): void
    +isGreaterThanMax(width: number): boolean
    +getMinWidth(): number
    +getMaxWidth(): number
    +getFlex(): number
    +setFlex(flex: number): void
    +setMinimum(source?: ColumnEventType): void
    +setRowGroupActive(rowGroup: boolean, source?: ColumnEventType): void
    +isRowGroupActive(): boolean
    +setPivotActive(pivot: boolean, source?: ColumnEventType): void
    +isPivotActive(): boolean
    +isAnyFunctionActive(): boolean
    +isAnyFunctionAllowed(): boolean
    +setValueActive(value: boolean, source?: ColumnEventType): void
    +isValueActive(): boolean
    +isAllowPivot(): boolean
    +isAllowValue(): boolean
    +isAllowRowGroup(): boolean
    +getMenuTabs(defaultValues: string[]): string[]
    +isLockPosition(): boolean
    +isLockVisible(): boolean
    +isLockPinned(): boolean
    +{static} EVENT_MOVING_CHANGED: string
    +{static} EVENT_LEFT_CHANGED: string
    +{static} EVENT_WIDTH_CHANGED: string
    +{static} EVENT_LAST_LEFT_PINNED_CHANGED: string
    +{static} EVENT_FIRST_RIGHT_PINNED_CHANGED: string
    +{static} EVENT_VISIBLE_CHANGED: string
    +{static} EVENT_FILTER_CHANGED: string
    +{static} EVENT_FILTER_ACTIVE_CHANGED: string
    +{static} EVENT_SORT_CHANGED: string
    +{static} EVENT_MENU_VISIBLE_CHANGED: string
    +{static} EVENT_ROW_GROUP_CHANGED: string
    +{static} EVENT_PIVOT_CHANGED: string
    +{static} EVENT_VALUE_CHANGED: string
}
class OriginalColumnGroup implements OriginalColumnGroupChild, IEventEmitter {
    -localEventService: EventService
    -colGroupDef: ColGroupDef
    -originalParent: OriginalColumnGroup
    -children: OriginalColumnGroupChild[]
    -groupId: string
    -expandable: boolean
    -expanded: boolean
    -padding: boolean
    -level: number
    +setOriginalParent(originalParent: OriginalColumnGroup): void
    +getOriginalParent(): OriginalColumnGroup
    +getLevel(): number
    +isVisible(): boolean
    +isPadding(): boolean
    +setExpanded(expanded: boolean): void
    +isExpandable(): boolean
    +isExpanded(): boolean
    +getGroupId(): string
    +getId(): string
    +setChildren(children: OriginalColumnGroupChild[]): void
    +getChildren(): OriginalColumnGroupChild[]
    +getColGroupDef(): ColGroupDef
    +getLeafColumns(): Column[]
    -addLeafColumns(leafColumns: Column[]): void
    +getColumnGroupShow(): string
    +setupExpandable(): void
    +setExpandable(): void
    -findChildrenRemovingPadding(): OriginalColumnGroupChild[]
    -onColumnVisibilityChanged(): void
    +addEventListener(eventType: string, listener: Function): void
    +removeEventListener(eventType: string, listener: Function): void
    +{static} EVENT_EXPANDED_CHANGED: string
    +{static} EVENT_EXPANDABLE_CHANGED: string
}
class ColumnApi {
    -columnController: ColumnController
    +sizeColumnsToFit(gridWidth: any): void
    +setColumnGroupOpened(group: string | OriginalColumnGroup, newValue: boolean): void
    +getColumnGroup(name: string, instanceId?: number): ColumnGroup
    +getOriginalColumnGroup(name: string): OriginalColumnGroup
    +getDisplayNameForColumn(column: Column, location: string): string
    +getDisplayNameForColumnGroup(columnGroup: ColumnGroup, location: string): string
    +getColumn(key: any): Column
    +applyColumnState(params: ApplyColumnStateParams): boolean
    +getColumnState(): ColumnState[]
    +resetColumnState(): void
    +getColumnGroupState(): { groupId: string; open: boolean; }[]
    +setColumnGroupState(stateItems: { groupId: string; open: boolean; }[]): void
    +resetColumnGroupState(): void
    +isPinning(): boolean
    +isPinningLeft(): boolean
    +isPinningRight(): boolean
    +getDisplayedColAfter(col: Column): Column
    +getDisplayedColBefore(col: Column): Column
    +setColumnVisible(key: string | Column, visible: boolean): void
    +setColumnsVisible(keys: (string | Column)[], visible: boolean): void
    +setColumnPinned(key: string | Column, pinned: string): void
    +setColumnsPinned(keys: (string | Column)[], pinned: string): void
    +getAllColumns(): Column[]
    +getAllGridColumns(): Column[]
    +getDisplayedLeftColumns(): Column[]
    +getDisplayedCenterColumns(): Column[]
    +getDisplayedRightColumns(): Column[]
    +getAllDisplayedColumns(): Column[]
    +getAllDisplayedVirtualColumns(): Column[]
    +moveColumn(key: string | Column, toIndex: number): void
    +moveColumnByIndex(fromIndex: number, toIndex: number): void
    +moveColumns(columnsToMoveKeys: (string | Column)[], toIndex: number): void
    +moveRowGroupColumn(fromIndex: number, toIndex: number): void
    +setColumnAggFunc(key: string | Column, aggFunc: string): void
    +setColumnWidth(key: string | Column, newWidth: number, finished?: boolean): void
    +setColumnWidths(columnWidths: { key: string | Column; newWidth: number; }[], finished?: boolean): void
    +setPivotMode(pivotMode: boolean): void
    +isPivotMode(): boolean
    +getSecondaryPivotColumn(pivotKeys: string[], valueColKey: string | Column): Column
    +setValueColumns(colKeys: (string | Column)[]): void
    +getValueColumns(): Column[]
    +removeValueColumn(colKey: string | Column): void
    +removeValueColumns(colKeys: (string | Column)[]): void
    +addValueColumn(colKey: string | Column): void
    +addValueColumns(colKeys: (string | Column)[]): void
    +setRowGroupColumns(colKeys: (string | Column)[]): void
    +removeRowGroupColumn(colKey: string | Column): void
    +removeRowGroupColumns(colKeys: (string | Column)[]): void
    +addRowGroupColumn(colKey: string | Column): void
    +addRowGroupColumns(colKeys: (string | Column)[]): void
    +getRowGroupColumns(): Column[]
    +setPivotColumns(colKeys: (string | Column)[]): void
    +removePivotColumn(colKey: string | Column): void
    +removePivotColumns(colKeys: (string | Column)[]): void
    +addPivotColumn(colKey: string | Column): void
    +addPivotColumns(colKeys: (string | Column)[]): void
    +getPivotColumns(): Column[]
    +getLeftDisplayedColumnGroups(): ColumnGroupChild[]
    +getCenterDisplayedColumnGroups(): ColumnGroupChild[]
    +getRightDisplayedColumnGroups(): ColumnGroupChild[]
    +getAllDisplayedColumnGroups(): ColumnGroupChild[]
    +autoSizeColumn(key: string | Column, skipHeader?: boolean): void
    +autoSizeColumns(keys: (string | Column)[], skipHeader?: boolean): void
    +autoSizeAllColumns(skipHeader?: boolean): void
    +setSecondaryColumns(colDefs: (ColDef | ColGroupDef)[]): void
    +getSecondaryColumns(): Column[]
    +getPrimaryColumns(): Column[]
    -cleanDownReferencesToAvoidMemoryLeakInCaseApplicationIsKeepingReferenceToDestroyedGrid(): void
    +columnGroupOpened(group: string | OriginalColumnGroup, newValue: boolean): void
    +hideColumns(colIds: any, hide: any): void
    +hideColumn(colId: any, hide: any): void
    +setState(columnState: ColumnState[]): boolean
    +getState(): ColumnState[]
    +resetState(): void
    +getAggregationColumns(): Column[]
    +removeAggregationColumn(colKey: string | Column): void
    +removeAggregationColumns(colKeys: (string | Column)[]): void
    +addAggregationColumn(colKey: string | Column): void
    +addAggregationColumns(colKeys: (string | Column)[]): void
    +setColumnAggFunction(column: Column, aggFunc: string): void
    +getDisplayNameForCol(column: any): string
    +setColumnState(columnState: ColumnState[]): boolean
}
interface ApplyColumnStateParams {
    +state?: ColumnState[]
    +applyOrder?: boolean
    +defaultState?: ColumnState
}
class PaginationAutoPageSizeService extends BeanStub {
    -gridPanel: GridPanel
    +registerGridComp(gridPanel: GridPanel): void
    -notActive(): boolean
    -onScrollVisibilityChanged(): void
    -onBodyHeightChanged(): void
    -checkPageSize(): void
}
interface NavigateParams {
    +scrollIndex: number
    +scrollType: "top" | "bottom"
    +scrollColumn: Column
    +focusIndex: number
    +focusColumn: Column
}
class NavigationService extends BeanStub {
    -mouseEventService: MouseEventService
    -paginationProxy: PaginationProxy
    -focusController: FocusController
    -animationFrameService: AnimationFrameService
    -rangeController: IRangeController
    -columnController: ColumnController
    -gridPanel: GridPanel
    -timeLastPageEventProcessed: number
    +registerGridComp(gridPanel: GridPanel): void
    +handlePageScrollingKey(event: KeyboardEvent): boolean
    -isTimeSinceLastPageEventToRecent(): boolean
    -setTimeLastPageEventProcessed(): void
    -navigateTo(navigateParams: NavigateParams): void
    -onPageDown(gridCell: CellPosition): void
    -onPageUp(gridCell: CellPosition): void
    -getIndexToFocus(indexToScrollTo: number, isDown: boolean): number
    -onCtrlUpOrDown(key: number, gridCell: CellPosition): void
    -onCtrlLeftOrRight(key: number, gridCell: CellPosition): void
    -onHomeOrEndKey(key: number): void
}
enum LoadingType {
    Loading
    NoRows
}
class OverlayWrapperComponent extends Component {
    +userComponentFactory: UserComponentFactory
    +eOverlayWrapper: HTMLElement
    -activeOverlay: ILoadingOverlayComp
    -inProgress: boolean
    -destroyRequested: boolean
    -postConstruct(): void
    -setWrapperTypeClass(loadingType: LoadingType): void
    +showLoadingOverlay(): void
    +showNoRowsOverlay(): void
    -showOverlay(workItem: AgPromise<ILoadingOverlayComp | INoRowsOverlayComp>, type: LoadingType): void
    -destroyActiveOverlay(): void
    +hideOverlay(): void
    +destroy(): void
    -{static} TEMPLATE: string
}
class AutoHeightCalculator extends BeanStub {
    -beans: Beans
    -$scope: any
    -columnController: ColumnController
    -rowCssClassCalculator: RowCssClassCalculator
    +$compile: any
    -gridPanel: GridPanel
    +registerGridComp(gridPanel: GridPanel): void
    +getPreferredHeightForRow(rowNode: RowNode): number
    -addInRowCssClasses(rowNode: RowNode, eDummyContainer: HTMLDivElement): void
}
interface CellValueChange {
    +rowPinned?: string
    +rowIndex: number
    +columnId: string
    +oldValue: any
    +newValue: any
}
interface LastFocusedCell {
    +rowPinned?: string
    +rowIndex: number
    +columnId: string
}
class UndoRedoAction {
    +cellValueChanges: CellValueChange[]
}
class FillUndoRedoAction extends UndoRedoAction {
    +initialRange: CellRange
    +finalRange: CellRange
}
class UndoRedoStack {
    -maxStackSize: number
    -actionStack: UndoRedoAction[]
    +pop(): UndoRedoAction
    +push(item: UndoRedoAction): void
    +clear(): void
    +getCurrentStackSize(): number
    -{static} DEFAULT_STACK_SIZE: number
}
class UndoRedoService extends BeanStub {
    -focusController: FocusController
    -gridApi: GridApi
    -rowModel: IRowModel
    -pinnedRowModel: PinnedRowModel
    -cellValueChanges: CellValueChange[]
    -undoStack: UndoRedoStack
    -redoStack: UndoRedoStack
    -isCellEditing: boolean
    -isRowEditing: boolean
    -isPasting: boolean
    -isFilling: boolean
    +init(): void
    -onCellValueChanged: (event: CellValueChangedEvent) => void
    -clearStacks: () => void
    +getCurrentUndoStackSize(): number
    +getCurrentRedoStackSize(): number
    +undo(): void
    +redo(): void
    -processAction(action: UndoRedoAction, valueExtractor: (cellValueChange: CellValueChange) => any): void
    -processRangeAndCellFocus(cellValueChanges: CellValueChange[], range?: CellRange): void
    -setLastFocusedCell(lastFocusedCell: LastFocusedCell): void
    -addRowEditingListeners(): void
    -addCellEditingListeners(): void
    -addPasteListeners(): void
    -addFillListeners(): void
    -pushActionsToUndoStack(action: UndoRedoAction): void
    -getRowNode(gridRow: RowPosition): RowNode
}
class GridPanel extends Component {
    -alignedGridsService: AlignedGridsService
    -rowRenderer: RowRenderer
    -pinnedRowModel: PinnedRowModel
    -animationFrameService: AnimationFrameService
    -navigationService: NavigationService
    -autoHeightCalculator: AutoHeightCalculator
    -columnAnimationService: ColumnAnimationService
    -autoWidthCalculator: AutoWidthCalculator
    -paginationAutoPageSizeService: PaginationAutoPageSizeService
    -beans: Beans
    -paginationProxy: PaginationProxy
    -columnApi: ColumnApi
    -gridApi: GridApi
    -dragService: DragService
    -mouseEventService: MouseEventService
    -$scope: any
    -scrollVisibleService: ScrollVisibleService
    -valueService: ValueService
    -dragAndDropService: DragAndDropService
    -heightScaler: MaxDivHeightScaler
    -resizeObserverService: ResizeObserverService
    -undoRedoService: UndoRedoService
    -columnController: ColumnController
    -headerNavigationService: HeaderNavigationService
    +popupService: PopupService
    -rangeController: IRangeController
    -contextMenuFactory: IContextMenuFactory
    -menuFactory: IMenuFactory
    -clipboardService: IClipboardService
    -eBodyViewport: HTMLElement
    -eCenterContainer: HTMLElement
    -eCenterViewport: HTMLElement
    -eLeftContainer: HTMLElement
    -eRightContainer: HTMLElement
    -eCenterColsClipper: HTMLElement
    -eHorizontalScrollBody: HTMLElement
    -eHorizontalLeftSpacer: HTMLElement
    -eHorizontalRightSpacer: HTMLElement
    -eBodyHorizontalScrollViewport: HTMLElement
    -eBodyHorizontalScrollContainer: HTMLElement
    -eFullWidthContainer: HTMLElement
    -eTop: HTMLElement
    -eLeftTop: HTMLElement
    -eRightTop: HTMLElement
    -eTopContainer: HTMLElement
    -eTopViewport: HTMLElement
    -eTopFullWidthContainer: HTMLElement
    -eBottom: HTMLElement
    -eLeftBottom: HTMLElement
    -eRightBottom: HTMLElement
    -eBottomContainer: HTMLElement
    -eBottomViewport: HTMLElement
    -eBottomFullWidthContainer: HTMLElement
    +headerRootComp: HeaderRootComp
    -overlayWrapper: OverlayWrapperComponent
    -rowContainerComponents: RowContainerComponents
    -eAllCellContainers: HTMLElement[]
    -scrollLeft: number
    -scrollTop: number
    -nextScrollTop: number
    -centerWidth: number
    -lastHorizontalScrollElement: HTMLElement
    -resetLastHorizontalScrollElementDebounced: () => void
    -bodyHeight: number
    -enableRtl: boolean
    -pinningRight: boolean
    -pinningLeft: boolean
    -printLayout: boolean
    -rowDragFeature: RowDragFeature
    +getVScrollPosition(): { top: number; bottom: number; }
    +getHScrollPosition(): { left: number; right: number; }
    -onRowDataChanged(): void
    -showOrHideOverlay(): void
    -onNewColumnsLoaded(): void
    -init(): void
    -onDomLayoutChanged(): void
    -onCenterViewportResized(): void
    +setColumnMovingCss(moving: boolean): void
    +setCellTextSelection(selectable?: boolean): void
    -addRowDragListener(): void
    +getRowDragFeature(): RowDragFeature
    -addStopEditingWhenGridLosesFocus(): void
    -addAngularApplyCheck(): void
    -disableBrowserDragging(): void
    -addEventListeners(): void
    -addDragListeners(): void
    -addMouseListeners(): void
    -addPreventScrollWhileDragging(): void
    -addKeyboardEvents(): void
    -addBodyViewportListener(): void
    +getBodyClientRect(): ClientRect
    -getRowForEvent(event: Event): RowComp
    -processKeyboardEvent(eventName: string, keyboardEvent: KeyboardEvent): void
    -processCellKeyboardEvent(cellComp: CellComp, eventName: string, keyboardEvent: KeyboardEvent): void
    +processFullWidthRowKeyboardEvent(rowComp: RowComp, eventName: string, keyboardEvent: KeyboardEvent): void
    -doGridOperations(keyboardEvent: KeyboardEvent, cellComp: CellComp): void
    +scrollToTop(): void
    -processMouseEvent(eventName: string, mouseEvent: MouseEvent): void
    -mockContextMenuForIPad(): void
    -handleContextMenuMouseEvent(mouseEvent: MouseEvent, touchEvent: TouchEvent, rowComp: RowComp, cellComp: CellComp): void
    -onContextMenu(mouseEvent: MouseEvent, touchEvent: TouchEvent, rowNode: RowNode, column: Column, value: any, anchorToElement: HTMLElement): void
    -preventDefaultOnContextMenu(mouseEvent: MouseEvent): void
    -onCtrlAndA(event: KeyboardEvent): void
    -onCtrlAndC(event: KeyboardEvent): void
    -onCtrlAndV(): void
    -onCtrlAndD(event: KeyboardEvent): void
    +ensureIndexVisible(index: any, position?: string): void
    +getCenterWidth(): number
    +isHorizontalScrollShowing(): boolean
    +isVerticalScrollShowing(): boolean
    -onScrollbarWidthChanged(): void
    +checkViewportAndScrolls(): void
    -updateScrollVisibleService(): void
    -updateScrollVisibleServiceImpl(): void
    -setHorizontalScrollVisible(visible: boolean): void
    -setVerticalScrollPaddingVisible(show: boolean): void
    +updateRowCount(): void
    -updateColumnCount(): void
    +ensureColumnVisible(key: any): void
    +showLoadingOverlay(): void
    +showNoRowsOverlay(): void
    +hideOverlay(): void
    +sizeColumnsToFit(nextTimeout?: number): void
    +getCenterContainer(): HTMLElement
    +getDropTargetBodyContainers(): HTMLElement[]
    +getDropTargetLeftContainers(): HTMLElement[]
    +getDropTargetRightContainers(): HTMLElement[]
    -buildRowContainerComponents(): void
    -setupRowAnimationCssClass(): void
    -suppressScrollOnFloatingRow(): void
    +getRowContainers(): RowContainerComponents
    +getFloatingTopBottom(): HTMLElement[]
    +onDisplayedColumnsChanged(): void
    -onDisplayedColumnsWidthChanged(): void
    -setWidthsOfContainers(): void
    -setCenterWidth(): void
    -setPinnedLeftWidth(): void
    -setPinnedRightWidth(): void
    -setPinnedContainerSize(): void
    -setFakeHScrollSpacerWidths(): void
    -checkBodyHeight(): void
    +setHeaderAndFloatingHeights(): void
    +getBodyHeight(): number
    +setHorizontalScrollPosition(hScrollPosition: number): void
    +setVerticalScrollPosition(vScrollPosition: number): void
    +scrollHorizontally(pixels: number): number
    +scrollVertically(pixels: number): number
    -addScrollListener(): void
    -onVerticalScroll(): void
    +executeAnimationFrameScroll(): boolean
    -shouldBlockScrollUpdate(direction: ScrollDirection, scrollTo: number, touchOnly?: boolean): boolean
    -isControllingScroll(eDiv: HTMLElement): boolean
    -onFakeHorizontalScroll(): void
    -onCenterViewportScroll(): void
    -onBodyHorizontalScroll(eSource: HTMLElement): void
    -resetLastHorizontalScrollElement(): void
    -doHorizontalScroll(scrollLeft: number): void
    -redrawRowsAfterScroll(): void
    -onHorizontalViewportChanged(): void
    +getCenterViewportScrollLeft(): number
    -setCenterViewportScrollLeft(value: number): void
    +horizontallyScrollHeaderCenterAndFloatingCenter(scrollLeft?: number): void
    +addScrollEventListener(listener: () => void): void
    +removeScrollEventListener(listener: () => void): void
}
class CellNavigationService extends BeanStub {
    -columnController: ColumnController
    -rowModel: IRowModel
    -pinnedRowModel: PinnedRowModel
    -paginationProxy: PaginationProxy
    +getNextCellToFocus(key: any, lastCellToFocus: CellPosition): CellPosition
    -isCellGoodToFocusOn(gridCell: CellPosition): boolean
    -getCellToLeft(lastCell: CellPosition): CellPosition
    -getCellToRight(lastCell: CellPosition): CellPosition
    +getRowBelow(rowPosition: RowPosition): RowPosition
    -getCellBelow(lastCell: CellPosition): CellPosition
    -isLastRowInContainer(rowPosition: RowPosition): boolean
    +getRowAbove(rowPosition: RowPosition): RowPosition
    -getCellAbove(lastCell: CellPosition): CellPosition
    -getLastBodyCell(): RowPosition
    -getLastFloatingTopRow(): RowPosition
    +getNextTabbedCell(gridCell: CellPosition, backwards: boolean): CellPosition
    +getNextTabbedCellForwards(gridCell: CellPosition): CellPosition
    +getNextTabbedCellBackwards(gridCell: CellPosition): CellPosition
}
class RowRenderer extends BeanStub {
    -paginationProxy: PaginationProxy
    -columnController: ColumnController
    -$scope: any
    -pinnedRowModel: PinnedRowModel
    -rowModel: IRowModel
    -focusController: FocusController
    -cellNavigationService: CellNavigationService
    -columnApi: ColumnApi
    -gridApi: GridApi
    -beans: Beans
    -maxDivHeightScaler: MaxDivHeightScaler
    -animationFrameService: AnimationFrameService
    -rowPositionUtils: RowPositionUtils
    -rangeController: IRangeController
    -gridPanel: GridPanel
    -destroyFuncsForColumnListeners: (() => void)[]
    -firstRenderedRow: number
    -lastRenderedRow: number
    -rowCompsByIndex: { [key: string]: RowComp; }
    -floatingTopRowComps: RowComp[]
    -floatingBottomRowComps: RowComp[]
    -rowContainers: RowContainerComponents
    -pinningLeft: boolean
    -pinningRight: boolean
    -refreshInProgress: boolean
    -logger: Logger
    -printLayout: boolean
    -embedFullWidthRows: boolean
    -gridCore: GridCore
    +registerGridCore(gridCore: GridCore): void
    +getGridCore(): GridCore
    +agWire(loggerFactory: LoggerFactory): void
    +registerGridComp(gridPanel: GridPanel): void
    -registerCellEventListeners(): void
    -removeGridColumnListeners(): void
    -refreshListenersToColumnsForCellComps(): void
    -onDomLayoutChanged(): void
    +datasourceChanged(): void
    -onPageLoaded(refreshEvent?: ModelUpdatedEvent): void
    +getAllCellsForColumn(column: Column): HTMLElement[]
    +refreshFloatingRowComps(): void
    -refreshFloatingRows(rowComps: RowComp[], rowNodes: RowNode[], pinnedLeftContainerComp: RowContainerComponent, pinnedRightContainerComp: RowContainerComponent, bodyContainerComp: RowContainerComponent, fullWidthContainerComp: RowContainerComponent): void
    -onPinnedRowDataChanged(): void
    -onModelUpdated(refreshEvent: ModelUpdatedEvent): void
    -getRenderedIndexesForRowNodes(rowNodes: RowNode[]): string[]
    +redrawRows(rowNodes: RowNode[]): void
    -getCellToRestoreFocusToAfterRefresh(params: RefreshViewParams): CellPosition
    +redrawAfterModelUpdate(params?: RefreshViewParams): void
    -scrollToTopIfNewData(params: RefreshViewParams): void
    -sizeContainerToPageHeight(): void
    -getLockOnRefresh(): void
    -releaseLockOnRefresh(): void
    -restoreFocusedCell(cellPosition: CellPosition): void
    +stopEditing(cancel?: boolean): void
    +forEachCellComp(callback: (cellComp: CellComp) => void): void
    -forEachRowComp(callback: (key: string, rowComp: RowComp) => void): void
    +addRenderedRowListener(eventName: string, rowIndex: number, callback: Function): void
    +flashCells(params?: FlashCellsParams): void
    +refreshCells(params?: RefreshCellsParams): void
    +getCellRendererInstances(params: GetCellRendererInstancesParams): ICellRendererComp[]
    +getCellEditorInstances(params: GetCellRendererInstancesParams): ICellEditorComp[]
    +getEditingCells(): CellPosition[]
    -forEachCellCompFiltered(rowNodes?: RowNode[], columns?: (string | Column)[], callback?: (cellComp: CellComp) => void): void
    #destroy(): void
    -binRowComps(recycleRows: boolean): { [key: string]: RowComp; }
    -removeRowComps(rowsToRemove: any[]): void
    +redrawAfterScroll(): void
    -removeRowCompsNotToDraw(indexesToDraw: number[]): void
    -calculateIndexesToDraw(rowsToRecycle?: { [key: string]: RowComp; }): number[]
    -redraw(rowsToRecycle?: { [key: string]: RowComp; }, animate?: boolean, afterScroll?: boolean): void
    -flushContainers(rowComps: RowComp[]): void
    -onDisplayedColumnsChanged(): void
    -redrawFullWidthEmbeddedRows(): void
    +refreshFullWidthRows(rowNodesToRefresh?: RowNode[]): void
    -createOrUpdateRowComp(rowIndex: number, rowsToRecycle: { [key: string]: RowComp; }, animate: boolean, afterScroll: boolean): RowComp
    -destroyRowComps(rowCompsMap: { [key: string]: RowComp; }, animate: boolean): void
    -checkAngularCompile(): void
    -workOutFirstAndLastRowsToRender(): void
    -ensureAllRowsInRangeHaveHeightsCalculated(topPixel: number, bottomPixel: number): void
    +getFirstVirtualRenderedRow(): number
    +getLastVirtualRenderedRow(): number
    -doNotUnVirtualiseRow(rowComp: RowComp): boolean
    -createRowComp(rowNode: RowNode, animate: boolean, afterScroll: boolean): RowComp
    +getRenderedNodes(): RowNode[]
    +navigateToNextCell(event: KeyboardEvent, key: number, currentCell: CellPosition, allowUserOverride: boolean): void
    -getNormalisedPosition(cellPosition: CellPosition): CellPosition
    -tryToFocusFullWidthRow(position: RowPosition | CellPosition, backwards?: boolean): boolean
    -focusPosition(cellPosition: CellPosition): void
    -isValidNavigateCell(cell: CellPosition): boolean
    -getLastCellOfColSpan(cell: CellPosition): CellPosition
    +ensureCellVisible(gridCell: CellPosition): void
    +startEditingCell(gridCell: CellPosition, keyPress?: number, charPress?: string): void
    -getRowCompByPosition(rowPosition: RowPosition): RowComp
    +getComponentForCell(cellPosition: CellPosition): CellComp
    +getRowNode(gridRow: RowPosition): RowNode
    +onTabKeyDown(previousRenderedCell: CellComp | RowComp, keyboardEvent: KeyboardEvent): void
    +tabToNextCell(backwards: boolean): boolean
    -moveToCellAfter(previousRenderedCell: CellComp | RowComp, backwards: boolean): boolean
    -moveToNextEditingCell(previousRenderedCell: CellComp, backwards: boolean): boolean
    -moveToNextEditingRow(previousRenderedCell: CellComp, backwards: boolean): boolean
    -moveToNextCellNotEditing(previousRenderedCell: CellComp | RowComp, backwards: boolean): boolean
    -moveEditToNextCellOrRow(previousRenderedCell: CellComp, nextRenderedCell: CellComp): void
    -findNextCellToFocusOn(gridCell: CellPosition, backwards: boolean, startEditing: boolean): CellComp | RowComp
    -lookupRowNodeForCell(cell: CellPosition): RowNode
    +isRangeInRenderedViewport(startIndex: number, endIndex: number): boolean
}
interface RefreshViewParams {
    +recycleRows?: boolean
    +animate?: boolean
    +suppressKeepFocus?: boolean
    +onlyBody?: boolean
    +newData?: boolean
    +newPage?: boolean
}
interface IViewportDatasource {
    +init(params: IViewportDatasourceParams): void
    +setViewportRange(firstRow: number, lastRow: number): void
    +destroy(): void
}
interface IViewportDatasourceParams {
    +setRowCount: (count: number, keepRenderedRows: boolean) => void
    +setRowData: (rowData: { [key: number]: any; }) => void
    +getRow: (rowIndex: number) => RowNode
}
interface IAggFuncService {
    +addAggFuncs(aggFuncs: { [key: string]: IAggFunc; }): void
    +addAggFunc(key: string, aggFunc: IAggFunc): void
    +clear(): void
    +getDefaultAggFunc(column: Column): string
    +getFuncNames(column: Column): string[]
}
interface BaseExportParams {
    +skipHeader?: boolean
    +columnGroups?: boolean
    +skipFooters?: boolean
    +skipGroups?: boolean
    +skipPinnedTop?: boolean
    +skipPinnedBottom?: boolean
    +suppressQuotes?: boolean
    +columnKeys?: (string | Column)[]
    +fileName?: string
    +allColumns?: boolean
    +onlySelected?: boolean
    +onlySelectedAllPages?: boolean
    +shouldRowBeSkipped(params: ShouldRowBeSkippedParams): boolean
    +processCellCallback(params: ProcessCellForExportParams): string
    +processHeaderCallback(params: ProcessHeaderForExportParams): string
    +processGroupHeaderCallback(params: ProcessGroupHeaderForExportParams): string
    +processRowGroupCallback(params: ProcessRowGroupForExportParams): string
}
interface ExportParams<T> extends BaseExportParams {
    +customHeader?: T
    +customFooter?: T
    +getCustomContentBelowRow?: (params: ProcessRowGroupForExportParams) => T | undefined
}
interface CsvCell {
    +data: CsvCellData
    +mergeAcross?: number
}
interface CsvCellData {
    +value: string
}
interface CsvExportParams extends ExportParams {
    +columnSeparator?: string
}
interface ShouldRowBeSkippedParams {
    +node: RowNode
    +api: GridApi
    +context: any
}
interface ProcessCellForExportParams {
    +value: any
    +node?: RowNode
    +column: Column
    +api: GridApi
    +columnApi: ColumnApi
    +context: any
    +type: string
}
interface ProcessHeaderForExportParams {
    +column: Column
    +api: GridApi
    +columnApi: ColumnApi
    +context: any
}
interface ProcessGroupHeaderForExportParams {
    +columnGroup: ColumnGroup
    +api: GridApi
    +columnApi: ColumnApi
    +context: any
}
interface ProcessRowGroupForExportParams {
    +node: RowNode
    +api: GridApi
    +columnApi: ColumnApi
    +context: any
}
interface XmlElement {
    +name: string
    +properties?: XmlAttributes
    +children?: XmlElement[]
    +textNode?: string
}
interface HeaderElement {
    +version?: string
    +standalone?: string
    +encoding?: string
}
interface XmlAttributes {
    +prefixedAttributes?: PrefixedXmlAttributes[]
    +rawMap?: any
}
interface PrefixedXmlAttributes {
    +prefix: string
    +map: any
}
interface ExcelWorksheet {
    +name: string
    +table: ExcelTable
}
interface ExcelTable {
    +columns: ExcelColumn[]
    +rows: ExcelRow[]
}
interface ExcelColumn {
    +min?: number
    +max?: number
    +width?: number
    +s?: number
    +hidden?: boolean
    +bestFit?: boolean
}
interface ExcelRow {
    +index?: number
    +collapsed?: boolean
    +hidden?: boolean
    +height?: number
    +outlineLevel?: number
    +s?: number
    +cells: ExcelCell[]
}
interface ExcelCell {
    +ref?: string
    +styleId?: string
    +data: ExcelData
    +mergeAcross?: number
}
interface ExcelData {
    +type: ExcelDataType | ExcelOOXMLDataType
    +value: string
}
interface ExcelExportParams extends ExportParams {
    +sheetName?: string
    +suppressTextAsCDATA?: boolean
    +exportMode?: "xlsx" | "xml"
    +rowHeight?: number
    +headerRowHeight?: number
}
interface IExcelCreator {
    +exportDataAsExcel(params?: ExcelExportParams): void
    +getDataAsExcel(params?: ExcelExportParams): string | Blob
}
interface ExcelStyle {
    +id: string
    +name?: string
    +alignment: ExcelAlignment
    +borders: ExcelBorders
    +font: ExcelFont
    +interior: ExcelInterior
    +numberFormat: ExcelNumberFormat
    +protection: ExcelProtection
    +dataType?: string
}
interface ExcelProtection {
    +protected: boolean
    +hideFormula: boolean
}
interface ExcelNumberFormat {
    +format: string
}
interface ExcelAlignment {
    +vertical: string
    +indent: number
    +horizontal: string
    +readingOrder: string
    +rotate: number
    +shrinkToFit: boolean
    +verticalText: boolean
    +wrapText: boolean
}
interface ExcelBorders {
    +borderBottom: ExcelBorder
    +borderLeft: ExcelBorder
    +borderTop: ExcelBorder
    +borderRight: ExcelBorder
}
interface ExcelBorder {
    +lineStyle: string
    +weight: number
    +color: string
}
interface ExcelFont {
    +bold: boolean
    +color: string
    +fontName: string
    +italic: boolean
    +outline: boolean
    +shadow: boolean
    +size: number
    +strikeThrough: boolean
    +underline: string
    +verticalAlign: string
    +charSet: number
    +family: string
}
interface ExcelInterior {
    +color: string
    +pattern: string
    +patternColor: string
}
interface ExcelXMLTemplate {
    +getTemplate(styleProperties?: ExcelColumn | ExcelRow | ExcelCell | ExcelStyle | ExcelWorksheet): XmlElement
}
interface ExcelContentType {
    +name: "Default" | "Override"
    +ContentType: string
    +Extension?: string
    +PartName?: string
}
interface ExcelOOXMLTemplate {
    +getTemplate(config?: any, idx?: number): XmlElement
    +convertType(type: string): string
}
interface ExcelRelationship {
    +Id: string
    +Type: string
    +Target: string
}
interface IDatasource {
    +rowCount?: number
    +getRows(params: IGetRowsParams): void
    +destroy(): void
}
interface IGetRowsParams {
    +startRow: number
    +endRow: number
    +successCallback(rowsThisBlock: any[], lastRow?: number): void
    +failCallback(): void
    +sortModel: any
    +filterModel: any
    +context: any
}
interface IStatusBarService {
    +registerStatusPanel(key: string, component: IStatusPanelComp): void
    +getStatusPanel(key: string): IStatusPanelComp
}
interface IImmutableService {
    +createTransactionForRowData(data: any[]): [RowDataTransaction, { [id: string]: number; }]
}
interface IInfiniteRowModel extends IRowModel {
    +setDatasource(datasource: IDatasource): void
    +refreshCache(): void
    +purgeCache(): void
    +setRowCount(rowCount: number, maxRowFound?: boolean): void
}
interface ICsvCreator {
    +getDataAsCsv(params?: CsvExportParams): string
    +exportDataAsCsv(params?: CsvExportParams): string
}
interface AgChartThemePalette {
    +fills: string[]
    +strokes: string[]
}
interface AgChartThemeOptions {
    +palette?: AgChartThemePalette
    +overrides?: AgChartThemeOverrides
}
interface AgChartTheme extends AgChartThemeOptions {
    +baseTheme?: AgChartThemeName
}
interface AgChartThemeOverrides {
    +cartesian?: AgCartesianChartOptions<AgCartesianAxesTheme, AgCartesianSeriesTheme>
    +column?: AgCartesianChartOptions<AgCartesianAxesTheme, AgBarSeriesOptions>
    +bar?: AgCartesianChartOptions<AgCartesianAxesTheme, AgBarSeriesOptions>
    +line?: AgCartesianChartOptions<AgCartesianAxesTheme, AgLineSeriesOptions>
    +area?: AgCartesianChartOptions<AgCartesianAxesTheme, AgAreaSeriesOptions>
    +scatter?: AgCartesianChartOptions<AgCartesianAxesTheme, AgScatterSeriesOptions>
    +histogram?: AgCartesianChartOptions<AgCartesianAxesTheme, AgHistogramSeriesOptions>
    +polar?: AgPolarChartOptions<AgPolarAxesTheme, AgPolarSeriesTheme>
    +pie?: AgPolarChartOptions<AgPolarAxesTheme, AgPieSeriesOptions>
    +common?: any
}
interface AgCartesianAxesTheme {
    +number?: Omit<AgNumberAxisOptions, "type">
    +category?: Omit<AgCategoryAxisOptions, "type">
    +groupedCategory?: Omit<AgGroupedCategoryAxisOptions, "type">
    +time?: Omit<AgTimeAxisOptions, "type">
}
interface AgCartesianSeriesTheme {
    +line?: AgLineSeriesOptions
    +scatter?: AgScatterSeriesOptions
    +area?: AgAreaSeriesOptions
    +bar?: AgBarSeriesOptions
    +histogram?: AgHistogramSeriesOptions
}
interface AgPolarAxesTheme
interface AgPolarSeriesTheme {
    +pie?: AgPieSeriesOptions
}
interface AgChartPaddingOptions {
    +top?: number
    +right?: number
    +bottom?: number
    +left?: number
}
interface AgChartLabelOptions {
    +enabled?: boolean
    +fontStyle?: FontStyle
    +fontWeight?: FontWeight
    +fontSize?: number
    +fontFamily?: string
    +color?: string
}
interface AgDropShadowOptions {
    +enabled?: boolean
    +color?: string
    +xOffset?: number
    +yOffset?: number
    +blue?: number
}
interface AgChartCaptionOptions {
    +enabled?: boolean
    +padding?: AgChartPaddingOptions
    +text?: string
    +fontStyle?: FontStyle
    +fontWeight?: FontWeight
    +fontSize?: number
    +fontFamily?: string
    +color?: string
}
interface AgNavigatorMaskOptions {
    +fill?: string
    +stroke?: string
    +strokeWidth?: number
    +fillOpacity?: number
}
interface AgNavigatorHandleOptions {
    +fill?: string
    +stroke?: string
    +strokeWidth?: number
    +width?: number
    +height?: number
    +gripLineGap?: number
    +gripLineLength?: number
}
interface AgNavigatorOptions {
    +enabled?: boolean
    +height?: number
    +margin?: number
    +min?: number
    +max?: number
    +mask?: AgNavigatorMaskOptions
    +minHandle?: AgNavigatorHandleOptions
    +maxHandle?: AgNavigatorHandleOptions
}
interface AgChartLegendMarkerOptions {
    +size?: number
    +shape?: string | (new () => any)
    +padding?: number
    +strokeWidth?: number
}
interface AgChartLegendLabelOptions {
    +color?: string
    +fontStyle?: FontStyle
    +fontWeight?: FontWeight
    +fontSize?: number
    +fontFamily?: string
}
interface AgChartLegendItemOptions {
    +marker?: AgChartLegendMarkerOptions
    +label?: AgChartLegendLabelOptions
    +paddingX?: number
    +paddingY?: number
}
interface AgChartLegendOptions {
    +enabled?: boolean
    +position?: AgChartLegendPosition
    +spacing?: number
    +item?: AgChartLegendItemOptions
    +layoutHorizontalSpacing?: number
    +layoutVerticalSpacing?: number
    +itemSpacing?: number
    +markerShape?: string | (new () => any)
    +markerSize?: number
    +strokeWidth?: number
    +color?: string
    +fontStyle?: FontStyle
    +fontWeight?: FontWeight
    +fontSize?: number
    +fontFamily?: string
}
interface AgBaseChartOptions {
    +container?: HTMLElement
    +data?: any[]
    +width?: number
    +height?: number
    +autoSize?: boolean
    +padding?: AgChartPaddingOptions
    +background?: { visible?: boolean; fill?: string; }
    +title?: AgChartCaptionOptions
    +subtitle?: AgChartCaptionOptions
    +tooltipClass?: string
    +tooltipTracking?: boolean
    +navigator?: AgNavigatorOptions
    +legend?: AgChartLegendOptions
    +listeners?: { [x: string]: Function; }
    +theme?: string | AgChartTheme
}
interface AgBaseAxisOptions {
    +keys?: string[]
}
interface AgAxisLineOptions {
    +width?: number
    +color?: string
}
interface AgAxisTickOptions {
    +width?: number
    +size?: number
    +color?: string
    +count?: any
}
interface AgAxisLabelFormatterParams {
    +value: any
    +index: number
    +fractionDigits?: number
    +formatter?: (x: any) => string
}
interface AgAxisLabelOptions {
    +fontStyle?: FontStyle
    +fontWeight?: FontWeight
    +fontSize?: number
    +fontFamily?: string
    +padding?: number
    +color?: string
    +rotation?: number
    +format?: string
    +formatter?: (params: AgAxisLabelFormatterParams) => string
}
interface AgAxisGridStyle {
    +stroke?: string
    +lineDash?: number[]
}
interface AgBaseCartesianAxisOptions extends AgBaseAxisOptions {
    +position?: AgCartesianAxisPosition
    +title?: AgChartCaptionOptions
    +line?: AgAxisLineOptions
    +tick?: AgAxisTickOptions
    +label?: AgAxisLabelOptions
    +gridStyle?: AgAxisGridStyle[]
}
interface AgNumberAxisOptions extends AgBaseCartesianAxisOptions {
    +type: "number"
    +nice?: boolean
    +min?: number
    +max?: number
}
interface AgCategoryAxisOptions extends AgBaseCartesianAxisOptions {
    +type: "category"
    +paddingInner?: number
    +paddingOuter?: number
}
interface AgGroupedCategoryAxisOptions extends AgBaseCartesianAxisOptions {
    +type: "groupedCategory"
}
interface AgTimeAxisOptions extends AgBaseCartesianAxisOptions {
    +type: "time"
    +nice?: boolean
}
interface AgBaseSeriesOptions {
    +tooltipEnabled?: boolean
    +data?: any[]
    +visible?: boolean
    +showInLegend?: boolean
    +listeners?: { [x: string]: Function; }
}
interface AgTooltipRendererResult {
    +title?: string
    +content?: string
}
interface AgSeriesTooltipRendererParams {
    +datum: any
    +title?: string
    +color?: string
}
interface AgCartesianSeriesTooltipRendererParams extends AgSeriesTooltipRendererParams {
    +xKey: string
    +xValue?: any
    +xName?: string
    +yKey: string
    +yValue?: any
    +yName?: string
}
interface AgPolarSeriesTooltipRendererParams extends AgSeriesTooltipRendererParams {
    +angleKey: string
    +angleValue?: any
    +angleName?: string
    +radiusKey?: string
    +radiusValue?: any
    +radiusName?: string
}
interface AgScatterSeriesTooltipRendererParams extends AgCartesianSeriesTooltipRendererParams {
    +sizeKey?: string
    +sizeName?: string
    +labelKey?: string
    +labelName?: string
}
interface AgSeriesMarker {
    +enabled?: boolean
    +shape?: string
    +size?: number
    +maxSize?: number
    +fill?: string
    +stroke?: string
    +strokeWidth?: number
}
interface AgCartesianSeriesMarkerFormatterParams {
    +xKey: string
    +yKey: string
}
interface AgCartesianSeriesMarkerFormat {
    +fill?: string
    +stroke?: string
    +strokeWidth?: number
    +size?: number
}
interface AgCartesianSeriesMarker extends AgSeriesMarker {
    +formatter?: (params: AgCartesianSeriesMarkerFormatterParams) => AgCartesianSeriesMarkerFormat
}
interface AgSeriesTooltip {
    +enabled?: boolean
}
interface AgLineSeriesTooltip extends AgSeriesTooltip {
    +renderer?: (params: AgCartesianSeriesTooltipRendererParams) => string | AgTooltipRendererResult
}
interface AgLineSeriesOptions extends AgBaseSeriesOptions {
    +type?: "line"
    +marker?: AgCartesianSeriesMarker
    +xKey?: string
    +yKey?: string
    +xName?: string
    +yName?: string
    +title?: string
    +stroke?: string
    +strokeWidth?: number
    +strokeOpacity?: number
    +lineDash?: number[]
    +lineDashOffset?: number
    +highlightStyle?: { fill?: string; stroke?: string; }
    +tooltip?: AgLineSeriesTooltip
    +tooltipRenderer?: (params: AgCartesianSeriesTooltipRendererParams) => string | AgTooltipRendererResult
}
interface AgScatterSeriesTooltip extends AgSeriesTooltip {
    +renderer?: (params: AgScatterSeriesTooltipRendererParams) => string | AgTooltipRendererResult
}
interface AgScatterSeriesOptions extends AgBaseSeriesOptions {
    +type?: "scatter"
    +marker?: AgCartesianSeriesMarker
    +xKey?: string
    +yKey?: string
    +xName?: string
    +yName?: string
    +title?: string
    +fill?: string
    +stroke?: string
    +strokeWidth?: number
    +fillOpacity?: number
    +strokeOpacity?: number
    +highlightStyle?: { fill?: string; stroke?: string; }
    +tooltip?: AgScatterSeriesTooltip
    +tooltipRenderer?: (params: AgScatterSeriesTooltipRendererParams) => string | AgTooltipRendererResult
}
interface AgAreaSeriesTooltip extends AgSeriesTooltip {
    +renderer?: (params: AgCartesianSeriesTooltipRendererParams) => string | AgTooltipRendererResult
    +format?: string
}
interface AgAreaSeriesOptions extends AgBaseSeriesOptions {
    +type?: "area"
    +marker?: AgCartesianSeriesMarker
    +xKey?: string
    +yKeys?: string[]
    +xName?: string
    +yNames?: string[]
    +fills?: string[]
    +strokes?: string[]
    +strokeWidth?: number
    +fillOpacity?: number
    +strokeOpacity?: number
    +lineDash?: number[]
    +lineDashOffset?: number
    +shadow?: AgDropShadowOptions
    +highlightStyle?: { fill?: string; stroke?: string; }
    +tooltip?: AgAreaSeriesTooltip
    +tooltipRenderer?: (params: AgCartesianSeriesTooltipRendererParams) => string | AgTooltipRendererResult
}
interface AgBarSeriesLabelOptions extends AgChartLabelOptions {
    +formatter?: (params: {    value: number;}) => string
}
interface AgBarSeriesFormatterParams {
    +datum: any
    +fill?: string
    +stroke?: string
    +strokeWidth: number
    +highlighted: boolean
    +xKey: string
    +yKey: string
}
interface AgBarSeriesFormat {
    +fill?: string
    +stroke?: string
    +strokeWidth?: number
}
interface AgBarSeriesTooltip extends AgSeriesTooltip {
    +renderer?: (params: AgCartesianSeriesTooltipRendererParams) => string | AgTooltipRendererResult
}
interface AgBarSeriesOptions extends AgBaseSeriesOptions {
    +type?: "bar" | "column"
    +grouped?: boolean
    +normalizedTo?: number
    +xKey?: string
    +yKeys?: string[] | string[][]
    +xName?: string
    +yNames?: string[] | { [x: string]: string; }
    +fills?: string[]
    +strokes?: string[]
    +strokeWidth?: number
    +fillOpacity?: number
    +strokeOpacity?: number
    +lineDash?: number[]
    +lineDashOffset?: number
    +shadow?: AgDropShadowOptions
    +highlightStyle?: { fill?: string; stroke?: string; }
    +label?: AgBarSeriesLabelOptions
    +tooltip?: AgBarSeriesTooltip
    +tooltipRenderer?: (params: AgCartesianSeriesTooltipRendererParams) => string | AgTooltipRendererResult
    +formatter?: (params: AgBarSeriesFormatterParams) => AgBarSeriesFormat
}
interface AgHistogramSeriesLabelOptions extends AgChartLabelOptions {
    +formatter?: (params: {    value: number;}) => string
}
interface AgHistogramSeriesTooltip extends AgSeriesTooltip {
    +renderer?: (params: AgCartesianSeriesTooltipRendererParams) => string | AgTooltipRendererResult
}
interface AgHistogramSeriesOptions extends AgBaseSeriesOptions {
    +type?: "histogram"
    +fill?: string
    +stroke?: string
    +fillOpacity?: number
    +strokeOpacity?: number
    +strokeWidth?: number
    +lineDash?: number[]
    +lineDashOffset?: number
    +xKey?: string
    +xName?: string
    +yKey?: string
    +yName?: string
    +areaPlot?: boolean
    +bins?: [number, number][]
    +binCount?: number
    +aggregation?: "count" | "sum" | "mean"
    +shadow?: AgDropShadowOptions
    +highlightStyle?: { fill?: string; stroke?: string; }
    +label?: AgHistogramSeriesLabelOptions
    +tooltip?: AgHistogramSeriesTooltip
    +tooltipRenderer?: (params: AgCartesianSeriesTooltipRendererParams) => string | AgTooltipRendererResult
}
interface AgPieSeriesLabelOptions extends AgChartLabelOptions {
    +offset?: number
    +minAngle?: number
}
interface AgPieSeriesFormatterParams {
    +datum: any
    +fill?: string
    +stroke?: string
    +strokeWidth: number
    +highlighted: boolean
    +angleKey: string
    +radiusKey?: string
}
interface AgPieSeriesFormat {
    +fill?: string
    +stroke?: string
    +strokeWidth?: number
}
interface AgPieSeriesTooltip extends AgSeriesTooltip {
    +renderer?: (params: AgPieSeriesTooltipRendererParams) => string | AgTooltipRendererResult
}
interface AgPieSeriesOptions extends AgBaseSeriesOptions {
    +type?: "pie"
    +title?: AgChartCaptionOptions
    +label?: AgPieSeriesLabelOptions
    +callout?: { colors?: string[]; length?: number; strokeWidth?: number; }
    +angleKey?: string
    +angleName?: string
    +radiusKey?: string
    +radiusName?: string
    +labelKey?: string
    +labelName?: string
    +fills?: string[]
    +strokes?: string[]
    +fillOpacity?: number
    +strokeOpacity?: number
    +strokeWidth?: number
    +lineDash?: number[]
    +lineDashOffset?: number
    +rotation?: number
    +outerRadiusOffset?: number
    +innerRadiusOffset?: number
    +shadow?: AgDropShadowOptions
    +highlightStyle?: { fill?: string; stroke?: string; }
    +tooltip?: AgPieSeriesTooltip
    +tooltipRenderer?: (params: AgPieSeriesTooltipRendererParams) => string | AgTooltipRendererResult
    +formatter?: (params: AgPieSeriesFormatterParams) => AgPieSeriesFormat
}
interface AgPieSeriesTooltipRendererParams extends AgPolarSeriesTooltipRendererParams {
    +labelKey?: string
    +labelName?: string
}
interface AgCartesianChartOptions<TAxisOptions, TSeriesOptions> extends AgBaseChartOptions {
    +type?: "line" | "groupedCategory" | "scatter" | "area" | "bar" | "column" | "cartesian"
    +axes?: TAxisOptions
    +series?: TSeriesOptions
}
interface AgPolarChartOptions<TAxisOptions, TSeriesOptions> extends AgBaseChartOptions {
    +type?: "pie" | "polar"
    +axes?: TAxisOptions
    +series?: TSeriesOptions
}
class RowNodeBlockLoader extends BeanStub {
    -maxConcurrentRequests: number
    -checkBlockToLoadDebounce: () => void
    -activeBlockLoadsCount: number
    -blocks: RowNodeBlock[]
    -logger: Logger
    -active: boolean
    -postConstruct(): void
    -setBeans(loggerFactory: LoggerFactory): void
    +addBlock(block: RowNodeBlock): void
    +removeBlock(block: RowNodeBlock): void
    #destroy(): void
    -loadComplete(): void
    +checkBlockToLoad(): void
    -performCheckBlocksToLoad(): void
    +getBlockState(): any
    -printCacheStatus(): void
    +isLoading(): boolean
    +{static} BLOCK_LOADER_FINISHED_EVENT: string
}
interface StartEditingCellParams {
    +rowIndex: number
    +colKey: string | Column
    +rowPinned?: string
    +keyPress?: number
    +charPress?: string
}
interface GetCellsParams {
    +rowNodes?: RowNode[]
    +columns?: (string | Column)[]
}
interface RefreshCellsParams extends GetCellsParams {
    +force?: boolean
    +suppressFlash?: boolean
}
interface FlashCellsParams extends GetCellsParams {
    +flashDelay?: number
    +fadeDelay?: number
}
interface GetCellRendererInstancesParams extends GetCellsParams
interface GetCellEditorInstancesParams extends GetCellsParams
interface RedrawRowsParams {
    +rowNodes?: RowNode[]
}
interface CreateRangeChartParams {
    +cellRange: CellRangeParams
    +chartType: ChartType
    +chartThemeName?: string
    +chartContainer?: HTMLElement
    +suppressChartRanges?: boolean
    +aggFunc?: string | IAggFunc
    +chartThemeOverrides?: AgChartThemeOverrides
    +unlinkChart?: boolean
    +processChartOptions?: (params: ProcessChartOptionsParams) => ChartOptions<any>
}
interface CreatePivotChartParams {
    +chartType: ChartType
    +chartThemeName?: string
    +chartContainer?: HTMLElement
    +chartThemeOverrides?: AgChartThemeOverrides
    +unlinkChart?: boolean
    +processChartOptions?: (params: ProcessChartOptionsParams) => ChartOptions<any>
}
interface CreateCrossFilterChartParams {
    +cellRange: CellRangeParams
    +chartType: ChartType
    +chartThemeName?: string
    +chartContainer?: HTMLElement
    +suppressChartRanges?: boolean
    +aggFunc?: string | IAggFunc
    +chartThemeOverrides?: AgChartThemeOverrides
    +unlinkChart?: boolean
}
interface DetailGridInfo {
    +api?: GridApi
    +columnApi?: ColumnApi
    +id: string
}
class GridApi {
    -immutableService: IImmutableService
    -csvCreator: ICsvCreator
    -excelCreator: IExcelCreator
    -rowRenderer: RowRenderer
    -filterManager: FilterManager
    -columnController: ColumnController
    -selectionController: SelectionController
    -gridOptionsWrapper: GridOptionsWrapper
    -valueService: ValueService
    -alignedGridsService: AlignedGridsService
    -eventService: EventService
    -pinnedRowModel: PinnedRowModel
    -context: Context
    -rowModel: IRowModel
    -sortController: SortController
    -paginationProxy: PaginationProxy
    -focusController: FocusController
    -dragAndDropService: DragAndDropService
    -rangeController: IRangeController
    -clipboardService: IClipboardService
    -aggFuncService: IAggFuncService
    -menuFactory: IMenuFactory
    -contextMenuFactory: IContextMenuFactory
    -valueCache: ValueCache
    -animationFrameService: AnimationFrameService
    -statusBarService: IStatusBarService
    -chartService: IChartService
    -undoRedoService: UndoRedoService
    -rowNodeBlockLoader: RowNodeBlockLoader
    -serverSideTransactionManager: IServerSideTransactionManager
    -gridPanel: GridPanel
    -gridCore: GridCore
    -headerRootComp: HeaderRootComp
    -clientSideRowModel: IClientSideRowModel
    -infiniteRowModel: IInfiniteRowModel
    -serverSideRowModel: IServerSideRowModel
    -detailGridInfoMap: { [id: string]: DetailGridInfo; }
    -destroyCalled: boolean
    +registerGridComp(gridPanel: GridPanel): void
    +registerGridCore(gridCore: GridCore): void
    +registerHeaderRootComp(headerRootComp: HeaderRootComp): void
    -init(): void
    +__getAlignedGridService(): AlignedGridsService
    +addDetailGridInfo(id: string, gridInfo: DetailGridInfo): void
    +removeDetailGridInfo(id: string): void
    +getDetailGridInfo(id: string): DetailGridInfo
    +forEachDetailGridInfo(callback: (gridInfo: DetailGridInfo, index: number) => void): void
    +getDataAsCsv(params?: CsvExportParams): string
    +exportDataAsCsv(params?: CsvExportParams): void
    +getDataAsExcel(params?: ExcelExportParams): string | Blob
    +exportDataAsExcel(params?: ExcelExportParams): void
    +setEnterpriseDatasource(datasource: IServerSideDatasource): void
    +setGridAriaProperty(property: string, value: string): void
    +setServerSideDatasource(datasource: IServerSideDatasource): void
    +setDatasource(datasource: IDatasource): void
    +setViewportDatasource(viewportDatasource: IViewportDatasource): void
    +setRowData(rowData: any[]): void
    +setFloatingTopRowData(rows: any[]): void
    +setFloatingBottomRowData(rows: any[]): void
    +getFloatingTopRowCount(): number
    +getFloatingBottomRowCount(): number
    +getFloatingTopRow(index: number): RowNode
    +getFloatingBottomRow(index: number): RowNode
    +setPinnedTopRowData(rows: any[]): void
    +setPinnedBottomRowData(rows: any[]): void
    +getPinnedTopRowCount(): number
    +getPinnedBottomRowCount(): number
    +getPinnedTopRow(index: number): RowNode
    +getPinnedBottomRow(index: number): RowNode
    +setColumnDefs(colDefs: (ColDef | ColGroupDef)[], source?: ColumnEventType): void
    +setAutoGroupColumnDef(colDef: ColDef, source?: ColumnEventType): void
    +expireValueCache(): void
    +getVerticalPixelRange(): { top: number; bottom: number; }
    +getHorizontalPixelRange(): { left: number; right: number; }
    +setAlwaysShowHorizontalScroll(show: boolean): void
    +setAlwaysShowVerticalScroll(show: boolean): void
    +refreshToolPanel(): void
    +refreshCells(params?: RefreshCellsParams): void
    +flashCells(params?: FlashCellsParams): void
    +redrawRows(params?: RedrawRowsParams): void
    +timeFullRedraw(count?: number): void
    +refreshView(): void
    +refreshRows(rowNodes: RowNode[]): void
    +rowDataChanged(rows: any): void
    +softRefreshView(): void
    +refreshGroupRows(): void
    +setFunctionsReadOnly(readOnly: boolean): void
    +refreshHeader(): void
    +isAnyFilterPresent(): boolean
    +isAdvancedFilterPresent(): boolean
    +isColumnFilterPresent(): boolean
    +isQuickFilterPresent(): boolean
    +getModel(): IRowModel
    +setRowNodeExpanded(rowNode: RowNode, expanded: boolean): void
    +onGroupExpandedOrCollapsed(deprecated_refreshFromIndex?: any): void
    +refreshInMemoryRowModel(step?: string): any
    +refreshClientSideRowModel(step?: string): any
    +isAnimationFrameQueueEmpty(): boolean
    +getRowNode(id: string): RowNode
    +getSizesForCurrentTheme(): { rowHeight: number; headerHeight: number; }
    +expandAll(): void
    +collapseAll(): void
    +getToolPanelInstance(id: string): IToolPanel
    +addVirtualRowListener(eventName: string, rowIndex: number, callback: Function): void
    +addRenderedRowListener(eventName: string, rowIndex: number, callback: Function): void
    +setQuickFilter(newFilter: any): void
    +selectIndex(index: any, tryMulti: any, suppressEvents: any): void
    +deselectIndex(index: number, suppressEvents?: boolean): void
    +selectNode(node: RowNode, tryMulti?: boolean, suppressEvents?: boolean): void
    +deselectNode(node: RowNode, suppressEvents?: boolean): void
    +selectAll(): void
    +deselectAll(): void
    +selectAllFiltered(): void
    +deselectAllFiltered(): void
    +recomputeAggregates(): void
    +sizeColumnsToFit(): void
    +showLoadingOverlay(): void
    +showNoRowsOverlay(): void
    +hideOverlay(): void
    +isNodeSelected(node: any): any
    +getSelectedNodesById(): { [nodeId: number]: RowNode; }
    +getSelectedNodes(): RowNode[]
    +getSelectedRows(): any[]
    +getBestCostNodeSelection(): any
    +getRenderedNodes(): RowNode[]
    +ensureColIndexVisible(index: any): void
    +ensureColumnVisible(key: string | Column): void
    +ensureIndexVisible(index: any, position?: string): void
    +ensureNodeVisible(comparator: any, position?: string): void
    +forEachLeafNode(callback: (rowNode: RowNode) => void): void
    +forEachNode(callback: (rowNode: RowNode, index: number) => void): void
    +forEachNodeAfterFilter(callback: (rowNode: RowNode, index: number) => void): void
    +forEachNodeAfterFilterAndSort(callback: (rowNode: RowNode, index: number) => void): void
    +getFilterApiForColDef(colDef: any): any
    +getFilterInstance(key: string | Column, callback?: (filter: IFilterComp) => void): IFilterComp
    +getFilterApi(key: string | Column): IFilterComp
    +destroyFilter(key: string | Column): void
    +getStatusPanel(key: string): IStatusPanelComp
    +getColumnDef(key: string | Column): ColDef
    +getColumnDefs(): (ColDef | ColGroupDef)[]
    +onFilterChanged(): void
    +onSortChanged(): void
    +setSortModel(sortModel: any, source?: ColumnEventType): void
    +getSortModel(): { colId: string; sort: string; }[]
    +setFilterModel(model: any): void
    +getFilterModel(): { [key: string]: any; }
    +getFocusedCell(): CellPosition
    +clearFocusedCell(): void
    +setFocusedCell(rowIndex: number, colKey: string | Column, floating?: string): void
    +setSuppressRowDrag(value: boolean): void
    +setSuppressMoveWhenRowDragging(value: boolean): void
    +setSuppressRowClickSelection(value: boolean): void
    +addRowDropZone(params: RowDropZoneParams): void
    +removeRowDropZone(params: RowDropZoneParams): void
    +getRowDropZoneParams(events: RowDropZoneEvents): RowDropZoneParams
    +setHeaderHeight(headerHeight?: number): void
    +setDomLayout(domLayout: string): void
    +setEnableCellTextSelection(selectable: boolean): void
    +setFillHandleDirection(direction: "y" | "x" | "xy"): void
    +setGroupHeaderHeight(headerHeight: number): void
    +setFloatingFiltersHeight(headerHeight: number): void
    +setPivotGroupHeaderHeight(headerHeight: number): void
    +setPivotHeaderHeight(headerHeight: number): void
    +isSideBarVisible(): boolean
    +setSideBarVisible(show: boolean): void
    +setSideBarPosition(position: "right" | "left"): void
    +openToolPanel(key: string): void
    +closeToolPanel(): void
    +getOpenedToolPanel(): string
    +getSideBar(): SideBarDef
    +setSideBar(def: SideBarDef): void
    +setSuppressClipboardPaste(value: boolean): void
    +isToolPanelShowing(): boolean
    +doLayout(): void
    +resetRowHeights(): void
    +setGroupRemoveSingleChildren(value: boolean): void
    +setGroupRemoveLowestSingleChildren(value: boolean): void
    +onRowHeightChanged(): void
    +getValue(colKey: string | Column, rowNode: RowNode): any
    +addEventListener(eventType: string, listener: Function): void
    +addGlobalListener(listener: Function): void
    +removeEventListener(eventType: string, listener: Function): void
    +removeGlobalListener(listener: Function): void
    +dispatchEvent(event: AgEvent): void
    +destroy(): void
    -cleanDownReferencesToAvoidMemoryLeakInCaseApplicationIsKeepingReferenceToDestroyedGrid(): void
    -warnIfDestroyed(methodName: string): boolean
    +resetQuickFilter(): void
    +getRangeSelections(): any
    +getCellRanges(): CellRange[]
    +camelCaseToHumanReadable(camelCase: string): string
    +addRangeSelection(deprecatedNoLongerUsed: any): void
    +addCellRange(params: CellRangeParams): void
    +clearRangeSelection(): void
    +undoCellEditing(): void
    +redoCellEditing(): void
    +getCurrentUndoSize(): number
    +getCurrentRedoSize(): number
    +getChartModels(): ChartModel[]
    +createRangeChart(params: CreateRangeChartParams): ChartRef
    +createCrossFilterChart(params: CreateRangeChartParams): ChartRef
    +restoreChart(chartModel: ChartModel, chartContainer?: HTMLElement): ChartRef
    +createPivotChart(params: CreatePivotChartParams): ChartRef
    +copySelectedRowsToClipboard(includeHeader: boolean, columnKeys?: (string | Column)[]): void
    +copySelectedRangeToClipboard(includeHeader: boolean): void
    +copySelectedRangeDown(): void
    +showColumnMenuAfterButtonClick(colKey: string | Column, buttonElement: HTMLElement): void
    +showColumnMenuAfterMouseClick(colKey: string | Column, mouseEvent: MouseEvent | Touch): void
    +hidePopupMenu(): void
    +setPopupParent(ePopupParent: HTMLElement): void
    +tabToNextCell(): boolean
    +tabToPreviousCell(): boolean
    +getCellRendererInstances(params?: GetCellRendererInstancesParams): ICellRendererComp[]
    +getCellEditorInstances(params?: GetCellEditorInstancesParams): ICellEditorComp[]
    +getEditingCells(): CellPosition[]
    +stopEditing(cancel?: boolean): void
    +startEditingCell(params: StartEditingCellParams): void
    +addAggFunc(key: string, aggFunc: IAggFunc): void
    +addAggFuncs(aggFuncs: { [key: string]: IAggFunc; }): void
    +clearAggFuncs(): void
    +applyServerSideTransaction(transaction: ServerSideTransaction): ServerSideTransactionResult
    +applyServerSideTransactionAsync(transaction: ServerSideTransaction, callback?: (res: ServerSideTransactionResult) => void): void
    +retryServerSideLoads(): void
    +flushServerSideAsyncTransactions(): void
    +applyTransaction(rowDataTransaction: RowDataTransaction): RowNodeTransaction
    +updateRowData(rowDataTransaction: RowDataTransaction): RowNodeTransaction
    +applyTransactionAsync(rowDataTransaction: RowDataTransaction, callback?: (res: RowNodeTransaction) => void): void
    +flushAsyncTransactions(): void
    +batchUpdateRowData(rowDataTransaction: RowDataTransaction, callback?: (res: RowNodeTransaction) => void): void
    +insertItemsAtIndex(index: number, items: any[], skipRefresh?: boolean): void
    +removeItems(rowNodes: RowNode[], skipRefresh?: boolean): void
    +addItems(items: any[], skipRefresh?: boolean): void
    +refreshVirtualPageCache(): void
    +refreshInfinitePageCache(): void
    +refreshInfiniteCache(): void
    +purgeVirtualPageCache(): void
    +purgeInfinitePageCache(): void
    +purgeInfiniteCache(): void
    +purgeEnterpriseCache(route?: string[]): void
    +purgeServerSideCache(route?: string[]): void
    +refreshServerSideStore(params: RefreshStoreParams): void
    +getServerSideStoreState(): ServerSideStoreState[]
    +getVirtualRowCount(): number
    +getInfiniteRowCount(): number
    +isMaxRowFound(): boolean
    +isLastRowIndexKnown(): boolean
    +setVirtualRowCount(rowCount: number, maxRowFound?: boolean): void
    +setInfiniteRowCount(rowCount: number, maxRowFound?: boolean): void
    +setRowCount(rowCount: number, maxRowFound?: boolean): void
    +getVirtualPageState(): any
    +getInfinitePageState(): any
    +getCacheBlockState(): any
    +checkGridSize(): void
    +getFirstRenderedRow(): number
    +getFirstDisplayedRow(): number
    +getLastRenderedRow(): number
    +getLastDisplayedRow(): number
    +getDisplayedRowAtIndex(index: number): RowNode
    +getDisplayedRowCount(): number
    +paginationIsLastPageFound(): boolean
    +paginationGetPageSize(): number
    +paginationSetPageSize(size?: number): void
    +paginationGetCurrentPage(): number
    +paginationGetTotalPages(): number
    +paginationGetRowCount(): number
    +paginationGoToNextPage(): void
    +paginationGoToPreviousPage(): void
    +paginationGoToFirstPage(): void
    +paginationGoToLastPage(): void
    +paginationGoToPage(page: number): void
}
interface GridOptions {
    +suppressBrowserResizeObserver?: boolean
    +rowDragManaged?: boolean
    +suppressRowDrag?: boolean
    +suppressMoveWhenRowDragging?: boolean
    +enableMultiRowDragging?: boolean
    +ensureDomOrder?: boolean
    +suppressAggFilteredOnly?: boolean
    +showOpenedGroup?: boolean
    +deltaRowDataMode?: boolean
    +deltaColumnMode?: boolean
    +applyColumnDefOrder?: boolean
    +immutableData?: boolean
    +immutableColumns?: boolean
    +scrollbarWidth?: number
    +suppressRowClickSelection?: boolean
    +suppressRowHoverHighlight?: boolean
    +suppressCellSelection?: boolean
    +suppressClearOnFillReduction?: boolean
    +suppressMaintainUnsortedOrder?: boolean
    +sortingOrder?: string[]
    +suppressMultiSort?: boolean
    +multiSortKey?: string
    +accentedSort?: boolean
    +deltaSort?: boolean
    +suppressHorizontalScroll?: boolean
    +alwaysShowHorizontalScroll?: boolean
    +alwaysShowVerticalScroll?: boolean
    +debounceVerticalScrollbar?: boolean
    +unSortIcon?: boolean
    +rowBuffer?: number
    +tooltipShowDelay?: number
    +tooltipMouseTrack?: boolean
    +enableRtl?: boolean
    +enableBrowserTooltips?: boolean
    +colResizeDefault?: string
    +enableCellExpressions?: boolean
    +enableCellTextSelection?: boolean
    +enableGroupEdit?: boolean
    +enterMovesDownAfterEdit?: boolean
    +enterMovesDown?: boolean
    +suppressMiddleClickScrolls?: boolean
    +preventDefaultOnContextMenu?: boolean
    +suppressPreventDefaultOnMouseWheel?: boolean
    +suppressScrollOnNewData?: boolean
    +suppressMenuHide?: boolean
    +singleClickEdit?: boolean
    +suppressClickEdit?: boolean
    +suppressKeyboardEvent?: (params: SuppressKeyboardEventParams) => boolean
    +stopEditingWhenGridLosesFocus?: boolean
    +debug?: boolean
    +icons?: any
    +angularCompileRows?: boolean
    +angularCompileFilters?: boolean
    +suppressLoadingOverlay?: boolean
    +suppressNoRowsOverlay?: boolean
    +suppressAutoSize?: boolean
    +autoSizePadding?: number
    +skipHeaderOnAutoSize?: boolean
    +animateRows?: boolean
    +suppressColumnMoveAnimation?: boolean
    +suppressMovableColumns?: boolean
    +suppressDragLeaveHidesColumns?: boolean
    +suppressMakeColumnVisibleAfterUnGroup?: boolean
    +suppressParentsInRowNodes?: boolean
    +suppressFieldDotNotation?: boolean
    +suppressCopyRowsToClipboard?: boolean
    +copyHeadersToClipboard?: boolean
    +clipboardDeliminator?: string
    +suppressClipboardPaste?: boolean
    +suppressClipboardApi?: boolean
    +suppressLastEmptyLineOnPaste?: boolean
    +suppressAggFuncInHeader?: boolean
    +suppressAggAtRootLevel?: boolean
    +suppressFocusAfterRefresh?: boolean
    +rowModelType?: string
    +pivotMode?: boolean
    +pivotColumnGroupTotals?: string
    +pivotRowTotals?: string
    +suppressExpandablePivotGroups?: boolean
    +suppressEnterpriseResetOnNewColumns?: boolean
    +enableRangeSelection?: boolean
    +enableRangeHandle?: boolean
    +enableFillHandle?: boolean
    +fillHandleDirection?: string
    +suppressMultiRangeSelection?: boolean
    +rowGroupPanelShow?: string
    +pivotPanelShow?: string
    +suppressContextMenu?: boolean
    +allowContextMenuWithControlKey?: boolean
    +rememberGroupStateWhenNewData?: boolean
    +suppressModelUpdateAfterUpdateTransaction?: boolean
    +viewportRowModelPageSize?: number
    +viewportRowModelBufferSize?: number
    +enableCellChangeFlash?: boolean
    +cellFlashDelay?: number
    +cellFadeDelay?: number
    +allowShowChangeAfterFilter?: boolean
    +quickFilterText?: string
    +cacheQuickFilter?: boolean
    +aggFuncs?: { [key: string]: IAggFunc; }
    +suppressColumnVirtualisation?: boolean
    +functionsReadOnly?: boolean
    +functionsPassive?: boolean
    +maxConcurrentDatasourceRequests?: number
    +maxBlocksInCache?: number
    +purgeClosedRowNodes?: boolean
    +domLayout?: string
    +suppressChangeDetection?: boolean
    +aggregateOnlyChangedColumns?: boolean
    +valueCache?: boolean
    +valueCacheNeverExpires?: boolean
    +batchUpdateWaitMillis?: number
    +asyncTransactionWaitMillis?: number
    +suppressRowTransform?: boolean
    +suppressSetColumnStateEvents?: boolean
    +suppressColumnStateEvents?: boolean
    +allowDragFromColumnsToolPanel?: boolean
    +suppressMaxRenderedRowRestriction?: boolean
    +excludeChildrenWhenTreeDataFiltering?: boolean
    +undoRedoCellEditing?: boolean
    +undoRedoCellEditingLimit?: number
    +cacheOverflowSize?: number
    +infiniteInitialRowCount?: number
    +paginationPageSize?: number
    +cacheBlockSize?: number
    +blockLoadDebounceMillis?: number
    +paginationAutoPageSize?: boolean
    +suppressPaginationPanel?: boolean
    +pagination?: boolean
    +paginateChildRows?: boolean
    +editType?: string
    +suppressTouch?: boolean
    +suppressAsyncEvents?: boolean
    +embedFullWidthRows?: boolean
    +deprecatedEmbedFullWidthRows?: boolean
    +excelStyles?: any[]
    +floatingFilter?: boolean
    +suppressExcelExport?: boolean
    +suppressCsvExport?: boolean
    +colWidth?: number
    +minColWidth?: number
    +maxColWidth?: number
    +suppressPropertyNamesCheck?: boolean
    +serverSideSortingAlwaysResets?: boolean
    +serverSideFilteringAlwaysResets?: boolean
    +serverSideStoreType?: ServerSideStoreType
    +getServerSideStoreParams?: (params: GetServerSideStoreParamsParams) => ServerSideStoreParams
    +isServerSideGroupOpenByDefault?: (params: IsServerSideGroupOpenByDefaultParams) => boolean
    +statusBar?: { statusPanels: StatusPanelDef[]; }
    +localeText?: any
    +localeTextFunc?: (key: string, defaultValue: string) => string
    +suppressAnimationFrame?: boolean
    +defaultColGroupDef?: ColGroupDef
    +defaultColDef?: ColDef
    +defaultExportParams?: CsvExportParams
    +pivotSuppressAutoColumn?: boolean
    +groupSuppressAutoColumn?: boolean
    +groupSelectsChildren?: boolean
    +groupSelectsFiltered?: boolean
    +groupIncludeFooter?: boolean
    +groupIncludeTotalFooter?: boolean
    +groupUseEntireRow?: boolean
    +groupRemoveSingleChildren?: boolean
    +groupRemoveLowestSingleChildren?: boolean
    +groupHideOpenParents?: boolean
    +groupMultiAutoColumn?: boolean
    +groupSuppressBlankHeader?: boolean
    +autoGroupColumnDef?: ColDef
    +enableOldSetFilterModel?: boolean
    +enableCharts?: boolean
    +context?: any
    +rowStyle?: any
    +rowClass?: string | string[]
    +groupDefaultExpanded?: number
    +alignedGrids?: GridOptions[]
    +rowSelection?: string
    +suppressRowDeselection?: boolean
    +rowDeselection?: boolean
    +rowMultiSelectWithClick?: boolean
    +isRowSelectable?: IsRowSelectable
    +overlayLoadingTemplate?: string
    +overlayNoRowsTemplate?: string
    +rowHeight?: number
    +detailRowHeight?: number
    +popupParent?: HTMLElement
    +masterDetail?: boolean
    +keepDetailRows?: boolean
    +keepDetailRowsCount?: number
    +isRowMaster?: IsRowMaster
    +detailCellRenderer?: string | ICellRendererFunc | (new () => ICellRendererComp)
    +detailCellRendererFramework?: any
    +detailCellRendererParams?: any
    +detailRowAutoHeight?: boolean
    +rowData?: any[]
    +pinnedTopRowData?: any[]
    +pinnedBottomRowData?: any[]
    +sideBar?: string | boolean | SideBarDef
    +columnDefs?: (ColDef | ColGroupDef)[]
    +columnTypes?: { [key: string]: ColDef; }
    +datasource?: IDatasource
    +viewportDatasource?: IViewportDatasource
    +serverSideDatasource?: IServerSideDatasource
    +headerHeight?: number
    +pivotHeaderHeight?: number
    +groupHeaderHeight?: number
    +pivotGroupHeaderHeight?: number
    +floatingFiltersHeight?: number
    +paginationNumberFormatter?: (params: PaginationNumberFormatterParams) => string
    +postProcessPopup?: (params: PostProcessPopupParams) => void
    +frameworkComponents?: any
    +components?: { [p: string]: AgGridRegisteredComponentInput<IComponent<any>>; }
    +dateComponent?: string | (new () => IDateComp)
    +dateComponentFramework?: any
    +groupRowRenderer?: string | ICellRendererFunc | (new () => ICellRendererComp)
    +groupRowRendererFramework?: any
    +groupRowRendererParams?: any
    +groupRowInnerRenderer?: string | ICellRendererFunc | (new () => ICellRendererComp)
    +groupRowInnerRendererFramework?: any
    +createChartContainer?: (params: ChartRef) => void
    +fillOperation?: (params: FillOperationParams) => any
    +isExternalFilterPresent(): boolean
    +doesExternalFilterPass(node: RowNode): boolean
    +getRowStyle?: Function
    +getRowClass?: (params: any) => (string | string[])
    +rowClassRules?: { [cssClassName: string]: string | ((params: any) => boolean); }
    +getRowHeight?: Function
    +sendToClipboard?: (params: any) => void
    +processDataFromClipboard?: (params: ProcessDataFromClipboardParams) => string[][] | null
    +navigateToNextHeader?: (params: NavigateToNextHeaderParams) => HeaderPosition
    +tabToNextHeader?: (params: TabToNextHeaderParams) => HeaderPosition
    +navigateToNextCell?: (params: NavigateToNextCellParams) => CellPosition
    +tabToNextCell?: (params: TabToNextCellParams) => CellPosition
    +getDocument?: () => Document
    +defaultGroupSortComparator?: (nodeA: RowNode, nodeB: RowNode) => number
    +loadingCellRenderer?: string | (new () => ICellRenderer)
    +loadingCellRendererFramework?: any
    +loadingCellRendererParams?: any
    +loadingOverlayComponent?: string | (new () => ILoadingOverlayComp)
    +loadingOverlayComponentFramework?: any
    +loadingOverlayComponentParams?: any
    +noRowsOverlayComponent?: string | (new () => INoRowsOverlayComp)
    +noRowsOverlayComponentFramework?: any
    +noRowsOverlayComponentParams?: any
    +fullWidthCellRenderer?: string | ICellRendererFunc | (new () => ICellRendererComp)
    +fullWidthCellRendererFramework?: any
    +fullWidthCellRendererParams?: any
    +isFullWidthCell(rowNode: RowNode): boolean
    +groupRowAggNodes(nodes: RowNode[]): any
    +getBusinessKeyForNode(node: RowNode): string
    +getDataPath?: GetDataPath
    +treeData?: boolean
    +isServerSideGroup?: IsServerSideGroup
    +isApplyServerSideTransaction?: IsApplyServerSideTransaction
    +getServerSideGroupKey?: GetServerSideGroupKey
    +getContextMenuItems?: GetContextMenuItems
    +getMainMenuItems?: GetMainMenuItems
    +getChartToolbarItems?: GetChartToolbarItems
    +getRowNodeId?: GetRowNodeIdFunc
    +getChildCount(dataItem: any): number
    +processRowPostCreate(params: ProcessRowParams): void
    +processCellForClipboard(params: ProcessCellForExportParams): any
    +processHeaderForClipboard(params: ProcessHeaderForExportParams): any
    +processCellFromClipboard(params: ProcessCellForExportParams): any
    +processSecondaryColDef(colDef: ColDef): void
    +processSecondaryColGroupDef(colGroupDef: ColGroupDef): void
    +postSort(nodes: RowNode[]): void
    +chartThemes?: string[]
    +customChartThemes?: { [name: string]: AgChartTheme; }
    +chartThemeOverrides?: AgChartThemeOverrides
    +processChartOptions(params: ProcessChartOptionsParams): ChartOptions<any>
    +onColumnEverythingChanged(event: ColumnEverythingChangedEvent): void
    +onToolPanelVisibleChanged(event: ToolPanelVisibleChangedEvent): void
    +onNewColumnsLoaded(event: NewColumnsLoadedEvent): void
    +onColumnPivotModeChanged(event: ColumnPivotModeChangedEvent): void
    +onColumnRowGroupChanged(event: ColumnRowGroupChangedEvent): void
    +onColumnPivotChanged(event: ColumnPivotChangedEvent): void
    +onGridColumnsChanged(event: GridColumnsChangedEvent): void
    +onColumnValueChanged(event: ColumnValueChangedEvent): void
    +onColumnMoved(event: ColumnMovedEvent): void
    +onColumnVisible(event: ColumnVisibleEvent): void
    +onColumnPinned(event: ColumnPinnedEvent): void
    +onColumnGroupOpened(event: ColumnGroupOpenedEvent): void
    +onColumnResized(event: ColumnResizedEvent): void
    +onDisplayedColumnsChanged(event: DisplayedColumnsChangedEvent): void
    +onVirtualColumnsChanged(event: VirtualColumnsChangedEvent): void
    +onRowGroupOpened(event: RowGroupOpenedEvent): void
    +onRowDataChanged(event: RowDataChangedEvent): void
    +onRowDataUpdated(event: RowDataUpdatedEvent): void
    +onPinnedRowDataChanged(event: PinnedRowDataChangedEvent): void
    +onRangeSelectionChanged(event: RangeSelectionChangedEvent): void
    +onColumnRowGroupChangeRequest(event: ColumnRowGroupChangeRequestEvent): void
    +onColumnPivotChangeRequest(event: ColumnPivotChangeRequestEvent): void
    +onColumnValueChangeRequest(event: ColumnValueChangeRequestEvent): void
    +onColumnAggFuncChangeRequest(event: ColumnAggFuncChangeRequestEvent): void
    +onModelUpdated(event: ModelUpdatedEvent): void
    +onCellKeyDown(event: CellKeyDownEvent): void
    +onCellKeyPress(event: CellKeyPressEvent): void
    +onCellClicked(event: CellClickedEvent): void
    +onCellMouseDown(event: CellMouseDownEvent): void
    +onCellDoubleClicked(event: CellDoubleClickedEvent): void
    +onCellContextMenu(event: CellContextMenuEvent): void
    +onCellValueChanged(event: CellValueChangedEvent): void
    +onCellMouseOver(event: CellMouseOverEvent): void
    +onCellMouseOut(event: CellMouseOutEvent): void
    +onRowValueChanged(event: RowValueChangedEvent): void
    +onRowEditingStarted(event: RowEditingStartedEvent): void
    +onRowEditingStopped(event: RowEditingStoppedEvent): void
    +onCellEditingStarted(event: CellEditingStartedEvent): void
    +onCellEditingStopped(event: CellEditingStoppedEvent): void
    +onCellFocused(event: CellFocusedEvent): void
    +onRowSelected(event: RowSelectedEvent): void
    +onSelectionChanged(event: SelectionChangedEvent): void
    +onFilterChanged(event: FilterChangedEvent): void
    +onFilterModified(event: FilterModifiedEvent): void
    +onSortChanged(event: SortChangedEvent): void
    +onVirtualRowRemoved(event: VirtualRowRemovedEvent): void
    +onRowClicked(event: RowClickedEvent): void
    +onRowDoubleClicked(event: RowDoubleClickedEvent): void
    +onGridReady(event: GridReadyEvent): void
    +onViewportChanged(event: ViewportChangedEvent): void
    +onDragStarted(event: DragStartedEvent): void
    +onDragStopped(event: DragStoppedEvent): void
    +onPaginationChanged(event: PaginationChangedEvent): void
    +onRowDragEnter(event: RowDragEvent): void
    +onRowDragMove(event: RowDragEvent): void
    +onRowDragLeave(event: RowDragEvent): void
    +onRowDragEnd(event: RowDragEvent): void
    +onPasteStart(event: PasteStartEvent): void
    +onPasteEnd(event: PasteEndEvent): void
    +onFillStart(event: FillStartEvent): void
    +onFillEnd(event: FillEndEvent): void
    +onBodyScroll(event: BodyScrollEvent): void
    +onFirstDataRendered(event: FirstDataRenderedEvent): void
    +onExpandOrCollapseAll(event: ExpandCollapseAllEvent): void
    +onChartCreated(event: ChartCreated): void
    +onChartRangeSelectionChanged(event: ChartRangeSelectionChanged): void
    +onChartOptionsChanged(event: ChartOptionsChanged): void
    +onChartDestroyed(event: ChartDestroyed): void
    +onComponentStateChanged(event: ComponentStateChangedEvent): void
    +onAsyncTransactionsFlushed(event: AsyncTransactionsFlushed): void
    +onGridSizeChanged(event: any): void
    +api?: GridApi
    +columnApi?: ColumnApi
}
interface FillOperationParams {
    +event: MouseEvent
    +values: any[]
    +initialValues: any[]
    +currentIndex: number
    +currentCellValue: any
    +api: GridApi
    +columnApi: ColumnApi
    +context: any
    +direction: string
    +column?: Column
    +rowNode?: RowNode
}
interface GetDataPath
interface IsServerSideGroup
interface IsApplyServerSideTransaction
interface IsApplyServerSideTransactionParams {
    +transaction: ServerSideTransaction
    +parentNode: RowNode
    +storeInfo: any
}
interface GetServerSideGroupKey
interface IsRowMaster
interface IsRowSelectable
interface RowClassParams {
    +data: any
    +node: RowNode
    +rowIndex: number
    +$scope: any
    +api: GridApi
    +columnApi: ColumnApi
    +context: any
}
interface ProcessChartOptionsParams {
    +type: ChartType
    +options: ChartOptions<any>
}
interface ProcessChartParams {
    +type: ChartType
    +options: AgChartOptions
    +chart: any
}
interface GetContextMenuItemsParams {
    +defaultItems: string[]
    +column: Column
    +node: RowNode
    +value: any
    +api: GridApi
    +columnApi: ColumnApi
    +context: any
}
interface GetContextMenuItems
interface GetChartToolbarItemsParams {
    +defaultItems?: ChartMenuOptions[]
    +api?: GridApi
    +columnApi?: ColumnApi
}
interface GetChartToolbarItems
interface MenuItemDef {
    +name: string
    +disabled?: boolean
    +shortcut?: string
    +action?: () => void
    +checked?: boolean
    +icon?: string | HTMLElement
    +subMenu?: IComponent<any> | (string | MenuItemDef)[]
    +cssClasses?: string[]
    +tooltip?: string
}
interface GetMainMenuItemsParams {
    +column: Column
    +api: GridApi
    +columnApi: ColumnApi
    +context: any
    +defaultItems: string[]
}
interface GetMainMenuItems
interface GetRowNodeIdFunc
interface ProcessRowParams {
    +eRow: HTMLElement
    +ePinnedLeftRow: HTMLElement
    +ePinnedRightRow: HTMLElement
    +rowIndex: number
    +node: RowNode
    +api: GridApi
    +columnApi: ColumnApi
    +addRenderedRowListener: (eventType: string, listener: Function) => void
    +context: any
}
interface NavigateToNextHeaderParams {
    +key: string
    +previousHeaderPosition: HeaderPosition
    +nextHeaderPosition: HeaderPosition
    +event: KeyboardEvent
    +headerRowCount: number
}
interface TabToNextHeaderParams {
    +backwards: boolean
    +previousHeaderPosition: HeaderPosition
    +nextHeaderPosition: HeaderPosition
    +headerRowCount: number
}
interface NavigateToNextCellParams {
    +key: number
    +previousCellPosition: CellPosition
    +nextCellPosition: CellPosition
    +event: KeyboardEvent
}
interface TabToNextCellParams {
    +backwards: boolean
    +editing: boolean
    +previousCellPosition: CellPosition
    +nextCellPosition: CellPosition
}
interface PostProcessPopupParams {
    +column?: Column
    +rowNode?: RowNode
    +ePopup: HTMLElement
    +type: string
    +eventSource?: HTMLElement
    +mouseEvent?: MouseEvent | Touch
}
interface PaginationNumberFormatterParams {
    +value: number
}
interface ProcessDataFromClipboardParams {
    +data: string[][]
}
interface ChartRef {
    +chart: any
    +chartElement: HTMLElement
    +destroyChart: () => void
}
enum ServerSideStoreType {
    Full
    Partial
}
interface ServerSideStoreParams {
    +storeType?: ServerSideStoreType
    +maxBlocksInCache?: number
    +cacheBlockSize?: number
}
interface GetServerSideStoreParamsParams {
    +level: number
    +parentRowNode?: RowNode
    +rowGroupColumns: Column[]
    +pivotColumns: Column[]
    +pivotMode: boolean
}
interface IsServerSideGroupOpenByDefaultParams {
    +data: any
    +rowNode: RowNode
}
class PropertyKeys {
    +{static} STRING_PROPERTIES: string[]
    +{static} OBJECT_PROPERTIES: string[]
    +{static} ARRAY_PROPERTIES: string[]
    +{static} NUMBER_PROPERTIES: string[]
    +{static} BOOLEAN_PROPERTIES: string[]
    +{static} FUNCTION_PROPERTIES: string[]
    +{static} ALL_PROPERTIES: string[]
    +{static} FRAMEWORK_PROPERTIES: string[]
}
class ComponentUtil {
    +{static} EVENTS: string[]
    -{static} EVENT_CALLBACKS: string[]
    +{static} STRING_PROPERTIES: string[]
    +{static} OBJECT_PROPERTIES: string[]
    +{static} ARRAY_PROPERTIES: string[]
    +{static} NUMBER_PROPERTIES: string[]
    +{static} BOOLEAN_PROPERTIES: string[]
    +{static} FUNCTION_PROPERTIES: string[]
    +{static} ALL_PROPERTIES: string[]
    +{static} getEventCallbacks(): string[]
    +{static} copyAttributesToGridOptions(gridOptions: GridOptions, component: any, skipEventDeprecationCheck?: boolean): GridOptions
    +{static} getCallbackForEvent(eventName: string): string
    +{static} processOnChange(changes: any, gridOptions: GridOptions, api: GridApi, columnApi: ColumnApi): void
    +{static} toBoolean(value: any): boolean
    +{static} toNumber(value: any): number
}
class ColDefUtil {
    +{static} STRING_PROPERTIES: string[]
    +{static} OBJECT_PROPERTIES: string[]
    +{static} ARRAY_PROPERTIES: string[]
    +{static} NUMBER_PROPERTIES: string[]
    +{static} BOOLEAN_PROPERTIES: string[]
    +{static} FUNCTION_PROPERTIES: string[]
    +{static} ALL_PROPERTIES: string[]
    +{static} FRAMEWORK_PROPERTIES: string[]
}
interface PropertyChangedEvent extends AgEvent {
    +currentValue: any
    +previousValue: any
}
class GridOptionsWrapper {
    -gridOptions: GridOptions
    -columnController: ColumnController
    -eventService: EventService
    -environment: Environment
    -autoHeightCalculator: AutoHeightCalculator
    -propertyEventService: EventService
    -domDataKey: string
    -layoutElements: HTMLElement[]
    -scrollbarWidth: number
    -updateLayoutClassesListener: any
    -destroyed: boolean
    -agWire(gridApi: GridApi, columnApi: ColumnApi): void
    -destroy(): void
    +init(): void
    -checkColumnDefProperties(): void
    -checkGridOptionsProperties(): void
    -checkProperties(userProperties: string[], validPropertiesAndExceptions: string[], validProperties: string[], containerName: string, docsUrl: string): void
    +getDomDataKey(): string
    +getDomData(element: Node, key: string): any
    +setDomData(element: Element, key: string, value: any): any
    +isRowSelection(): boolean
    +isSuppressRowDeselection(): boolean
    +isRowSelectionMulti(): boolean
    +isRowMultiSelectWithClick(): boolean
    +getContext(): any
    +isPivotMode(): boolean
    +isSuppressExpandablePivotGroups(): boolean
    +getPivotColumnGroupTotals(): string
    +getPivotRowTotals(): string
    +isRowModelInfinite(): boolean
    +isRowModelViewport(): boolean
    +isRowModelServerSide(): boolean
    +isRowModelDefault(): boolean
    +isFullRowEdit(): boolean
    +isSuppressFocusAfterRefresh(): boolean
    +isSuppressBrowserResizeObserver(): boolean
    +isSuppressMaintainUnsortedOrder(): boolean
    +isSuppressClearOnFillReduction(): boolean
    +isShowToolPanel(): boolean
    +getSideBar(): SideBarDef
    +isSuppressTouch(): boolean
    +isApplyColumnDefOrder(): boolean
    +isSuppressRowTransform(): boolean
    +isSuppressColumnStateEvents(): boolean
    +isAllowDragFromColumnsToolPanel(): boolean
    +useAsyncEvents(): boolean
    +isEnableCellChangeFlash(): boolean
    +getCellFlashDelay(): number
    +getCellFadeDelay(): number
    +isGroupSelectsChildren(): boolean
    +isSuppressRowHoverHighlight(): boolean
    +isGroupSelectsFiltered(): boolean
    +isGroupHideOpenParents(): boolean
    +isGroupMultiAutoColumn(): boolean
    +isGroupRemoveSingleChildren(): boolean
    +isGroupRemoveLowestSingleChildren(): boolean
    +isGroupIncludeFooter(): boolean
    +isGroupIncludeTotalFooter(): boolean
    +isGroupSuppressBlankHeader(): boolean
    +isSuppressRowClickSelection(): boolean
    +isSuppressCellSelection(): boolean
    +isSuppressMultiSort(): boolean
    +isMultiSortKeyCtrl(): boolean
    +isGroupSuppressAutoColumn(): boolean
    +isPivotSuppressAutoColumn(): boolean
    +isSuppressDragLeaveHidesColumns(): boolean
    +isSuppressScrollOnNewData(): boolean
    +isRowDragManaged(): boolean
    +isSuppressRowDrag(): boolean
    +isSuppressMoveWhenRowDragging(): boolean
    +isEnableMultiRowDragging(): boolean
    +getDomLayout(): string
    +isSuppressHorizontalScroll(): boolean
    +isSuppressMaxRenderedRowRestriction(): boolean
    +isExcludeChildrenWhenTreeDataFiltering(): boolean
    +isAlwaysShowHorizontalScroll(): boolean
    +isAlwaysShowVerticalScroll(): boolean
    +isDebounceVerticalScrollbar(): boolean
    +isSuppressLoadingOverlay(): boolean
    +isSuppressNoRowsOverlay(): boolean
    +isSuppressFieldDotNotation(): boolean
    +getPinnedTopRowData(): any[]
    +getPinnedBottomRowData(): any[]
    +isFunctionsPassive(): boolean
    +isSuppressChangeDetection(): boolean
    +isSuppressAnimationFrame(): boolean
    +getQuickFilterText(): string
    +isCacheQuickFilter(): boolean
    +isUnSortIcon(): boolean
    +isSuppressMenuHide(): boolean
    +isEnterMovesDownAfterEdit(): boolean
    +isEnterMovesDown(): boolean
    +isUndoRedoCellEditing(): boolean
    +getUndoRedoCellEditingLimit(): number
    +getRowStyle(): any
    +getRowClass(): string | string[]
    +getRowStyleFunc(): Function
    +getRowClassFunc(): (params: any) => string | string[]
    +rowClassRules(): { [cssClassName: string]: string | ((params: any) => boolean); }
    +getServerSideStoreType(): string
    +getServerSideStoreParamsFunc(): (params: GetServerSideStoreParamsParams) => ServerSideStoreParams
    +getCreateChartContainerFunc(): (params: ChartRef) => void
    +getPopupParent(): HTMLElement
    +getBlockLoadDebounceMillis(): number
    +getPostProcessPopupFunc(): (params: PostProcessPopupParams) => void
    +getPaginationNumberFormatterFunc(): (params: PaginationNumberFormatterParams) => string
    +getChildCountFunc(): (dataItem: any) => number
    +getIsApplyServerSideTransactionFunc(): IsApplyServerSideTransaction
    +getDefaultGroupSortComparator(): (nodeA: RowNode, nodeB: RowNode) => number
    +getIsFullWidthCellFunc(): (rowNode: RowNode) => boolean
    +getFullWidthCellRendererParams(): any
    +isEmbedFullWidthRows(): boolean
    +isDetailRowAutoHeight(): boolean
    +getSuppressKeyboardEventFunc(): (params: SuppressKeyboardEventParams) => boolean
    +getBusinessKeyForNodeFunc(): (node: RowNode) => string
    +getApi(): GridApi
    +getColumnApi(): ColumnApi
    +isImmutableData(): boolean
    +isEnsureDomOrder(): boolean
    +isEnableCharts(): boolean
    +getColResizeDefault(): string
    +isSingleClickEdit(): boolean
    +isSuppressClickEdit(): boolean
    +isStopEditingWhenGridLosesFocus(): boolean
    +getGroupDefaultExpanded(): number
    +getMaxConcurrentDatasourceRequests(): number
    +getMaxBlocksInCache(): number
    +getCacheOverflowSize(): number
    +getPaginationPageSize(): number
    +isPaginateChildRows(): boolean
    +getCacheBlockSize(): number
    +getInfiniteInitialRowCount(): number
    +isPurgeClosedRowNodes(): boolean
    +isSuppressPaginationPanel(): boolean
    +getRowData(): any[]
    +isGroupUseEntireRow(pivotMode: boolean): boolean
    +isEnableRtl(): boolean
    +getAutoGroupColumnDef(): ColDef
    +getRowGroupPanelShow(): string
    +getPivotPanelShow(): string
    +isAngularCompileRows(): boolean
    +isAngularCompileFilters(): boolean
    +isDebug(): boolean
    +getColumnDefs(): (ColDef | ColGroupDef)[]
    +getColumnTypes(): { [key: string]: ColDef; }
    +getDatasource(): IDatasource
    +getViewportDatasource(): IViewportDatasource
    +getServerSideDatasource(): IServerSideDatasource
    +isAccentedSort(): boolean
    +isEnableBrowserTooltips(): boolean
    +isEnableCellExpressions(): boolean
    +isEnableGroupEdit(): boolean
    +isSuppressMiddleClickScrolls(): boolean
    +isPreventDefaultOnContextMenu(): boolean
    +isSuppressPreventDefaultOnMouseWheel(): boolean
    +isSuppressColumnVirtualisation(): boolean
    +isSuppressContextMenu(): boolean
    +isAllowContextMenuWithControlKey(): boolean
    +isSuppressCopyRowsToClipboard(): boolean
    +isCopyHeadersToClipboard(): boolean
    +isSuppressClipboardPaste(): boolean
    +isSuppressLastEmptyLineOnPaste(): boolean
    +isPagination(): boolean
    +isSuppressEnterpriseResetOnNewColumns(): boolean
    +getProcessDataFromClipboardFunc(): (params: ProcessDataFromClipboardParams) => string[][] | null
    +getAsyncTransactionWaitMillis(): number
    +isSuppressMovableColumns(): boolean
    +isAnimateRows(): boolean
    +isSuppressColumnMoveAnimation(): boolean
    +isSuppressAggFuncInHeader(): boolean
    +isSuppressAggAtRootLevel(): boolean
    +isSuppressAggFilteredOnly(): boolean
    +isShowOpenedGroup(): boolean
    +isEnableRangeSelection(): boolean
    +isEnableRangeHandle(): boolean
    +isEnableFillHandle(): boolean
    +getFillHandleDirection(): "y" | "x" | "xy"
    +getFillOperation(): (params: FillOperationParams) => any
    +isSuppressMultiRangeSelection(): boolean
    +isPaginationAutoPageSize(): boolean
    +isRememberGroupStateWhenNewData(): boolean
    +getIcons(): any
    +getAggFuncs(): { [key: string]: IAggFunc; }
    +getSortingOrder(): string[]
    +getAlignedGrids(): GridOptions[]
    +isMasterDetail(): boolean
    +isKeepDetailRows(): boolean
    +getKeepDetailRowsCount(): number
    +getIsRowMasterFunc(): IsRowMaster
    +getIsRowSelectableFunc(): IsRowSelectable
    +getGroupRowRendererParams(): any
    +getOverlayLoadingTemplate(): string
    +getOverlayNoRowsTemplate(): string
    +isSuppressAutoSize(): boolean
    +isEnableCellTextSelection(): boolean
    +isSuppressParentsInRowNodes(): boolean
    +isSuppressClipboardApi(): boolean
    +isFunctionsReadOnly(): boolean
    +isFloatingFilter(): boolean
    +isEnableCellTextSelect(): boolean
    +isEnableOldSetFilterModel(): boolean
    +getDefaultColDef(): ColDef
    +getDefaultColGroupDef(): ColGroupDef
    +getDefaultExportParams(): BaseExportParams
    +isSuppressCsvExport(): boolean
    +isAllowShowChangeAfterFilter(): boolean
    +isSuppressExcelExport(): boolean
    +isSuppressMakeColumnVisibleAfterUnGroup(): boolean
    +getDataPathFunc(): (dataItem: any) => string[]
    +getIsServerSideGroupFunc(): (dataItem: any) => boolean
    +getIsServerSideGroupOpenByDefaultFunc(): (params: IsServerSideGroupOpenByDefaultParams) => boolean
    +getServerSideGroupKeyFunc(): (dataItem: any) => string
    +getGroupRowAggNodesFunc(): (nodes: RowNode[]) => any
    +getContextMenuItemsFunc(): GetContextMenuItems
    +getMainMenuItemsFunc(): GetMainMenuItems
    +getRowNodeIdFunc(): GetRowNodeIdFunc
    +getNavigateToNextHeaderFunc(): (params: NavigateToNextHeaderParams) => HeaderPosition
    +getTabToNextHeaderFunc(): (params: TabToNextHeaderParams) => HeaderPosition
    +getNavigateToNextCellFunc(): (params: NavigateToNextCellParams) => CellPosition
    +getTabToNextCellFunc(): (params: TabToNextCellParams) => CellPosition
    +isTreeData(): boolean
    +isValueCache(): boolean
    +isValueCacheNeverExpires(): boolean
    +isDeltaSort(): boolean
    +isAggregateOnlyChangedColumns(): boolean
    +getProcessSecondaryColDefFunc(): (colDef: ColDef) => void
    +getProcessSecondaryColGroupDefFunc(): (colGroupDef: ColGroupDef) => void
    +getSendToClipboardFunc(): (params: any) => void
    +getProcessRowPostCreateFunc(): any
    +getProcessCellForClipboardFunc(): (params: ProcessCellForExportParams) => any
    +getProcessHeaderForClipboardFunc(): (params: ProcessHeaderForExportParams) => any
    +getProcessCellFromClipboardFunc(): (params: ProcessCellForExportParams) => any
    +getViewportRowModelPageSize(): number
    +getViewportRowModelBufferSize(): number
    +isServerSideSortingAlwaysResets(): boolean
    +isServerSideFilteringAlwaysResets(): boolean
    +getPostSortFunc(): (rowNodes: RowNode[]) => void
    +getChartToolbarItemsFunc(): GetChartToolbarItems
    +getChartThemeOverrides(): AgChartThemeOverrides
    +getCustomChartThemes(): { [name: string]: AgChartTheme; }
    +getChartThemes(): string[]
    +getProcessChartOptionsFunc(): (params: ProcessChartOptionsParams) => ChartOptions<any>
    +getClipboardDeliminator(): string
    +setProperty(key: string, value: any, force?: boolean): void
    +addLayoutElement(element: HTMLElement): void
    -updateLayoutClasses(): void
    +addEventListener(key: string, listener: Function): void
    +removeEventListener(key: string, listener: Function): void
    +isSkipHeaderOnAutoSize(): boolean
    +getAutoSizePadding(): number
    +getHeaderHeight(): number
    +getFloatingFiltersHeight(): number
    +getGroupHeaderHeight(): number
    +getPivotHeaderHeight(): number
    +getPivotGroupHeaderHeight(): number
    +isExternalFilterPresent(): boolean
    +doesExternalFilterPass(node: RowNode): boolean
    +getTooltipShowDelay(): number
    +isTooltipMouseTrack(): boolean
    +isSuppressModelUpdateAfterUpdateTransaction(): boolean
    +getDocument(): Document
    +getMinColWidth(): number
    +getMaxColWidth(): number
    +getColWidth(): number
    +getRowBuffer(): number
    +getRowBufferInPixels(): number
    +getScrollbarWidth(): number
    -checkForDeprecated(): void
    -checkForViolations(): void
    -treeDataViolations(): void
    +getLocaleTextFunc(): (key: string, defaultValue: string) => string
    +globalEventHandler(eventName: string, event?: any): void
    +getRowHeightAsNumber(): number
    +getRowHeightForNode(rowNode: RowNode, allowEstimate?: boolean): { height: number | null | undefined; estimated: boolean; }
    +isDynamicRowHeight(): boolean
    +getListItemHeight(): number
    +chartMenuPanelWidth(): number
    -isNumeric(value: any): boolean
    -getFromTheme(defaultValue: number, sassVariableName: SASS_PROPERTIES): number
    -getFromTheme(defaultValue: null, sassVariableName: SASS_PROPERTIES): number
    -getFromTheme(defaultValue: any, sassVariableName: SASS_PROPERTIES): any
    -getDefaultRowHeight(): number
    -{static} MIN_COL_WIDTH: number
    +{static} PROP_HEADER_HEIGHT: string
    +{static} PROP_GROUP_REMOVE_SINGLE_CHILDREN: string
    +{static} PROP_GROUP_REMOVE_LOWEST_SINGLE_CHILDREN: string
    +{static} PROP_PIVOT_HEADER_HEIGHT: string
    +{static} PROP_SUPPRESS_CLIPBOARD_PASTE: string
    +{static} PROP_GROUP_HEADER_HEIGHT: string
    +{static} PROP_PIVOT_GROUP_HEADER_HEIGHT: string
    +{static} PROP_FLOATING_FILTERS_HEIGHT: string
    +{static} PROP_SUPPRESS_ROW_CLICK_SELECTION: string
    +{static} PROP_SUPPRESS_ROW_DRAG: string
    +{static} PROP_SUPPRESS_MOVE_WHEN_ROW_DRAG: string
    +{static} PROP_POPUP_PARENT: string
    +{static} PROP_DOM_LAYOUT: string
    +{static} PROP_FILL_HANDLE_DIRECTION: string
}
class LoggerFactory extends BeanStub {
    -logging: boolean
    -setBeans(gridOptionsWrapper: GridOptionsWrapper): void
    +create(name: string): Logger
    +isLogging(): boolean
}
class Logger {
    -isLoggingFunc: () => boolean | undefined
    -name: string
    +isLogging(): boolean
    +log(message: string): void
}
class EventService implements IEventEmitter {
    -allSyncListeners: any
    -allAsyncListeners: any
    -globalSyncListeners: any
    -globalAsyncListeners: any
    -logger: Logger
    -frameworkOverrides: IFrameworkOverrides
    -asyncFunctionsQueue: Function[]
    -scheduled: boolean
    -firedEvents: { [key: string]: boolean; }
    +setBeans(loggerFactory: LoggerFactory, gridOptionsWrapper: GridOptionsWrapper, frameworkOverrides: IFrameworkOverrides, globalEventListener?: Function): void
    -getListeners(eventType: string, async: boolean): any
    +addEventListener(eventType: string, listener: Function, async?: boolean): void
    +removeEventListener(eventType: string, listener: Function, async?: boolean): void
    +addGlobalListener(listener: Function, async?: boolean): void
    +removeGlobalListener(listener: Function, async?: boolean): void
    +dispatchEvent(event: AgEvent): void
    +dispatchEventOnce(event: AgEvent): void
    -dispatchToListeners(event: AgEvent, async: boolean): void
    -dispatchAsync(func: Function): void
    -flushAsyncQueue(): void
}
interface SetSelectedParams {
    +newValue: boolean
    +clearSelection?: boolean
    +suppressFinishActions?: boolean
    +rangeSelect?: boolean
    +groupSelectsFiltered?: boolean
}
interface RowNodeEvent extends AgEvent {
    +node: RowNode
}
interface DataChangedEvent extends RowNodeEvent {
    +oldData: any
    +newData: any
    +update: boolean
}
interface CellChangedEvent extends RowNodeEvent {
    +column: Column
    +newValue: any
    +oldValue: any
}
class RowNode implements IEventEmitter {
    -mainEventService: EventService
    -rowRenderer: RowRenderer
    -gridOptionsWrapper: GridOptionsWrapper
    -selectionController: SelectionController
    -columnController: ColumnController
    -valueService: ValueService
    -rowModel: IRowModel
    -context: Context
    -valueCache: ValueCache
    -columnApi: ColumnApi
    -gridApi: GridApi
    +id: string
    +groupData: any
    +aggData: any
    +data: any
    +parent: RowNode
    +level: number
    +uiLevel: number
    +rowGroupIndex: number
    +group: boolean
    +dragging: boolean
    +master: boolean
    +detail: boolean
    +detailNode: RowNode
    +detailGridInfo: DetailGridInfo
    +leafGroup: boolean
    +firstChild: boolean
    +lastChild: boolean
    +childIndex: number
    +rowIndex: number
    +rowPinned: string
    +quickFilterAggregateText: string
    +footer: boolean
    +field: string
    +rowGroupColumn: Column
    +key: any
    +stub: boolean
    +failedLoad: boolean
    +allLeafChildren: RowNode[]
    +childrenAfterGroup: RowNode[]
    +childrenAfterFilter: RowNode[]
    +childrenAfterSort: RowNode[]
    +allChildrenCount: number
    +childrenMapped: { [key: string]: any; }
    +childStore: IServerSideStore
    +expanded: boolean
    +sibling: RowNode
    +rowHeight: number
    +rowHeightEstimated: boolean
    +displayed: boolean
    +rowTop: number
    +oldRowTop: number
    +daemon: boolean
    +selectable: boolean
    +__cacheData: { [colId: string]: any; }
    +__cacheVersion: number
    +__objectId: number
    -__hasChildren: boolean
    +alreadyRendered: boolean
    +highlighted: "above" | "below"
    -selected: boolean
    -eventService: EventService
    +setData(data: any): void
    +updateData(data: any): void
    -setDataCommon(data: any, update: boolean): void
    -updateDataOnDetailNode(): void
    -createDataChangedEvent(newData: any, oldData: any, update: boolean): DataChangedEvent
    -createLocalRowEvent(type: string): RowNodeEvent
    +getRowIndexString(): string
    -createDaemonNode(): RowNode
    +setDataAndId(data: any, id: string): void
    -checkRowSelectable(): void
    +setRowSelectable(newVal: boolean): void
    +setId(id?: string): void
    +isPixelInRange(pixel: number): boolean
    +setFirstChild(firstChild: boolean): void
    +setLastChild(lastChild: boolean): void
    +setChildIndex(childIndex: number): void
    +setRowTop(rowTop: number): void
    +clearRowTopAndRowIndex(): void
    -setDisplayed(displayed: boolean): void
    +setDragging(dragging: boolean): void
    +setHighlighted(highlighted: "above" | "below"): void
    +setAllChildrenCount(allChildrenCount: number): void
    +setMaster(master: boolean): void
    +setRowHeight(rowHeight: number, estimated?: boolean): void
    +setRowIndex(rowIndex: number): void
    +setUiLevel(uiLevel: number): void
    +setExpanded(expanded: boolean): void
    -createGlobalRowEvent(type: string): RowEvent
    -dispatchLocalEvent(event: AgEvent): void
    +setDataValue(colKey: string | Column, newValue: any): void
    +setGroupValue(colKey: string | Column, newValue: any): void
    +setAggData(newAggData: any): void
    +updateHasChildren(): void
    +hasChildren(): boolean
    +isEmptyRowGroupNode(): boolean
    -dispatchCellChangedEvent(column: Column, newValue: any, oldValue: any): void
    +resetQuickFilterAggregateText(): void
    +isExpandable(): boolean
    +isSelected(): boolean
    +depthFirstSearch(callback: (rowNode: RowNode) => void): void
    +calculateSelectedFromChildren(): void
    +setSelectedInitialValue(selected: boolean): void
    +setSelected(newValue: boolean, clearSelection?: boolean, suppressFinishActions?: boolean): void
    +isRowPinned(): boolean
    +setSelectedParams(params: SetSelectedParams): number
    -doRowRangeSelection(value?: boolean): number
    +isParentOfNode(potentialParent: RowNode): boolean
    +selectThisNode(newValue?: boolean): boolean
    -selectChildNodes(newValue: boolean, groupSelectsFiltered: boolean): number
    +addEventListener(eventType: string, listener: Function): void
    +removeEventListener(eventType: string, listener: Function): void
    +onMouseEnter(): void
    +onMouseLeave(): void
    +getFirstChildOfFirstChild(rowGroupColumn: Column): RowNode
    +isFullWidthCell(): boolean
    +getRoute(): string[]
    +{static} ID_PREFIX_ROW_GROUP: string
    +{static} ID_PREFIX_TOP_PINNED: string
    +{static} ID_PREFIX_BOTTOM_PINNED: string
    -{static} OBJECT_ID_SEQUENCE: number
    +{static} EVENT_ROW_SELECTED: string
    +{static} EVENT_DATA_CHANGED: string
    +{static} EVENT_CELL_CHANGED: string
    +{static} EVENT_ALL_CHILDREN_COUNT_CHANGED: string
    +{static} EVENT_MASTER_CHANGED: string
    +{static} EVENT_MOUSE_ENTER: string
    +{static} EVENT_MOUSE_LEAVE: string
    +{static} EVENT_HEIGHT_CHANGED: string
    +{static} EVENT_TOP_CHANGED: string
    +{static} EVENT_DISPLAYED_CHANGED: string
    +{static} EVENT_FIRST_CHILD_CHANGED: string
    +{static} EVENT_LAST_CHILD_CHANGED: string
    +{static} EVENT_CHILD_INDEX_CHANGED: string
    +{static} EVENT_ROW_INDEX_CHANGED: string
    +{static} EVENT_EXPANDED_CHANGED: string
    +{static} EVENT_HAS_CHILDREN_CHANGED: string
    +{static} EVENT_SELECTABLE_CHANGED: string
    +{static} EVENT_UI_LEVEL_CHANGED: string
    +{static} EVENT_HIGHLIGHT_CHANGED: string
    +{static} EVENT_DRAGGING_CHANGED: string
}
interface AbstractColDef {
    +headerName?: string
    +columnGroupShow?: string
    +headerClass?: string | string[] | ((params: any) => string | string[])
    +toolPanelClass?: string | string[] | ((params: any) => string | string[])
    +headerValueGetter?: string | Function
    +pivotKeys?: string[]
    +suppressColumnsToolPanel?: boolean
    +suppressFiltersToolPanel?: boolean
    +headerTooltip?: string
    +tooltipComponent?: string | (new () => ITooltipComp)
    +tooltipComponentFramework?: any
    +tooltipComponentParams?: any
    +suppressHeaderKeyboardEvent?: (params: SuppressHeaderKeyboardEventParams) => boolean
}
interface ColGroupDef extends AbstractColDef {
    +children: (ColDef | ColGroupDef)[]
    +groupId?: string
    +openByDefault?: boolean
    +marryChildren?: boolean
    +headerGroupComponent?: string | (new () => IHeaderGroupComp)
    +headerGroupComponentFramework?: any
    +headerGroupComponentParams?: any
}
interface IAggFunc
interface IAggFuncParams {
    +values: any[]
    +column: Column
    +colDef: ColDef
    +rowNode: RowNode
    +data: any
    +api: GridApi
    +columnApi: ColumnApi
    +context: any
}
interface ColDef extends AbstractColDef {
    +colId?: string
    +sort?: string
    +initialSort?: string
    +sortIndex?: number
    +initialSortIndex?: number
    +sortedAt?: number
    +sortingOrder?: string[]
    +field?: string
    +type?: string | string[]
    +hide?: boolean
    +initialHide?: boolean
    +pinned?: string | boolean
    +initialPinned?: string | boolean
    +tooltipField?: string
    +tooltipValueGetter?: (params: ITooltipParams) => string
    +valueGetter?: string | ((params: ValueGetterParams) => any)
    +filterValueGetter?: string | ((params: ValueGetterParams) => any)
    +valueSetter?: string | ((params: ValueSetterParams) => boolean)
    +keyCreator?: (value: any) => string
    +width?: number
    +initialWidth?: number
    +minWidth?: number
    +maxWidth?: number
    +flex?: number
    +initialFlex?: number
    +autoHeight?: boolean
    +wrapText?: boolean
    +cellClass?: string | string[] | ((cellClassParams: CellClassParams) => string | string[])
    +cellStyle?: {} | ((params: any) => {})
    +cellRenderer?: string | ICellRendererFunc | (new () => ICellRendererComp)
    +cellRendererFramework?: any
    +cellRendererParams?: any
    +cellRendererSelector?: (params: ICellRendererParams) => ComponentSelectorResult
    +cellEditor?: string | (new () => ICellEditorComp)
    +cellEditorFramework?: any
    +cellEditorParams?: any
    +cellEditorSelector?: (params: ICellEditorParams) => ComponentSelectorResult
    +pinnedRowCellRenderer?: string | ICellRendererFunc | (new () => ICellRendererComp)
    +pinnedRowCellRendererFramework?: any
    +pinnedRowCellRendererParams?: any
    +valueFormatter?: string | ((params: ValueFormatterParams) => string)
    +pinnedRowValueFormatter?: string | ((params: ValueFormatterParams) => string)
    +valueParser?: string | ((params: ValueParserParams) => any)
    +aggFunc?: string | IAggFunc
    +initialAggFunc?: string | IAggFunc
    +allowedAggFuncs?: string[]
    +rowGroupIndex?: number
    +rowGroup?: boolean
    +initialRowGroupIndex?: number
    +initialRowGroup?: boolean
    +showRowGroup?: string | boolean
    +pivotIndex?: number
    +pivot?: boolean
    +initialPivotIndex?: number
    +initialPivot?: boolean
    +comparator?: (valueA: any, valueB: any, nodeA: RowNode, nodeB: RowNode, isInverted: boolean) => number
    +equals?: (valueA: any, valueB: any) => boolean
    +pivotComparator?: (valueA: string, valueB: string) => number
    +checkboxSelection?: boolean | ((params: CheckboxSelectionCallbackParams) => boolean)
    +headerCheckboxSelection?: boolean | ((params: any) => boolean)
    +headerCheckboxSelectionFilteredOnly?: boolean
    +rowDrag?: boolean | ((params: RowDragCallbackParams) => boolean)
    +rowDragText?: (params: IRowDragItem, dragItemCount: number) => string
    +dndSource?: boolean | ((params: DndSourceCallbackParams) => boolean)
    +dndSourceOnRowDrag?: (params: {    rowNode: RowNode;    dragEvent: DragEvent;}) => void
    +suppressMenu?: boolean
    +menuTabs?: string[]
    +sortable?: boolean
    +suppressMovable?: boolean
    +suppressCellFlash?: boolean
    +lockPosition?: boolean
    +lockVisible?: boolean
    +lockPinned?: boolean
    +unSortIcon?: boolean
    +suppressSizeToFit?: boolean
    +resizable?: boolean
    +suppressAutoSize?: boolean
    +suppressKeyboardEvent?: (params: SuppressKeyboardEventParams) => boolean
    +enableRowGroup?: boolean
    +enablePivot?: boolean
    +enableValue?: boolean
    +editable?: boolean | ((params: EditableCallbackParams) => boolean)
    +colSpan?: (params: ColSpanParams) => number
    +rowSpan?: (params: RowSpanParams) => number
    +suppressPaste?: boolean | ((params: SuppressPasteCallbackParams) => boolean)
    +suppressNavigable?: boolean | ((params: SuppressNavigableCallbackParams) => boolean)
    +getQuickFilterText?: (params: GetQuickFilterTextParams) => string
    +newValueHandler?: (params: any) => boolean
    +singleClickEdit?: boolean
    +template?: string
    +templateUrl?: string
    +cellClassRules?: { [cssClassName: string]: string | Function; }
    +onCellValueChanged?: Function
    +onCellClicked?: (event: CellClickedEvent) => void
    +onCellDoubleClicked?: (event: CellDoubleClickedEvent) => void
    +onCellContextMenu?: (event: CellContextMenuEvent) => void
    +icons?: { [key: string]: string; }
    +enableCellChangeFlash?: boolean
    +pivotValueColumn?: Column
    +pivotTotalColumnIds?: string[]
    +headerComponent?: string | (new () => any)
    +headerComponentFramework?: any
    +headerComponentParams?: any
    +floatingFilter?: boolean
    +refData?: { [key: string]: string; }
    +chartDataType?: "category" | "time" | "series" | "excluded"
    +columnsMenuParams?: ColumnsMenuParams
}
interface ColumnFunctionCallbackParams {
    +node: RowNode
    +data: any
    +column: Column
    +colDef: ColDef
    +context: any
    +api: GridApi
    +columnApi: ColumnApi
}
interface CheckboxSelectionCallbackParams extends ColumnFunctionCallbackParams
interface RowDragCallbackParams extends ColumnFunctionCallbackParams
interface DndSourceCallbackParams extends ColumnFunctionCallbackParams
interface EditableCallbackParams extends ColumnFunctionCallbackParams
interface SuppressPasteCallbackParams extends ColumnFunctionCallbackParams
interface SuppressNavigableCallbackParams extends ColumnFunctionCallbackParams
interface IsColumnFunc
interface IsColumnFuncParams extends ColumnFunctionCallbackParams
interface GetQuickFilterTextParams {
    +value: any
    +node: RowNode
    +data: any
    +column: Column
    +colDef: ColDef
    +context: any
}
interface ColumnsMenuParams {
    +suppressSyncLayoutWithGrid?: boolean
    +suppressColumnFilter?: boolean
    +suppressColumnSelectAll?: boolean
    +suppressColumnExpandAll?: boolean
    +contractColumnSelection?: boolean
}
interface BaseColDefParams {
    +node: RowNode
    +data: any
    +colDef: ColDef
    +column: Column
    +api: GridApi
    +columnApi: ColumnApi
    +context: any
}
interface BaseWithValueColDefParams extends BaseColDefParams {
    +value: any
}
interface ValueGetterParams extends BaseColDefParams {
    +getValue: (field: string) => any
}
interface NewValueParams extends BaseColDefParams {
    +oldValue: any
    +newValue: any
}
interface ValueSetterParams extends NewValueParams
interface ValueParserParams extends NewValueParams
interface ValueFormatterParams extends BaseWithValueColDefParams
interface ColSpanParams extends BaseColDefParams
interface RowSpanParams extends BaseColDefParams
interface SuppressKeyboardEventParams extends ColumnFunctionCallbackParams {
    +event: KeyboardEvent
    +editing: boolean
}
interface SuppressHeaderKeyboardEventParams {
    +api: GridApi
    +columnApi: ColumnApi
    +column: Column | ColumnGroup
    +colDef: ColDef | ColGroupDef
    +context: any
    +headerRowIndex: number
    +event: KeyboardEvent
}
interface CellClassParams extends RowClassParams {
    +colDef: ColDef
    +value: any
}
interface ColumnGroupChild extends IEventEmitter {
    +getUniqueId(): string
    +getActualWidth(): number
    +getMinWidth(): number
    +getLeft(): number
    +getOldLeft(): number
    +getDefinition(): AbstractColDef
    +getColumnGroupShow(): string
    +getParent(): ColumnGroupChild
    +isResizable(): boolean
    +setParent(parent: ColumnGroup): void
    +isEmptyGroup(): boolean
    +isMoving(): boolean
    +getPinned(): string
}
class ColumnGroup implements ColumnGroupChild {
    +gridOptionsWrapper: GridOptionsWrapper
    -children: ColumnGroupChild[]
    -displayedChildren: ColumnGroupChild[]
    -groupId: string
    -instanceId: number
    -originalColumnGroup: OriginalColumnGroup
    -pinned: "right" | "left"
    -left: number
    -oldLeft: number
    -localEventService: EventService
    -parent: ColumnGroup
    +reset(): void
    +getParent(): ColumnGroup
    +setParent(parent: ColumnGroup): void
    +getUniqueId(): string
    +isEmptyGroup(): boolean
    +isMoving(): boolean
    +checkLeft(): void
    +getLeft(): number
    +getOldLeft(): number
    +setLeft(left: number): void
    +getPinned(): "right" | "left"
    -createAgEvent(type: string): AgEvent
    +addEventListener(eventType: string, listener: Function): void
    +removeEventListener(eventType: string, listener: Function): void
    +getGroupId(): string
    +getInstanceId(): number
    +isChildInThisGroupDeepSearch(wantedChild: ColumnGroupChild): boolean
    +getActualWidth(): number
    +isResizable(): boolean
    +getMinWidth(): number
    +addChild(child: ColumnGroupChild): void
    +getDisplayedChildren(): ColumnGroupChild[]
    +getLeafColumns(): Column[]
    +getDisplayedLeafColumns(): Column[]
    +getDefinition(): AbstractColDef
    +getColGroupDef(): ColGroupDef
    +isPadding(): boolean
    +isExpandable(): boolean
    +isExpanded(): boolean
    +setExpanded(expanded: boolean): void
    -addDisplayedLeafColumns(leafColumns: Column[]): void
    -addLeafColumns(leafColumns: Column[]): void
    +getChildren(): ColumnGroupChild[]
    +getColumnGroupShow(): string
    +getOriginalColumnGroup(): OriginalColumnGroup
    +getPaddingLevel(): number
    +calculateDisplayedColumns(): void
    +{static} HEADER_GROUP_SHOW_OPEN: string
    +{static} HEADER_GROUP_SHOW_CLOSED: string
    +{static} EVENT_LEFT_CHANGED: string
    +{static} EVENT_DISPLAYED_CHILDREN_CHANGED: string
    +{static} createUniqueId(groupId: string, instanceId: number): string
}
class ColumnKeyCreator {
    -existingKeys: { [key: string]: boolean; }
    +addExistingKeys(keys: string[]): void
    +getUniqueKey(colId?: string, colField?: string): string
}
class ColumnFactory extends BeanStub {
    -columnUtils: ColumnUtils
    -logger: Logger
    -setBeans(loggerFactory: LoggerFactory): void
    +createColumnTree(defs: (ColDef | ColGroupDef)[], primaryColumns: boolean, existingTree?: OriginalColumnGroupChild[]): { columnTree: OriginalColumnGroupChild[]; treeDept: number; }
    -extractExistingTreeData(existingTree?: OriginalColumnGroupChild[]): { existingCols: Column[]; existingGroups: OriginalColumnGroup[]; existingColKeys: string[]; }
    +createForAutoGroups(autoGroupCols: Column[], gridBalancedTree: OriginalColumnGroupChild[]): OriginalColumnGroupChild[]
    -createAutoGroupTreeItem(balancedColumnTree: OriginalColumnGroupChild[], column: Column): OriginalColumnGroupChild
    -findDepth(balancedColumnTree: OriginalColumnGroupChild[]): number
    -balanceColumnTree(unbalancedTree: OriginalColumnGroupChild[], currentDept: number, columnDept: number, columnKeyCreator: ColumnKeyCreator): OriginalColumnGroupChild[]
    -findMaxDept(treeChildren: OriginalColumnGroupChild[], dept: number): number
    -recursivelyCreateColumns(defs: (ColDef | ColGroupDef)[], level: number, primaryColumns: boolean, existingColsCopy: Column[], columnKeyCreator: ColumnKeyCreator, existingGroups: OriginalColumnGroup[]): OriginalColumnGroupChild[]
    -createColumnGroup(primaryColumns: boolean, colGroupDef: ColGroupDef, level: number, existingColumns: Column[], columnKeyCreator: ColumnKeyCreator, existingGroups: OriginalColumnGroup[]): OriginalColumnGroup
    -createMergedColGroupDef(colGroupDef: ColGroupDef): ColGroupDef
    -createColumn(primaryColumns: boolean, colDef: ColDef, existingColsCopy: Column[], columnKeyCreator: ColumnKeyCreator): Column
    -applyColumnState(column: Column, colDef: ColDef): void
    +findExistingColumn(newColDef: ColDef, existingColsCopy: Column[]): Column
    +findExistingGroup(newGroupDef: ColGroupDef, existingGroups: OriginalColumnGroup[]): OriginalColumnGroup
    +mergeColDefs(colDef: ColDef): ColDef
    -assignColumnTypes(type: string | string[], colDefMerged: ColDef): void
    -checkForDeprecatedItems(colDef: AbstractColDef): void
    -isColumnGroup(abstractColDef: ColDef | ColGroupDef): boolean
}
class GroupInstanceIdCreator {
    -existingIds: any
    +getInstanceIdForKey(key: string): number
}
class DisplayedGroupCreator extends BeanStub {
    -columnUtils: ColumnUtils
    +createDisplayedGroups(sortedVisibleColumns: Column[], balancedColumnTree: OriginalColumnGroupChild[], groupInstanceIdCreator: GroupInstanceIdCreator, pinned: "right" | "left", oldDisplayedGroups?: ColumnGroupChild[]): ColumnGroupChild[]
    -createColumnGroup(originalGroup: OriginalColumnGroup, groupInstanceIdCreator: GroupInstanceIdCreator, oldColumnsMapped: { [key: string]: ColumnGroup; }, pinned: "right" | "left"): ColumnGroup
    -mapOldGroupsById(displayedGroups: ColumnGroupChild[]): { [uniqueId: string]: ColumnGroup; }
    -setupParentsIntoColumns(columnsOrGroups: ColumnGroupChild[], parent: ColumnGroup): void
    -getOriginalPathForColumn(balancedColumnTree: OriginalColumnGroupChild[], column: Column): OriginalColumnGroup[]
}
class AutoGroupColService extends BeanStub {
    -columnController: ColumnController
    -columnFactory: ColumnFactory
    +createAutoGroupColumns(rowGroupColumns: Column[]): Column[]
    -createOneAutoGroupColumn(rowGroupCol?: Column, index?: number): Column
    -generateDefaultColDef(rowGroupCol?: Column): ColDef
    +{static} GROUP_AUTO_COLUMN_BUNDLE_ID: string
}
class ColumnDefFactory {
    +buildColumnDefs(cols: Column[], rowGroupColumns: Column[], pivotColumns: Column[]): (ColDef | ColGroupDef)[]
    -createDefFromGroup(group: ColumnGroup): ColGroupDef
    -createDefFromColumn(col: Column, rowGroupColumns: Column[], pivotColumns: Column[]): ColDef
}
interface ColumnResizeSet {
    +columns: Column[]
    +ratios: number[]
    +width: number
}
interface ColumnState {
    +colId?: string
    +hide?: boolean
    +aggFunc?: string | IAggFunc
    +width?: number
    +pivot?: boolean
    +pivotIndex?: number
    +pinned?: string | boolean
    +rowGroup?: boolean
    +rowGroupIndex?: number
    +flex?: number
    +sort?: string
    +sortIndex?: number
}
class ColumnController extends BeanStub {
    -expressionService: ExpressionService
    -columnFactory: ColumnFactory
    -displayedGroupCreator: DisplayedGroupCreator
    -autoWidthCalculator: AutoWidthCalculator
    -columnUtils: ColumnUtils
    -columnAnimationService: ColumnAnimationService
    -autoGroupColService: AutoGroupColService
    -aggFuncService: IAggFuncService
    -valueCache: ValueCache
    -animationFrameService: AnimationFrameService
    -rowModel: IRowModel
    -columnApi: ColumnApi
    -gridApi: GridApi
    -sortController: SortController
    -columnDefFactory: ColumnDefFactory
    -primaryColumnTree: OriginalColumnGroupChild[]
    -primaryHeaderRowCount: number
    -primaryColumns: Column[]
    -primaryColumnsMap: { [id: string]: Column; }
    -secondaryBalancedTree: OriginalColumnGroupChild[]
    -secondaryColumns: Column[]
    -secondaryHeaderRowCount: number
    -secondaryColumnsPresent: boolean
    -columnsForQuickFilter: Column[]
    -gridBalancedTree: OriginalColumnGroupChild[]
    -gridColumns: Column[]
    -gridColumnsMap: { [id: string]: Column; }
    -gridHeaderRowCount: number
    -lastPrimaryOrder: Column[]
    -gridColsArePrimary: boolean
    -displayedTreeLeft: ColumnGroupChild[]
    -displayedTreeRight: ColumnGroupChild[]
    -displayedTreeCentre: ColumnGroupChild[]
    -displayedColumnsLeft: Column[]
    -displayedColumnsRight: Column[]
    -displayedColumnsCenter: Column[]
    -displayedColumns: Column[]
    -displayedColumnsAndGroupsMap: { [id: string]: ColumnGroupChild; }
    -viewportColumns: Column[]
    -viewportColumnsCenter: Column[]
    -viewportRowLeft: { [row: number]: ColumnGroupChild[]; }
    -viewportRowRight: { [row: number]: ColumnGroupChild[]; }
    -viewportRowCenter: { [row: number]: ColumnGroupChild[]; }
    -colSpanActive: boolean
    -autoRowHeightColumns: Column[]
    -suppressColumnVirtualisation: boolean
    -rowGroupColumns: Column[]
    -valueColumns: Column[]
    -pivotColumns: Column[]
    -groupAutoColumns: Column[]
    -groupDisplayColumns: Column[]
    -ready: boolean
    -logger: Logger
    -autoGroupsNeedBuilding: boolean
    -forceRecreateAutoGroups: boolean
    -pivotMode: boolean
    -usingTreeData: boolean
    -scrollWidth: number
    -scrollPosition: number
    -bodyWidth: number
    -leftWidth: number
    -rightWidth: number
    -bodyWidthDirty: boolean
    -viewportLeft: number
    -viewportRight: number
    -flexViewportWidth: number
    -columnDefs: (ColDef | ColGroupDef)[]
    -colDefVersion: number
    -flexColsCalculatedAtLestOnce: boolean
    +init(): void
    +onAutoGroupColumnDefChanged(): void
    +getColDefVersion(): number
    +setColumnDefs(columnDefs: (ColDef | ColGroupDef)[], source?: ColumnEventType): void
    -dispatchNewColumnsLoaded(): void
    -dispatchEverythingChanged(source?: ColumnEventType): void
    -orderGridColumnsLikePrimary(): void
    +isAutoRowHeightActive(): boolean
    +getAllAutoRowHeightCols(): Column[]
    -setViewport(): void
    +getDisplayedColumnsStartingAt(column: Column): Column[]
    -checkViewportColumns(): void
    +setViewportPosition(scrollWidth: number, scrollPosition: number): void
    +isPivotMode(): boolean
    -isPivotSettingAllowed(pivot: boolean): boolean
    +setPivotMode(pivotMode: boolean, source?: ColumnEventType): void
    +getSecondaryPivotColumn(pivotKeys: string[], valueColKey: string | Column): Column
    -setBeans(loggerFactory: LoggerFactory): void
    -setFirstRightAndLastLeftPinned(source: ColumnEventType): void
    +autoSizeColumns(keys: (string | Column)[], skipHeader?: boolean, source?: ColumnEventType): void
    +fireColumnResizedEvent(columns: Column[], finished: boolean, source: ColumnEventType, flexColumns?: Column[]): void
    +autoSizeColumn(key: string | Column, skipHeader?: boolean, source?: ColumnEventType): void
    +autoSizeAllColumns(skipHeader?: boolean, source?: ColumnEventType): void
    -getColumnsFromTree(rootColumns: OriginalColumnGroupChild[]): Column[]
    +getAllDisplayedTrees(): ColumnGroupChild[]
    +getPrimaryColumnTree(): OriginalColumnGroupChild[]
    +getHeaderRowCount(): number
    +getDisplayedTreeLeft(): ColumnGroupChild[]
    +getDisplayedTreeRight(): ColumnGroupChild[]
    +getDisplayedTreeCentre(): ColumnGroupChild[]
    +isColumnDisplayed(column: Column): boolean
    +getAllDisplayedColumns(): Column[]
    +getViewportColumns(): Column[]
    +getDisplayedLeftColumnsForRow(rowNode: RowNode): Column[]
    +getDisplayedRightColumnsForRow(rowNode: RowNode): Column[]
    -getDisplayedColumnsForRow(rowNode: RowNode, displayedColumns: Column[], filterCallback?: (column: Column) => boolean, emptySpaceBeforeColumn?: (column: Column) => boolean): Column[]
    +getViewportCenterColumnsForRow(rowNode: RowNode): Column[]
    +getAriaColumnIndex(col: Column): number
    -isColumnInViewport(col: Column): boolean
    +getDisplayedColumnsLeftWidth(): number
    +getDisplayedColumnsRightWidth(): number
    +updatePrimaryColumnList(keys: (string | Column)[], masterList: Column[], actionIsAdd: boolean, columnCallback: (column: Column) => void, eventType: string, source?: ColumnEventType): void
    +setRowGroupColumns(colKeys: (string | Column)[], source?: ColumnEventType): void
    -setRowGroupActive(active: boolean, column: Column, source: ColumnEventType): void
    +addRowGroupColumn(key: string | Column, source?: ColumnEventType): void
    +addRowGroupColumns(keys: (string | Column)[], source?: ColumnEventType): void
    +removeRowGroupColumns(keys: (string | Column)[], source?: ColumnEventType): void
    +removeRowGroupColumn(key: string | Column, source?: ColumnEventType): void
    +addPivotColumns(keys: (string | Column)[], source?: ColumnEventType): void
    +setPivotColumns(colKeys: (string | Column)[], source?: ColumnEventType): void
    +addPivotColumn(key: string | Column, source?: ColumnEventType): void
    +removePivotColumns(keys: (string | Column)[], source?: ColumnEventType): void
    +removePivotColumn(key: string | Column, source?: ColumnEventType): void
    -setPrimaryColumnList(colKeys: (string | Column)[], masterList: Column[], eventName: string, columnCallback: (added: boolean, column: Column) => void, source: ColumnEventType): void
    +setValueColumns(colKeys: (string | Column)[], source?: ColumnEventType): void
    -setValueActive(active: boolean, column: Column, source: ColumnEventType): void
    +addValueColumns(keys: (string | Column)[], source?: ColumnEventType): void
    +addValueColumn(colKey: string | Column, source?: ColumnEventType): void
    +removeValueColumn(colKey: string | Column, source?: ColumnEventType): void
    +removeValueColumns(keys: (string | Column)[], source?: ColumnEventType): void
    -normaliseColumnWidth(column: Column, newWidth: number): number
    -getPrimaryOrGridColumn(key: string | Column): Column
    +setColumnWidths(columnWidths: { key: string | Column; newWidth: number; }[], shiftKey: boolean, finished: boolean, source?: ColumnEventType): void
    -checkMinAndMaxWidthsForSet(columnResizeSet: ColumnResizeSet): boolean
    +resizeColumnSets(resizeSets: ColumnResizeSet[], finished: boolean, source: ColumnEventType): void
    +setColumnAggFunc(key: string | Column, aggFunc: string, source?: ColumnEventType): void
    +moveRowGroupColumn(fromIndex: number, toIndex: number, source?: ColumnEventType): void
    +moveColumns(columnsToMoveKeys: (string | Column)[], toIndex: number, source?: ColumnEventType): void
    +doesMovePassRules(columnsToMove: Column[], toIndex: number): boolean
    +sortColumnsLikeGridColumns(cols: Column[]): void
    +doesMovePassLockedPositions(proposedColumnOrder: Column[]): boolean
    +doesMovePassMarryChildren(allColumnsCopy: Column[]): boolean
    +moveColumn(key: string | Column, toIndex: number, source?: ColumnEventType): void
    +moveColumnByIndex(fromIndex: number, toIndex: number, source?: ColumnEventType): void
    +getColumnDefs(): (ColDef | ColGroupDef)[]
    +getBodyContainerWidth(): number
    +getContainerWidth(pinned: string): number
    -updateBodyWidths(): void
    +getValueColumns(): Column[]
    +getPivotColumns(): Column[]
    +isPivotActive(): boolean
    +getRowGroupColumns(): Column[]
    +getDisplayedCenterColumns(): Column[]
    +getDisplayedLeftColumns(): Column[]
    +getDisplayedRightColumns(): Column[]
    +getDisplayedColumns(type: string): Column[]
    +getAllPrimaryColumns(): Column[]
    +getSecondaryColumns(): Column[]
    +getAllColumnsForQuickFilter(): Column[]
    +getAllGridColumns(): Column[]
    +isEmpty(): boolean
    +isRowGroupEmpty(): boolean
    +setColumnVisible(key: string | Column, visible: boolean, source?: ColumnEventType): void
    +setColumnsVisible(keys: (string | Column)[], visible?: boolean, source?: ColumnEventType): void
    +setColumnPinned(key: string | Column, pinned: string | boolean, source?: ColumnEventType): void
    +setColumnsPinned(keys: (string | Column)[], pinned: string | boolean, source?: ColumnEventType): void
    -actionOnGridColumns(keys: (string | Column)[], action: (column: Column) => boolean, source: ColumnEventType, createEvent?: () => ColumnEvent): void
    +getDisplayedColBefore(col: Column): Column
    +getDisplayedColAfter(col: Column): Column
    +getDisplayedGroupAfter(columnGroup: ColumnGroup): ColumnGroup
    +getDisplayedGroupBefore(columnGroup: ColumnGroup): ColumnGroup
    +getDisplayedGroupAtDirection(columnGroup: ColumnGroup, direction: "Before" | "After"): ColumnGroup
    +getColumnGroupAtLevel(column: Column, level: number): ColumnGroup
    +isPinningLeft(): boolean
    +isPinningRight(): boolean
    +getPrimaryAndSecondaryAndAutoColumns(): Column[]
    -createStateItemFromColumn(column: Column): ColumnState
    +getColumnState(): ColumnState[]
    -orderColumnStateList(columnStateList: any[]): void
    +resetColumnState(source?: ColumnEventType): void
    +applyColumnState(params: ApplyColumnStateParams, source?: ColumnEventType): boolean
    -applyOrderAfterApplyState(params: ApplyColumnStateParams): void
    -compareColumnStatesAndRaiseEvents(source: ColumnEventType): () => void
    -raiseColumnPinnedEvent(changedColumns: Column[], source: ColumnEventType): void
    -raiseColumnVisibleEvent(changedColumns: Column[], source: ColumnEventType): void
    -raiseColumnMovedEvent(colStateBefore: ColumnState[], source: ColumnEventType): void
    -syncColumnWithStateItem(column: Column, stateItem: ColumnState, defaultState: ColumnState, rowGroupIndexes: { [key: string]: number; }, pivotIndexes: { [key: string]: number; }, autoCol: boolean, source: ColumnEventType): void
    +getGridColumns(keys: (string | Column)[]): Column[]
    -getColumns(keys: (string | Column)[], columnLookupCallback: (key: string | Column) => Column): Column[]
    +getColumnWithValidation(key: string | Column): Column
    +getPrimaryColumn(key: string | Column): Column
    +getGridColumn(key: string | Column): Column
    -getColumn(key: string | Column, columnList: Column[], columnMap: { [id: string]: Column; }): Column
    -getAutoColumn(key: string | Column): Column
    -columnsMatch(column: Column, key: string | Column): boolean
    +getDisplayNameForColumn(column: Column, location: string, includeAggFunc?: boolean): string
    +getDisplayNameForOriginalColumnGroup(columnGroup: ColumnGroup, originalColumnGroup: OriginalColumnGroup, location: string): string
    +getDisplayNameForColumnGroup(columnGroup: ColumnGroup, location: string): string
    -getHeaderName(colDef: AbstractColDef, column: Column, columnGroup: ColumnGroup, originalColumnGroup: OriginalColumnGroup, location: string): string
    -wrapHeaderNameWithAggFunc(column: Column, headerName: string): string
    +getColumnGroup(colId: string | ColumnGroup, instanceId?: number): ColumnGroup
    +isReady(): boolean
    -extractValueColumns(source: ColumnEventType, oldPrimaryColumns: Column[]): void
    -extractRowGroupColumns(source: ColumnEventType, oldPrimaryColumns: Column[]): void
    -extractColumns(oldPrimaryColumns?: Column[], previousCols?: Column[], setFlagFunc: (col: Column, flag: boolean) => void, getIndexFunc: (colDef: ColDef) => number | null | undefined, getInitialIndexFunc: (colDef: ColDef) => number | null | undefined, getValueFunc: (colDef: ColDef) => boolean | null | undefined, getInitialValueFunc: (colDef: ColDef) => boolean | undefined): Column[]
    -extractPivotColumns(source: ColumnEventType, oldPrimaryColumns: Column[]): void
    +resetColumnGroupState(source?: ColumnEventType): void
    +getColumnGroupState(): { groupId: string; open: boolean; }[]
    +setColumnGroupState(stateItems: { groupId: string; open: boolean | undefined; }[], source?: ColumnEventType): void
    +setColumnGroupOpened(key: string | OriginalColumnGroup, newValue: boolean, source?: ColumnEventType): void
    +getOriginalColumnGroup(key: string | OriginalColumnGroup): OriginalColumnGroup
    -calculateColumnsForDisplay(): Column[]
    -checkColSpanActiveInCols(columns: Column[]): boolean
    -calculateColumnsForGroupDisplay(): void
    +getGroupDisplayColumns(): Column[]
    -updateDisplayedColumns(source: ColumnEventType): void
    +isSecondaryColumnsPresent(): boolean
    +setSecondaryColumns(colDefs: (ColDef | ColGroupDef)[], source?: ColumnEventType): void
    -processSecondaryColumnDefinitions(colDefs: (ColDef | ColGroupDef)[]): (ColDef | ColGroupDef)[]
    -updateGridColumns(): void
    -orderGridColsLikeLastPrimary(): void
    +isPrimaryColumnGroupsPresent(): boolean
    -setupQuickFilterColumns(): void
    -putFixedColumnsFirst(cols: Column[]): Column[]
    -addAutoGroupToGridColumns(): void
    -clearDisplayedAndViewportColumns(): void
    -updateGroupsAndDisplayedColumns(source: ColumnEventType): void
    -deriveDisplayedColumns(source: ColumnEventType): void
    -joinDisplayedColumns(): void
    -setLeftValues(source: ColumnEventType): void
    -setLeftValuesOfColumns(source: ColumnEventType): void
    -setLeftValuesOfGroups(): void
    -derivedDisplayedColumnsFromDisplayedTree(tree: ColumnGroupChild[], columns: Column[]): void
    -extractViewportColumns(): void
    +getVirtualHeaderGroupRow(type: string, dept: number): ColumnGroupChild[]
    -extractViewportRows(): void
    -extractViewport(): void
    -filterOutColumnsWithinViewport(): Column[]
    +refreshFlexedColumns(params?: { resizingCols?: Column[]; skipSetLeft?: boolean; viewportWidth?: number; source?: ColumnEventType; fireResizedEvent?: boolean; updateBodyWidths?: boolean; }): Column[]
    +sizeColumnsToFit(gridWidth: any, source?: ColumnEventType, silent?: boolean): void
    -buildDisplayedTrees(visibleColumns: Column[]): void
    -updateDisplayedMap(): void
    +isDisplayed(item: ColumnGroupChild): boolean
    -updateOpenClosedVisibilityInColumnGroups(): void
    +getGroupAutoColumns(): Column[]
    -createGroupAutoColumnsIfNeeded(): void
    -autoColsEqual(colsA: Column[], colsB: Column[]): boolean
    -getWidthOfColsInList(columnList: Column[]): number
    +getGridBalancedTree(): OriginalColumnGroupChild[]
    +hasFloatingFilters(): boolean
    +getFirstDisplayedColumn(): Column
}
class AlignedGridsService extends BeanStub {
    -columnController: ColumnController
    -logger: Logger
    -gridPanel: GridPanel
    -consuming: boolean
    -setBeans(loggerFactory: LoggerFactory): void
    +registerGridComp(gridPanel: GridPanel): void
    -init(): void
    -fireEvent(callback: (alignedGridService: AlignedGridsService) => void): void
    -onEvent(callback: () => void): void
    -fireColumnEvent(event: ColumnEvent): void
    -fireScrollEvent(event: BodyScrollEvent): void
    -onScrollEvent(event: BodyScrollEvent): void
    +getMasterColumns(event: ColumnEvent): Column[]
    +getColumnIds(event: ColumnEvent): string[]
    +onColumnEvent(event: AgEvent): void
    -processGroupOpenedEvent(groupOpenedEvent: ColumnGroupOpenedEvent): void
    -processColumnEvent(colEvent: ColumnEvent): void
}
class StandardMenuFactory extends BeanStub implements IMenuFactory {
    -filterManager: FilterManager
    -popupService: PopupService
    -focusController: FocusController
    -hidePopup: () => void
    -tabListener: () => null
    -gridPanel: GridPanel
    +registerGridComp(gridPanel: GridPanel): void
    +hideActiveMenu(): void
    +showMenuAfterMouseEvent(column: Column, mouseEvent: MouseEvent | Touch): void
    +showMenuAfterButtonClick(column: Column, eventSource: HTMLElement): void
    +showPopup(column: Column, positionCallback: (eMenu: HTMLElement) => void, eventSource: HTMLElement): void
    -trapFocusWithin(e: KeyboardEvent, menu: HTMLElement): void
    +isMenuEnabled(column: Column): boolean
}
class VanillaFrameworkOverrides implements IFrameworkOverrides {
    +setTimeout(action: any, timeout?: any): void
    +isOutsideAngular: (eventType: string) => boolean
    +addEventListener(element: HTMLElement, type: string, listener: EventListenerOrEventListenerObject, useCapture?: boolean): void
    +dispatchEvent(eventType: string, listener: () => {}): void
}
class ChangeDetectionService extends BeanStub {
    -rowModel: IRowModel
    -rowRenderer: RowRenderer
    -clientSideRowModel: IClientSideRowModel
    -init(): void
    -onCellValueChanged(event: CellValueChangedEvent): void
    -doChangeDetection(rowNode: RowNode, column: Column): void
}
class SelectableService extends BeanStub {
    -groupSelectsChildren: boolean
    -isRowSelectableFunc?: IsRowSelectable
    +init(): void
    +updateSelectableAfterGrouping(rowNode: RowNode): void
    +updateSelectableAfterFiltering(rowNode: RowNode): void
    -recurseDown(children: RowNode[], nextChildrenFunc: (rowNode: RowNode) => RowNode[] | null): void
}
class PaginationComp extends Component {
    -paginationProxy: PaginationProxy
    -rowModel: IRowModel
    -rowNodeBlockLoader: RowNodeBlockLoader
    -btFirst: HTMLElement
    -btPrevious: HTMLElement
    -btNext: HTMLElement
    -btLast: HTMLElement
    -lbRecordCount: any
    -lbFirstRowOnPage: any
    -lbLastRowOnPage: any
    -lbCurrent: any
    -lbTotal: any
    -previousAndFirstButtonsDisabled: boolean
    -nextButtonDisabled: boolean
    -lastButtonDisabled: boolean
    #postConstruct(): void
    -onPaginationChanged(): void
    -onBtFirst(): void
    -setCurrentPageLabel(): void
    -formatNumber(value: number): string
    -getTemplate(): string
    -onBtNext(): void
    -onBtPrevious(): void
    -onBtLast(): void
    -enableOrDisableButtons(): void
    -updateRowLabels(): void
    -isZeroPagesToDisplay(): boolean
    -setTotalLabels(): void
}
interface AgGroupComponentParams {
    +title?: string
    +enabled?: boolean
    +suppressEnabledCheckbox?: boolean
    +suppressOpenCloseIcons?: boolean
    +cssIdentifier?: string
    +items?: GroupItem[]
    +alignItems?: Align
    +direction?: Direction
}
class AgGroupComponent extends Component {
    -items: GroupItem[]
    -title: string
    -cssIdentifier: string
    -enabled: boolean
    -expanded: boolean
    -suppressEnabledCheckbox: boolean
    -suppressOpenCloseIcons: boolean
    -alignItems: Align
    -eTitleBar: HTMLElement
    -eGroupOpenedIcon: HTMLElement
    -eGroupClosedIcon: HTMLElement
    -eToolbar: HTMLElement
    -cbGroupEnabled: AgCheckbox
    -eTitle: HTMLElement
    -eContainer: HTMLElement
    -postConstruct(): void
    -setupExpandContract(): void
    -refreshChildDisplay(): void
    +isExpanded(): boolean
    +setAlignItems(alignment: Align): this
    +toggleGroupExpand(expanded?: boolean): this
    +addItems(items: GroupItem[]): void
    +addItem(item: GroupItem): void
    +hideItem(hide: boolean, index: number): void
    +setTitle(title: string): this
    +addCssClassToTitleBar(cssClass: string): void
    +setEnabled(enabled: boolean, skipToggle?: boolean): this
    +isEnabled(): boolean
    +onEnableChange(callbackFn: (enabled: boolean) => void): this
    +hideEnabledCheckbox(hide: boolean): this
    +hideOpenCloseIcons(hide: boolean): this
    -refreshDisabledStyles(): void
    +{static} EVENT_EXPANDED: string
    +{static} EVENT_COLLAPSED: string
    -{static} getTemplate(params: AgGroupComponentParams): string
}
interface PanelOptions {
    +component?: Component
    +hideTitleBar?: boolean
    +closable?: boolean
    +title?: string
    +minWidth?: number
    +width?: string | number
    +minHeight?: number
    +height?: string | number
    +centered?: boolean
    +cssIdentifier?: string
    +x?: number
    +y?: number
}
class AgPanel extends Component {
    #popupService: PopupService
    #closable: boolean
    #config: PanelOptions
    #closeButtonComp: Component
    #popupParent: HTMLElement
    #minWidth: number
    #minHeight?: number
    #positioned: boolean
    #dragStartPosition: { x: number; y: number; }
    #position: { x: number; y: number; }
    #size: { width: number | undefined; height: number | undefined; }
    +close: () => void
    #eContentWrapper: HTMLElement
    #eTitleBar: HTMLElement
    #eTitleBarButtons: HTMLElement
    #eTitle: HTMLElement
    #postConstruct(): void
    #renderComponent(): void
    #updateDragStartPosition(x: number, y: number): void
    #calculateMouseMovement(params: { e: MouseEvent; topBuffer?: number; anywhereWithin?: boolean; isLeft?: boolean; isTop?: boolean; }): { movementX: number; movementY: number; }
    -refreshSize(): void
    #offsetElement(x?: number, y?: number): void
    +getHeight(): number
    +setHeight(height: string | number): void
    +getWidth(): number
    +setWidth(width: string | number): void
    +center(): void
    +setClosable(closable: boolean): void
    +setBodyComponent(bodyComponent: Component): void
    +addTitleBarButton(button: Component, position?: number): void
    +getBodyHeight(): number
    +getBodyWidth(): number
    +setTitle(title: string): void
    -onBtClose(): void
    #destroy(): void
    #{static} CLOSE_BTN_TEMPLATE: string
    -{static} getTemplate(config?: PanelOptions): string
}
interface MappedResizer {
    +element: HTMLElement
    +dragSource?: DragListenerParams
}
interface DialogOptions extends PanelOptions {
    +eWrapper?: HTMLElement
    +modal?: boolean
    +alwaysOnTop?: boolean
    +movable?: boolean
    +resizable?: boolean | ResizableStructure
    +maximizable?: boolean
    +x?: number
    +y?: number
    +centered?: boolean
}
class AgDialog extends AgPanel {
    -RESIZE_TEMPLATE: string
    -dragService: DragService
    -moveElement: HTMLElement
    -moveElementDragListener: DragListenerParams
    -resizable: ResizableStructure
    -movable: boolean
    -isMoving: boolean
    -isMaximizable: boolean
    -isMaximized: boolean
    -maximizeListeners: (() => void)[]
    -maximizeButtonComp: Component
    -maximizeIcon: HTMLElement
    -minimizeIcon: HTMLElement
    -resizeListenerDestroy: () => void
    -resizerMap: { top: MappedResizer; bottom: MappedResizer; right: MappedResizer; left: MappedResizer; topLeft: MappedResizer; topRight: MappedResizer; bottomRight: MappedResizer; bottomLeft: MappedResizer; }
    -isResizing: boolean
    -lastPosition: { x: number; y: number; width: number; height: number; }
    #config: DialogOptions
    #postConstruct(): void
    #renderComponent(): void
    -addResizers(): void
    -createMap(): void
    -getResizerElement(side: ResizableSides): HTMLElement
    -onResizeStart(e: MouseEvent): void
    -onResize(e: MouseEvent, side: ResizableSides): void
    -onResizeEnd(): void
    -onMoveStart(e: MouseEvent): void
    -onMove(e: MouseEvent): void
    -onMoveEnd(): void
    -toggleMaximize(): void
    -refreshMaximizeIcon(): void
    -clearMaximizebleListeners(): void
    #destroy(): void
    +setResizable(resizable: boolean | ResizableStructure): void
    +setMovable(movable: boolean): void
    +setMaximizable(maximizable: boolean): void
}
interface IInputRange extends IInputField {
    +min?: number
    +max?: number
    +step?: number
}
class AgInputRange extends AgAbstractInputField {
    -min: number
    -max: number
    #postConstruct(): void
    #addInputListeners(): void
    +setMinValue(value: number): this
    +setMaxValue(value: number): this
    +setStep(value: number): this
    +setValue(value: string, silent?: boolean): this
}
class AgInputNumberField extends AgInputTextField {
    -precision?: number
    -step?: number
    -min?: number
    -max?: number
    +postConstruct(): void
    +normalizeValue(value: string): string
    -adjustPrecision(value: string): string
    +setMin(min: number): this
    +setMax(max: number): this
    +setPrecision(precision: number): this
    +setStep(step?: number): this
    +setValue(value: string, silent?: boolean): this
}
class AgSlider extends AgAbstractLabel {
    #eLabel: HTMLElement
    -eSlider: AgInputRange
    -eText: AgInputNumberField
    #labelAlignment: LabelAlignment
    -init(): void
    +onValueChange(callbackFn: (newValue: number) => void): this
    +setSliderWidth(width: number): this
    +setTextFieldWidth(width: number): this
    +setMinValue(minValue: number): this
    +setMaxValue(maxValue: number): this
    +getValue(): string
    +setValue(value: string): this
    +setStep(step: number): this
    -{static} TEMPLATE: string
}
class AgColorPanel extends Component {
    -H: number
    -S: number
    -B: number
    -A: number
    -spectrumValRect?: ClientRect | DOMRect
    -isSpectrumDragging: boolean
    -spectrumHueRect?: ClientRect | DOMRect
    -isSpectrumHueDragging: boolean
    -spectrumAlphaRect?: ClientRect | DOMRect
    -isSpectrumAlphaDragging: boolean
    -picker: Component
    -colorChanged: boolean
    -spectrumColor: HTMLElement
    -spectrumVal: HTMLElement
    -spectrumDragger: HTMLElement
    -spectrumHue: HTMLElement
    -spectrumHueSlider: HTMLElement
    -spectrumAlpha: HTMLElement
    -spectrumAlphaSlider: HTMLElement
    -recentColors: HTMLElement
    -postConstruct(): void
    -refreshSpectrumRect(): DOMRect
    -refreshHueRect(): DOMRect
    -refreshAlphaRect(): DOMRect
    -onSpectrumDraggerDown(e: MouseEvent): void
    -onSpectrumDraggerMove(e: MouseEvent): void
    -onSpectrumHueDown(e: MouseEvent): void
    -onSpectrumHueMove(e: MouseEvent): void
    -onSpectrumAlphaDown(e: MouseEvent): void
    -onSpectrumAlphaMove(e: MouseEvent): void
    -onMouseUp(): void
    -moveDragger(e: MouseEvent): void
    -moveHueSlider(e: MouseEvent): void
    -moveAlphaSlider(e: MouseEvent): void
    -update(): void
    +setSpectrumValue(saturation: number, brightness: number): void
    -initRecentColors(): void
    +setValue(val: string): void
    -onRecentColorClick(e: MouseEvent): void
    -addRecentColor(): void
    #destroy(): void
    -{static} maxRecentColors: number
    -{static} recentColors: string[]
    -{static} TEMPLATE: string
}
interface ColorPickerConfig extends IAgLabel {
    +color: string
}
class AgColorPicker extends AgPickerField {
    #postConstruct(): void
    +showPicker(): AgDialog
    +setValue(color: string): this
    +getValue(): string
}
class AgAngleSelect extends AgAbstractLabel {
    #eLabel: HTMLElement
    -eParentCircle: HTMLElement
    -eChildCircle: HTMLElement
    -eAngleValue: AgInputNumberField
    #dragService: DragService
    -parentCircleRect: ClientRect | DOMRect
    -degrees: number
    -radius: number
    -offsetX: number
    -offsetY: number
    -dragListener: DragListenerParams
    +postConstruct(): void
    -updateNumberInput(): void
    -positionChildCircle(radians: number): void
    -calculatePolar(): void
    -calculateCartesian(): void
    -setOffsetX(offset: number): this
    -setOffsetY(offset: number): this
    -calculateAngleDrag(e: MouseEvent | Touch): void
    -toDegrees(radians: number): number
    -toRadians(degrees: number): number
    -normalizeNegativeValue(degrees: number): number
    -normalizeAngle180(radians: number): number
    +getRadius(): number
    +setRadius(r: number): this
    +onValueChange(callbackFn: (newValue: number) => void): this
    +getValue(radians?: boolean): number
    +setValue(degrees: number, radians?: boolean): this
    +setWidth(width: number): this
    #destroy(): void
    -{static} TEMPLATE: string
}
class AgToggleButton extends AgCheckbox {
    +setValue(value: boolean, silent?: boolean): this
}
interface GridParams {
    +globalEventListener?: Function
    +$scope?: any
    +$compile?: any
    +quickFilterOnScope?: any
    +frameworkOverrides?: IFrameworkOverrides
    +providedBeanInstances?: { [key: string]: any; }
    +modules?: Module[]
    +rootComponent?: new () => Component
}
class Grid {
    -context: Context
    #logger: Logger
    -gridOptions: GridOptions
    -registerStackComponents(registeredModules: Module[]): void
    -getRegisteredModules(params?: GridParams): Module[]
    -registerModuleUserComponents(registeredModules: Module[]): void
    -createProvidedBeans(eGridDiv: HTMLElement, params?: GridParams): any
    -createAgStackComponentsList(registeredModules: Module[]): any[]
    -createBeansList(registeredModules: Module[]): any[]
    -extractModuleEntity(moduleEntities: any[], extractor: (module: any) => any): any[]
    -setColumnsAndData(): void
    -dispatchGridReadyEvent(gridOptions: GridOptions): void
    -getRowModelClass(registeredModules: Module[]): any
    +destroy(): void
}
class TestFilter extends ProvidedFilter {
    -uiModel: ProvidedFilterModel
    -modelHasChanged: boolean
    +doesFilterPass(params: IDoesFilterPassParams): boolean
    #updateUiVisibility(): void
    #createBodyTemplate(): string
    #getCssIdentifier(): string
    #resetUiToDefaults(silent?: boolean): AgPromise<void>
    #setModelIntoUi(model: ProvidedFilterModel): AgPromise<void>
    #areModelsEqual(a: ProvidedFilterModel, b: ProvidedFilterModel): boolean
    #getFilterType(): string
    +getModelFromUi(): ProvidedFilterModel
    +setModelHasChanged(hasChanged: boolean): void
    +apply(afterFloatingFilter?: boolean, afterDataChange?: boolean): void
}
interface IAggregationStage {
    +aggregateValues(values: any[], aggFuncOrString: string | IAggFunc): any
}
interface IColumnToolPanel {
    +expandColumnGroups(groupIds?: string[]): void
    +collapseColumnGroups(groupIds?: string[]): void
    +setColumnLayout(colDefs: (ColDef | ColGroupDef)[]): void
    +syncLayoutWithGrid(): void
    +setPivotModeSectionVisible(visible: boolean): void
    +setRowGroupsSectionVisible(visible: boolean): void
    +setValuesSectionVisible(visible: boolean): void
    +setPivotSectionVisible(visible: boolean): void
}
interface IFiltersToolPanel {
    +setFilterLayout(colDefs: ColDef[]): void
    +expandFilterGroups(groupIds?: string[]): void
    +collapseFilterGroups(groupIds?: string[]): void
    +expandFilters(colIds?: string[]): void
    +collapseFilters(colIds?: string[]): void
    +syncLayoutWithGrid(): void
}
interface IMenu
interface IRowNodeBlock extends IEventEmitter {
    +getDisplayIndexStart(): number
    +getDisplayIndexEnd(): number
    +getLastAccessed(): number
    +getState(): string
    +isAnyNodeOpen(rowCount: number): boolean
    +getBlockNumber(): number
    +forEachNodeDeep(callback: (rowNode: RowNode, index: number) => void, sequence: NumberSequence, rowCount: number): void
    +forEachNodeShallow(callback: (rowNode: RowNode, index: number) => void, sequence: NumberSequence, rowCount: number): void
    +load(): void
}
interface StageExecuteParams {
    +rowNode: RowNode
    +rowNodeTransaction?: RowNodeTransaction
    +rowNodeTransactions?: RowNodeTransaction[]
    +rowNodeOrder?: { [id: string]: number; }
    +changedPath?: ChangedPath
    +afterColumnsChanged?: boolean
}
interface IRowNodeStage {
    +execute(params: StageExecuteParams): any
}
class TabbedLayout extends ManagedFocusComponent {
    -eHeader: HTMLElement
    -eBody: HTMLElement
    -params: TabbedLayoutParams
    -afterAttachedParams: IAfterGuiAttachedParams
    -items: TabbedItemWrapper[]
    -activeItem: TabbedItemWrapper
    #handleKeyDown(e: KeyboardEvent): void
    #onTabKeyDown(e: KeyboardEvent): void
    +setAfterAttachedParams(params: IAfterGuiAttachedParams): void
    +getMinDimensions(): { width: number; height: number; }
    +showFirstItem(): void
    -addItem(item: TabbedItem): void
    +showItem(tabbedItem: TabbedItem): void
    -showItemWrapper(wrapper: TabbedItemWrapper): void
    -{static} getTemplate(cssClass?: string): string
}
interface TabbedLayoutParams {
    +items: TabbedItem[]
    +cssClass?: string
    +onItemClicked?: Function
    +onActiveItemClicked?: Function
}
interface TabbedItem {
    +title: Element
    +titleLabel: string
    +bodyPromise: AgPromise<HTMLElement>
    +name: string
    +afterAttachedCallback?: (params: IAfterGuiAttachedParams) => void
}
interface TabbedItemWrapper {
    +tabbedItem: TabbedItem
    +eHeaderButton: HTMLElement
}
interface SimpleHttpRequestParams {
    +url: string
}
interface VirtualListModel {
    +getRowCount(): number
    +getRow(index: number): any
    +isRowSelected(index: number): boolean
}
class VirtualList extends ManagedFocusComponent {
    -model: VirtualListModel
    -renderedRows: any
    -componentCreator: (value: any, listItemElement: HTMLElement) => Component
    -rowHeight: number
    -lastFocusedRowIndex: number
    -isDestroyed: boolean
    -resizeObserverService: ResizeObserverService
    -eContainer: HTMLElement
    -cssIdentifier: string
    -ariaRole: string
    #postConstruct(): void
    -addResizeObserver(): void
    #focusInnerElement(fromBottom: boolean): void
    #onFocusIn(e: FocusEvent): void
    #onFocusOut(e: FocusEvent): void
    #handleKeyDown(e: KeyboardEvent): void
    #onTabKeyDown(e: KeyboardEvent): void
    -navigate(up: boolean): boolean
    +getLastFocusedRow(): number
    +focusRow(rowNumber: number): void
    +getComponentAt(rowIndex: number): Component
    -getItemHeight(): number
    +ensureIndexVisible(index: number): void
    +setComponentCreator(componentCreator: (value: any, listItemElement: HTMLElement) => Component): void
    +getRowHeight(): number
    +getScrollTop(): number
    +setRowHeight(rowHeight: number): void
    +refresh(): void
    -clearVirtualRows(): void
    -drawVirtualRows(): void
    -ensureRowsRendered(start: number, finish: number): void
    -insertRow(rowIndex: number): void
    -removeRow(rowIndex: number): void
    -addScrollListener(): void
    +setModel(model: VirtualListModel): void
    +destroy(): void
    -{static} getTemplate(cssIdentifier: string): string
}
class LinkedList<T> {
    -first: LinkedListItem<T>
    -last: LinkedListItem<T>
    +add(item: T): void
    +remove(): T
    +isEmpty(): boolean
}
class LinkedListItem<T> {
    +item: T
    +next: LinkedListItem<T>
}
@enduml
